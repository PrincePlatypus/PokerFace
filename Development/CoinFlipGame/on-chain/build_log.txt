Searching for curl in path.
Found curl at /usr/bin/curl
Searching for powershell in path.
Cannot find powershell on the path
Searching for wget in path.
Found wget at /usr/bin/wget
Selected http transport implementation: curl
File monitor 'config' unchanged.
this build was affected by the following (project) config files:
- cabal.project
File monitor 'improved-plan' unchanged.
PreExisting FailT-0.1.2.0 (FailT-0.1.2.0-CqpEwiWmKDzFDlQWafMJH1)
  base-4.18.2.1
  exceptions-0.10.7
  mtl-2.3.1
  text-2.0.2
PreExisting OneTuple-0.4.2 (OneTuple-0.4.2-7od06fXUUXRBNk1V3VY0g5)
  base-4.18.2.1
  ghc-prim-0.10.0
  template-haskell-2.20.0.0
PreExisting Only-0.1 (Only-0.1-DItEcvi68ww8z5TVixWVcj)
  base-4.18.2.1
  deepseq-1.4.8.1
PreExisting QuickCheck-2.15.0.1 (QuickCheck-2.15.0.1-7DT5dbdKXgt5FCkPae5v9p)
  base-4.18.2.1
  containers-0.6.7
  deepseq-1.4.8.1
  random-1.2.1.3-4DcS9YVcrJh8BlX0j3OjY9
  splitmix-0.1.0.5-BFex6Gx3IBaGtdqU1pJPtq
  template-haskell-2.20.0.0
  transformers-0.6.1.0
PreExisting StateVar-1.2.2 (StateVar-1.2.2-A6sCENWC9xLH02ziP9IDyb)
  base-4.18.2.1
  stm-2.5.1.0
  transformers-0.6.1.0
PreExisting adjunctions-4.4.2 (adjunctions-4.4.2-2481KVoapFqB1gs4Mvlbn9)
  array-0.5.6.0
  base-4.18.2.1
  comonad-5.0.9-8ZWRrlRL43zKWDRwcrbIAe
  containers-0.6.7
  contravariant-1.5.5-L3dzMMfQxh01G5kB8tri44
  distributive-0.6.2.1-AfprxO6uyiDBgDCaNdkxkx
  free-5.2-LSdax1DdaMaCPTpxkFxEbg
  mtl-2.3.1
  profunctors-5.6.2-3lgFBbFFfY91KuXJxf6gL2
  semigroupoids-6.0.1-JojY4E0VJHx8kGvykwlVDS
  semigroups-0.20-7UvOFf0Cvlt7ORp1HkBYyN
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  transformers-0.6.1.0
  transformers-compat-0.7.2-5nFo8llgs2JItrIXIph57L
  void-0.7.3-DBkW9SEsEoE4KUGbU5pvgO
PreExisting aeson-2.2.3.0 (aeson-2.2.3.0-JLQ4tU36pWTISAtFXxxTGO)
  OneTuple-0.4.2-7od06fXUUXRBNk1V3VY0g5
  QuickCheck-2.15.0.1-7DT5dbdKXgt5FCkPae5v9p
  base-4.18.2.1
  bytestring-0.11.5.3
  character-ps-0.1-H07uOjD6SD1EfE7l9KfeMv
  containers-0.6.7
  data-fix-0.3.4-BvXmtXDsLy68185WG0Pce0
  deepseq-1.4.8.1
  dlist-1.0-4gU1uwZtlC12QPDWmtCZHA
  exceptions-0.10.7
  generically-0.1.1-I9byc5Nil798plofO827gA
  ghc-prim-0.10.0
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  indexed-traversable-0.1.4-8j5HZpShpE5BqFup9Ojenr
  integer-conversion-0.1.1-DeIeALAMu9666WTrmIaGC5
  integer-logarithms-1.0.3.1-7Av54u0aaY3468YAGPu9Rv
  network-uri-2.6.4.2-HWiIhV9Dzc69CWgfQnP49N
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  scientific-0.3.8.0-LgIS9oFsrZuKm6CE7CNK3a
  semialign-1.3.1-EztFkwFQfON67LcAAOfCOR
  strict-0.5.1-FORtMbIni2AIKPfHCXFH91
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  template-haskell-2.20.0.0
  text-2.0.2
  text-iso8601-0.1.1-JPUEQRnmVii5JZl0vMVtVe
  text-short-0.1.6-JYTe7ZNYLl9B32IjKxECG6
  th-abstraction-0.6.0.0-6nwiZFs5BlM71phLjoyZV3
  these-1.2.1-JRyCeJCkJl250bmIoLw274
  time-1.12.2
  time-compat-1.9.7-2P0zNtv3JYZH7sTDKsU62C
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
  uuid-types-1.0.6-9jAax7AHSRN5zS4Sd3CfwN
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
  witherable-0.5-1LWawYeqEGqLardLVmvI0K
PreExisting aeson-pretty-0.8.10 (aeson-pretty-0.8.10-Hp7E6KJ5nrbHyBU120MC9p)
  aeson-2.2.3.0-JLQ4tU36pWTISAtFXxxTGO
  base-4.18.2.1
  base-compat-0.14.1-4heBy5B59ewBpEOwRrJlc4
  bytestring-0.11.5.3
  scientific-0.3.8.0-LgIS9oFsrZuKm6CE7CNK3a
  text-2.0.2
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting algebraic-graphs-0.7 (algebraic-graphs-0.7-5KmI8HjBzSyfU8lkwDUnf)
  array-0.5.6.0
  base-4.18.2.1
  containers-0.6.7
  deepseq-1.4.8.1
  transformers-0.6.1.0
PreExisting ansi-terminal-1.1.2 (ansi-terminal-1.1.2-B0OgGuBTUBLLtXcp4uHsI1)
  ansi-terminal-types-1.1-Ljk8G5zFQrc3mzpKoVrFNT
  base-4.18.2.1
  colour-2.3.6-Dv7015zVt5k10e0N0YtJJm
PreExisting ansi-terminal-types-1.1 (ansi-terminal-types-1.1-Ljk8G5zFQrc3mzpKoVrFNT)
  base-4.18.2.1
  colour-2.3.6-Dv7015zVt5k10e0N0YtJJm
PreExisting array-0.5.6.0 (array-0.5.6.0) base-4.18.2.1
PreExisting assoc-1.1.1 (assoc-1.1.1-pRyoYwA2ut8wRI3kAERXo) base-4.18.2.1
PreExisting async-2.2.5 (async-2.2.5-LVr5x9hlJuT5aSeOy7bxSH)
  base-4.18.2.1
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  stm-2.5.1.0
PreExisting attoparsec-0.14.4 (attoparsec-0.14.4-9YprnjwShzO8JJ0OMf0MNe-attoparsec-internal)
  array-0.5.6.0
  base-4.18.2.1
  bytestring-0.11.5.3
  text-2.0.2
PreExisting attoparsec-0.14.4 (attoparsec-0.14.4-AENlT1FD5cUKdoKGsP8Yrt)
  array-0.5.6.0
  attoparsec-0.14.4-9YprnjwShzO8JJ0OMf0MNe-attoparsec-internal
  base-4.18.2.1
  bytestring-0.11.5.3
  containers-0.6.7
  deepseq-1.4.8.1
  ghc-prim-0.10.0
  scientific-0.3.8.0-LgIS9oFsrZuKm6CE7CNK3a
  text-2.0.2
  transformers-0.6.1.0
PreExisting barbies-2.1.1.0 (barbies-2.1.1.0-9PcrS5liw0o53hJOsckZHX)
  base-4.18.2.1
  distributive-0.6.2.1-AfprxO6uyiDBgDCaNdkxkx
  transformers-0.6.1.0
PreExisting base-4.18.2.1 (base-4.18.2.1)
  ghc-bignum-1.3
  ghc-prim-0.10.0
  rts-1.0.2
PreExisting base-compat-0.14.1 (base-compat-0.14.1-4heBy5B59ewBpEOwRrJlc4)
  base-4.18.2.1
  ghc-prim-0.10.0
  unix-2.8.4.0
PreExisting base-orphans-0.9.3 (base-orphans-0.9.3-6eHtw3ngQEKHEGQPUmUnCL)
  base-4.18.2.1
  ghc-prim-0.10.0
PreExisting base16-bytestring-1.0.2.0 (base16-bytestring-1.0.2.0-7dLjEOJDdBNFW2UWv9zpg8)
  base-4.18.2.1
  bytestring-0.11.5.3
PreExisting base64-bytestring-1.2.1.0 (base64-bytestring-1.2.1.0-2n37CC8Eq7mGHxpF66Eiye)
  base-4.18.2.1
  bytestring-0.11.5.3
PreExisting basement-0.0.16 (basement-0.0.16-HvTgG10TboKKpCgs2TlMDx)
  base-4.18.2.1
  ghc-prim-0.10.0
PreExisting bifunctors-5.6.2 (bifunctors-5.6.2-JOeQrqx1Bk03m9FXwiQq0j)
  assoc-1.1.1-pRyoYwA2ut8wRI3kAERXo
  base-4.18.2.1
  comonad-5.0.9-8ZWRrlRL43zKWDRwcrbIAe
  containers-0.6.7
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  template-haskell-2.20.0.0
  th-abstraction-0.6.0.0-6nwiZFs5BlM71phLjoyZV3
  transformers-0.6.1.0
PreExisting bimap-0.5.0 (bimap-0.5.0-7xXK3bsJVmhBL74wTtka32)
  base-4.18.2.1
  containers-0.6.7
  deepseq-1.4.8.1
  exceptions-0.10.7
PreExisting bin-0.1.4 (bin-0.1.4-kZYD9OAOMt3wjz0Kz1T2S)
  QuickCheck-2.15.0.1-7DT5dbdKXgt5FCkPae5v9p
  base-4.18.2.1
  boring-0.2.2-Cb7vfglM0MnGNjYX8QMR6V
  dec-0.0.6-A1yTncvmFIC86UmP6o0iAz
  deepseq-1.4.8.1
  fin-0.3.2-Gu9cQLJpDypK5hLHjRl3u9
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  some-1.0.6-GqAJsKIAtmC915X4Y1czP2
PreExisting binary-0.8.9.1 (binary-0.8.9.1)
  array-0.5.6.0
  base-4.18.2.1
  bytestring-0.11.5.3
  containers-0.6.7
PreExisting bitvec-1.1.5.0 (bitvec-1.1.5.0-ELB4AznZUFF9w6p5OFlmFt)
  base-4.18.2.1
  bytestring-0.11.5.3
  deepseq-1.4.8.1
  ghc-bignum-1.3
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting boring-0.2.2 (boring-0.2.2-Cb7vfglM0MnGNjYX8QMR6V)
  base-4.18.2.1
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  transformers-0.6.1.0
PreExisting bytestring-0.11.5.3 (bytestring-0.11.5.3)
  base-4.18.2.1
  deepseq-1.4.8.1
  ghc-prim-0.10.0
  template-haskell-2.20.0.0
PreExisting bytestring-strict-builder-0.4.5.7 (bytestring-strict-builder-0.4.5.7-FmlaugzF5nhE3sNVQTRe2S)
  base-4.18.2.1
  bytestring-0.11.5.3
PreExisting call-stack-0.4.0 (call-stack-0.4.0-GZ3nSiFdomD3K5ojbP90a6)
  base-4.18.2.1
PreExisting cardano-binary-1.7.1.0 (cardano-binary-1.7.1.0-92JeXpGr3zgEPyN9SwdJps)
  base-4.18.2.1
  bytestring-0.11.5.3
  cborg-0.2.10.0-8ONsMUtgRy96wsXKOMh5PS
  containers-0.6.7
  data-fix-0.3.4-BvXmtXDsLy68185WG0Pce0
  formatting-7.2.0-9vJmYqHLptjABIuRFJyIEg
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  recursion-schemes-5.2.3-DuUS2WKXAB41oxa7Z9VQ5L
  safe-exceptions-0.1.7.4-G1fs5SY5i1W7EEbU0Su8pW
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  text-2.0.2
  time-1.12.2
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting cardano-crypto-1.1.2 (cardano-crypto-1.1.2-AJZvN9i8TgvHgWeLHRDjNM)
  base-4.18.2.1
  basement-0.0.16-HvTgG10TboKKpCgs2TlMDx
  bytestring-0.11.5.3
  cryptonite-0.30-FAEIFaZOB2F8IbV9pIPymG
  deepseq-1.4.8.1
  foundation-0.0.30-5HecnfCvDoMINDy1JIpbVa
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  integer-gmp-1.1
  memory-0.18.0-1WpDueBt7uE65CGObfwaOX
PreExisting cardano-crypto-class-2.2.0.0 (cardano-crypto-class-2.2.0.0-2iQyHLYYULOG7lWF3J1Seb)
  aeson-2.2.3.0-JLQ4tU36pWTISAtFXxxTGO
  base-4.18.2.1
  base16-bytestring-1.0.2.0-7dLjEOJDdBNFW2UWv9zpg8
  bytestring-0.11.5.3
  cardano-binary-1.7.1.0-92JeXpGr3zgEPyN9SwdJps
  cardano-strict-containers-0.1.3.0-uXjqqHig5oDKyeVL3Bv0m
  crypton-1.0.1-17ynEG98g1y1cwsTjXo0wH
  deepseq-1.4.8.1
  heapwords-0.1.0.2-45qgqm8yKGUAqtASUsx3YA
  io-classes-1.7.0.0-66SNyDxaj7cK65s84znkd4
  memory-0.18.0-1WpDueBt7uE65CGObfwaOX
  memory-pool-0.1.0.0-6wCI8iuxvNuCVughnK5YRL
  mempack-0.1.0.0-6PxU5qhK2JdDLm15lFOtV2
  mtl-2.3.1
  nothunks-0.2.1.1-LCPOey4TD5U9C99ASR6Zle
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  serialise-0.2.6.1-AWwsyfvh4826fo8Eky2hQZ
  template-haskell-2.20.0.0
  text-2.0.2
  th-compat-0.1.6-2rrkLPtbtXtGGZep4Kp6E5
  transformers-0.6.1.0
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting cardano-strict-containers-0.1.3.0 (cardano-strict-containers-0.1.3.0-uXjqqHig5oDKyeVL3Bv0m)
  aeson-2.2.3.0-JLQ4tU36pWTISAtFXxxTGO
  base-4.18.2.1
  cardano-binary-1.7.1.0-92JeXpGr3zgEPyN9SwdJps
  cborg-0.2.10.0-8ONsMUtgRy96wsXKOMh5PS
  containers-0.6.7
  data-default-class-0.2.0.0-JxPCcRIMUYsFj9JOZYFyPv
  deepseq-1.4.8.1
  fingertree-0.1.5.0-Giwitp12LPIDULoEcsvbRk
  nothunks-0.2.1.1-LCPOey4TD5U9C99ASR6Zle
  serialise-0.2.6.1-AWwsyfvh4826fo8Eky2hQZ
PreExisting case-insensitive-1.2.1.0 (case-insensitive-1.2.1.0-6SY4mNx0PwC3iNtCY6qMyt)
  base-4.18.2.1
  bytestring-0.11.5.3
  deepseq-1.4.8.1
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  text-2.0.2
PreExisting cassava-0.5.3.2 (cassava-0.5.3.2-AaDxxJfHY1UBJOXWscLqgr)
  Only-0.1-DItEcvi68ww8z5TVixWVcj
  array-0.5.6.0
  attoparsec-0.14.4-AENlT1FD5cUKdoKGsP8Yrt
  base-4.18.2.1
  bytestring-0.11.5.3
  containers-0.6.7
  deepseq-1.4.8.1
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  scientific-0.3.8.0-LgIS9oFsrZuKm6CE7CNK3a
  text-2.0.2
  text-short-0.1.6-JYTe7ZNYLl9B32IjKxECG6
  transformers-0.6.1.0
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting cborg-0.2.10.0 (cborg-0.2.10.0-8ONsMUtgRy96wsXKOMh5PS)
  array-0.5.6.0
  base-4.18.2.1
  bytestring-0.11.5.3
  containers-0.6.7
  deepseq-1.4.8.1
  ghc-bignum-1.3
  ghc-prim-0.10.0
  half-0.3.2-4J4TSSiKHp7LcE8iv1hUXo
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  text-2.0.2
PreExisting character-ps-0.1 (character-ps-0.1-H07uOjD6SD1EfE7l9KfeMv)
  base-4.18.2.1
PreExisting clock-0.8.4 (clock-0.8.4-CtvJcYTfPzfKzilKTwKKyL) base-4.18.2.1
PreExisting colour-2.3.6 (colour-2.3.6-Dv7015zVt5k10e0N0YtJJm) base-4.18.2.1
PreExisting comonad-5.0.9 (comonad-5.0.9-8ZWRrlRL43zKWDRwcrbIAe)
  base-4.18.2.1
  containers-0.6.7
  distributive-0.6.2.1-AfprxO6uyiDBgDCaNdkxkx
  indexed-traversable-0.1.4-8j5HZpShpE5BqFup9Ojenr
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  transformers-0.6.1.0
  transformers-compat-0.7.2-5nFo8llgs2JItrIXIph57L
PreExisting composition-prelude-3.0.1.0 (composition-prelude-3.0.1.0-K5O7ycZzQuULbpRZBOtLim)
  base-4.18.2.1
PreExisting concurrent-output-1.10.21 (concurrent-output-1.10.21-CaL1XllBLq8Ad4VFiBIhtz)
  ansi-terminal-1.1.2-B0OgGuBTUBLLtXcp4uHsI1
  async-2.2.5-LVr5x9hlJuT5aSeOy7bxSH
  base-4.18.2.1
  directory-1.3.8.5
  exceptions-0.10.7
  process-1.6.19.0
  stm-2.5.1.0
  terminal-size-0.3.4-RfZxi4foNwK9w669pzI7h
  text-2.0.2
  transformers-0.6.1.0
  unix-2.8.4.0
PreExisting constraints-0.14.2 (constraints-0.14.2-gypyaxjSP6EacrNGj4BAU)
  base-4.18.2.1
  binary-0.8.9.1
  boring-0.2.2-Cb7vfglM0MnGNjYX8QMR6V
  deepseq-1.4.8.1
  ghc-prim-0.10.0
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  mtl-2.3.1
  transformers-0.6.1.0
PreExisting constraints-extras-0.4.0.1 (constraints-extras-0.4.0.1-KYsXBJkMWJ13xMPhsLMEkP)
  base-4.18.2.1
  constraints-0.14.2-gypyaxjSP6EacrNGj4BAU
  template-haskell-2.20.0.0
PreExisting containers-0.6.7 (containers-0.6.7)
  array-0.5.6.0
  base-4.18.2.1
  deepseq-1.4.8.1
  template-haskell-2.20.0.0
PreExisting contravariant-1.5.5 (contravariant-1.5.5-L3dzMMfQxh01G5kB8tri44)
  StateVar-1.2.2-A6sCENWC9xLH02ziP9IDyb
  base-4.18.2.1
  transformers-0.6.1.0
PreExisting crypton-1.0.1 (crypton-1.0.1-17ynEG98g1y1cwsTjXo0wH)
  base-4.18.2.1
  basement-0.0.16-HvTgG10TboKKpCgs2TlMDx
  bytestring-0.11.5.3
  deepseq-1.4.8.1
  ghc-prim-0.10.0
  integer-gmp-1.1
  memory-0.18.0-1WpDueBt7uE65CGObfwaOX
PreExisting cryptonite-0.30 (cryptonite-0.30-FAEIFaZOB2F8IbV9pIPymG)
  base-4.18.2.1
  basement-0.0.16-HvTgG10TboKKpCgs2TlMDx
  bytestring-0.11.5.3
  deepseq-1.4.8.1
  ghc-prim-0.10.0
  integer-gmp-1.1
  memory-0.18.0-1WpDueBt7uE65CGObfwaOX
PreExisting data-default-0.8.0.0 (data-default-0.8.0.0-E8AMsOYllto9Pk0bp6z8xu)
  base-4.18.2.1
  containers-0.6.7
PreExisting data-default-class-0.2.0.0 (data-default-class-0.2.0.0-JxPCcRIMUYsFj9JOZYFyPv)
  data-default-0.8.0.0-E8AMsOYllto9Pk0bp6z8xu
PreExisting data-fix-0.3.4 (data-fix-0.3.4-BvXmtXDsLy68185WG0Pce0)
  base-4.18.2.1
  deepseq-1.4.8.1
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
PreExisting dec-0.0.6 (dec-0.0.6-A1yTncvmFIC86UmP6o0iAz)
  base-4.18.2.1
  boring-0.2.2-Cb7vfglM0MnGNjYX8QMR6V
PreExisting deepseq-1.4.8.1 (deepseq-1.4.8.1)
  array-0.5.6.0
  base-4.18.2.1
  ghc-prim-0.10.0
PreExisting dependent-sum-0.7.2.0 (dependent-sum-0.7.2.0-ItK1BiUaKp93RrXwqLEHW7)
  base-4.18.2.1
  constraints-extras-0.4.0.1-KYsXBJkMWJ13xMPhsLMEkP
  some-1.0.6-GqAJsKIAtmC915X4Y1czP2
PreExisting deriving-aeson-0.2.10 (deriving-aeson-0.2.10-2WpNSzkZvGlnRw4LShVpA)
  aeson-2.2.3.0-JLQ4tU36pWTISAtFXxxTGO
  base-4.18.2.1
PreExisting deriving-compat-0.6.7 (deriving-compat-0.6.7-2uaX9AD8oM2FqMrn6CRooZ)
  base-4.18.2.1
  containers-0.6.7
  ghc-boot-th-9.6.6
  ghc-prim-0.10.0
  template-haskell-2.20.0.0
  th-abstraction-0.6.0.0-6nwiZFs5BlM71phLjoyZV3
  transformers-0.6.1.0
  transformers-compat-0.7.2-5nFo8llgs2JItrIXIph57L
PreExisting directory-1.3.8.5 (directory-1.3.8.5)
  base-4.18.2.1
  filepath-1.4.300.1
  time-1.12.2
  unix-2.8.4.0
PreExisting distributive-0.6.2.1 (distributive-0.6.2.1-AfprxO6uyiDBgDCaNdkxkx)
  base-4.18.2.1
  base-orphans-0.9.3-6eHtw3ngQEKHEGQPUmUnCL
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  transformers-0.6.1.0
PreExisting dlist-1.0 (dlist-1.0-4gU1uwZtlC12QPDWmtCZHA)
  base-4.18.2.1
  deepseq-1.4.8.1
PreExisting dom-lt-0.2.3 (dom-lt-0.2.3-F8VCC9oSO1O3DyfWfOaNnC)
  array-0.5.6.0
  base-4.18.2.1
  containers-0.6.7
PreExisting double-conversion-2.0.5.0 (double-conversion-2.0.5.0-DVj8r45D5dQJ4qoh72NjyG)
  base-4.18.2.1
  bytestring-0.11.5.3
  ghc-prim-0.10.0
  system-cxx-std-lib-1.0
  text-2.0.2
PreExisting either-5.0.2 (either-5.0.2-2Rwtb0wMsOIKaTM5DRdAHy)
  base-4.18.2.1
  bifunctors-5.6.2-JOeQrqx1Bk03m9FXwiQq0j
  mtl-2.3.1
  profunctors-5.6.2-3lgFBbFFfY91KuXJxf6gL2
  semigroupoids-6.0.1-JojY4E0VJHx8kGvykwlVDS
PreExisting erf-2.0.0.0 (erf-2.0.0.0-4xz1P35HuR5Dy4ovZUgjCU) base-4.18.2.1
PreExisting exceptions-0.10.7 (exceptions-0.10.7)
  base-4.18.2.1
  mtl-2.3.1
  stm-2.5.1.0
  template-haskell-2.20.0.0
  transformers-0.6.1.0
PreExisting extra-1.8 (extra-1.8-AULzJFoF5z919r3EcPtuPY)
  base-4.18.2.1
  clock-0.8.4-CtvJcYTfPzfKzilKTwKKyL
  directory-1.3.8.5
  filepath-1.4.300.1
  process-1.6.19.0
  time-1.12.2
  unix-2.8.4.0
PreExisting filepath-1.4.300.1 (filepath-1.4.300.1)
  base-4.18.2.1
  bytestring-0.11.5.3
  deepseq-1.4.8.1
  exceptions-0.10.7
  template-haskell-2.20.0.0
PreExisting fin-0.3.2 (fin-0.3.2-Gu9cQLJpDypK5hLHjRl3u9)
  QuickCheck-2.15.0.1-7DT5dbdKXgt5FCkPae5v9p
  base-4.18.2.1
  boring-0.2.2-Cb7vfglM0MnGNjYX8QMR6V
  dec-0.0.6-A1yTncvmFIC86UmP6o0iAz
  deepseq-1.4.8.1
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  some-1.0.6-GqAJsKIAtmC915X4Y1czP2
  universe-base-1.1.4-EArSvlHd71tLZXLBV7J3rk
PreExisting fingertree-0.1.5.0 (fingertree-0.1.5.0-Giwitp12LPIDULoEcsvbRk)
  base-4.18.2.1
PreExisting flat-0.6 (flat-0.6-Bv37Eu2SGmQCNzW1lGFsyC)
  array-0.5.6.0
  base-4.18.2.1
  bytestring-0.11.5.3
  containers-0.6.7
  deepseq-1.4.8.1
  dlist-1.0-4gU1uwZtlC12QPDWmtCZHA
  ghc-prim-0.10.0
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  list-t-1.0.5.7-1WjCI7LLQ9eAhCAwsGUu04
  mono-traversable-1.0.21.0-6ZSLI8UyDQF3L6f7eQ6PiP
  pretty-1.1.3.6
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  text-2.0.2
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting foldl-1.4.17 (foldl-1.4.17-DWu1T5p5MA8L4hD951r4Mc)
  base-4.18.2.1
  bytestring-0.11.5.3
  comonad-5.0.9-8ZWRrlRL43zKWDRwcrbIAe
  containers-0.6.7
  contravariant-1.5.5-L3dzMMfQxh01G5kB8tri44
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  profunctors-5.6.2-3lgFBbFFfY91KuXJxf6gL2
  random-1.2.1.3-4DcS9YVcrJh8BlX0j3OjY9
  semigroupoids-6.0.1-JojY4E0VJHx8kGvykwlVDS
  text-2.0.2
  transformers-0.6.1.0
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting formatting-7.2.0 (formatting-7.2.0-9vJmYqHLptjABIuRFJyIEg)
  base-4.18.2.1
  clock-0.8.4-CtvJcYTfPzfKzilKTwKKyL
  double-conversion-2.0.5.0-DVj8r45D5dQJ4qoh72NjyG
  old-locale-1.0.0.7-Gunit3UBy5P9OGDVFY5MhC
  scientific-0.3.8.0-LgIS9oFsrZuKm6CE7CNK3a
  text-2.0.2
  time-1.12.2
  transformers-0.6.1.0
PreExisting foundation-0.0.30 (foundation-0.0.30-5HecnfCvDoMINDy1JIpbVa)
  base-4.18.2.1
  basement-0.0.16-HvTgG10TboKKpCgs2TlMDx
  ghc-prim-0.10.0
PreExisting free-5.2 (free-5.2-LSdax1DdaMaCPTpxkFxEbg)
  base-4.18.2.1
  comonad-5.0.9-8ZWRrlRL43zKWDRwcrbIAe
  containers-0.6.7
  distributive-0.6.2.1-AfprxO6uyiDBgDCaNdkxkx
  exceptions-0.10.7
  indexed-traversable-0.1.4-8j5HZpShpE5BqFup9Ojenr
  mtl-2.3.1
  profunctors-5.6.2-3lgFBbFFfY91KuXJxf6gL2
  semigroupoids-6.0.1-JojY4E0VJHx8kGvykwlVDS
  template-haskell-2.20.0.0
  th-abstraction-0.6.0.0-6nwiZFs5BlM71phLjoyZV3
  transformers-0.6.1.0
  transformers-base-0.4.6-FFJs5iPs3OX2XrjIfecasG
PreExisting generically-0.1.1 (generically-0.1.1-I9byc5Nil798plofO827gA)
  base-4.18.2.1
PreExisting ghc-9.6.6 (ghc-9.6.6)
  array-0.5.6.0
  base-4.18.2.1
  binary-0.8.9.1
  bytestring-0.11.5.3
  containers-0.6.7
  deepseq-1.4.8.1
  directory-1.3.8.5
  exceptions-0.10.7
  filepath-1.4.300.1
  ghc-boot-9.6.6
  ghc-heap-9.6.6
  ghci-9.6.6
  hpc-0.6.2.0
  process-1.6.19.0
  stm-2.5.1.0
  template-haskell-2.20.0.0
  time-1.12.2
  transformers-0.6.1.0
  unix-2.8.4.0
PreExisting ghc-bignum-1.3 (ghc-bignum-1.3) ghc-prim-0.10.0
PreExisting ghc-boot-9.6.6 (ghc-boot-9.6.6)
  base-4.18.2.1
  binary-0.8.9.1
  bytestring-0.11.5.3
  containers-0.6.7
  deepseq-1.4.8.1
  directory-1.3.8.5
  filepath-1.4.300.1
  ghc-boot-th-9.6.6
  unix-2.8.4.0
PreExisting ghc-boot-th-9.6.6 (ghc-boot-th-9.6.6) base-4.18.2.1
PreExisting ghc-heap-9.6.6 (ghc-heap-9.6.6)
  base-4.18.2.1
  containers-0.6.7
  ghc-prim-0.10.0
  rts-1.0.2
PreExisting ghc-prim-0.10.0 (ghc-prim-0.10.0) rts-1.0.2
PreExisting ghci-9.6.6 (ghci-9.6.6)
  array-0.5.6.0
  base-4.18.2.1
  binary-0.8.9.1
  bytestring-0.11.5.3
  containers-0.6.7
  deepseq-1.4.8.1
  filepath-1.4.300.1
  ghc-boot-9.6.6
  ghc-heap-9.6.6
  ghc-prim-0.10.0
  rts-1.0.2
  template-haskell-2.20.0.0
  transformers-0.6.1.0
  unix-2.8.4.0
PreExisting half-0.3.2 (half-0.3.2-4J4TSSiKHp7LcE8iv1hUXo)
  base-4.18.2.1
  binary-0.8.9.1
  deepseq-1.4.8.1
  template-haskell-2.20.0.0
PreExisting hashable-1.4.7.0 (hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc)
  base-4.18.2.1
  bytestring-0.11.5.3
  containers-0.6.7
  deepseq-1.4.8.1
  filepath-1.4.300.1
  ghc-bignum-1.3
  ghc-prim-0.10.0
  os-string-2.0.7-1wZ4pPiRvvH7hNvqWqsmFt
  text-2.0.2
PreExisting haskell-lexer-1.1.2 (haskell-lexer-1.1.2-2yqmuG5l7c780PUeAEpdF8)
  base-4.18.2.1
PreExisting heapwords-0.1.0.2 (heapwords-0.1.0.2-45qgqm8yKGUAqtASUsx3YA)
  array-0.5.6.0
  base-4.18.2.1
  bytestring-0.11.5.3
  containers-0.6.7
  ghc-prim-0.10.0
  text-2.0.2
  time-1.12.2
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting hedgehog-1.5 (hedgehog-1.5-1pgPFMEzPHJER67R59BHb2)
  ansi-terminal-1.1.2-B0OgGuBTUBLLtXcp4uHsI1
  async-2.2.5-LVr5x9hlJuT5aSeOy7bxSH
  barbies-2.1.1.0-9PcrS5liw0o53hJOsckZHX
  base-4.18.2.1
  bytestring-0.11.5.3
  concurrent-output-1.10.21-CaL1XllBLq8Ad4VFiBIhtz
  containers-0.6.7
  deepseq-1.4.8.1
  directory-1.3.8.5
  erf-2.0.0.0-4xz1P35HuR5Dy4ovZUgjCU
  exceptions-0.10.7
  lifted-async-0.10.2.7-52uZJAAYd0t3DkWUeO5m8u
  mmorph-1.2.0-ESdjI2FgpgbLvN0Ae4I55U
  monad-control-1.0.3.1-Ay31Jsmy7evBwc6YM1Q1qc
  mtl-2.3.1
  pretty-show-1.10-DGNDPTjEuGl6FBWGIm8DCv
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  random-1.2.1.3-4DcS9YVcrJh8BlX0j3OjY9
  resourcet-1.3.0-6pmiYVzmD0M8asBrJP7r8g
  safe-exceptions-0.1.7.4-G1fs5SY5i1W7EEbU0Su8pW
  stm-2.5.1.0
  template-haskell-2.20.0.0
  text-2.0.2
  time-1.12.2
  transformers-0.6.1.0
  transformers-base-0.4.6-FFJs5iPs3OX2XrjIfecasG
  wl-pprint-annotated-0.1.0.1-LbMTkgz2daVEhvOZjwdK9z
PreExisting hpc-0.6.2.0 (hpc-0.6.2.0)
  base-4.18.2.1
  containers-0.6.7
  deepseq-1.4.8.1
  directory-1.3.8.5
  filepath-1.4.300.1
  time-1.12.2
PreExisting indexed-traversable-0.1.4 (indexed-traversable-0.1.4-8j5HZpShpE5BqFup9Ojenr)
  array-0.5.6.0
  base-4.18.2.1
  containers-0.6.7
  transformers-0.6.1.0
PreExisting indexed-traversable-instances-0.1.2 (indexed-traversable-instances-0.1.2-5Mon71WPUIp6XGx3YLut9Z)
  OneTuple-0.4.2-7od06fXUUXRBNk1V3VY0g5
  base-4.18.2.1
  indexed-traversable-0.1.4-8j5HZpShpE5BqFup9Ojenr
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting integer-conversion-0.1.1 (integer-conversion-0.1.1-DeIeALAMu9666WTrmIaGC5)
  base-4.18.2.1
  bytestring-0.11.5.3
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  text-2.0.2
PreExisting integer-gmp-1.1 (integer-gmp-1.1)
  base-4.18.2.1
  ghc-bignum-1.3
  ghc-prim-0.10.0
PreExisting integer-logarithms-1.0.3.1 (integer-logarithms-1.0.3.1-7Av54u0aaY3468YAGPu9Rv)
  array-0.5.6.0
  base-4.18.2.1
  ghc-bignum-1.3
  ghc-prim-0.10.0
PreExisting invariant-0.6.4 (invariant-0.6.4-KwvKSNhGUsv5z9VSzB8qYM)
  StateVar-1.2.2-A6sCENWC9xLH02ziP9IDyb
  array-0.5.6.0
  base-4.18.2.1
  bifunctors-5.6.2-JOeQrqx1Bk03m9FXwiQq0j
  comonad-5.0.9-8ZWRrlRL43zKWDRwcrbIAe
  containers-0.6.7
  contravariant-1.5.5-L3dzMMfQxh01G5kB8tri44
  ghc-prim-0.10.0
  profunctors-5.6.2-3lgFBbFFfY91KuXJxf6gL2
  stm-2.5.1.0
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  template-haskell-2.20.0.0
  th-abstraction-0.6.0.0-6nwiZFs5BlM71phLjoyZV3
  transformers-0.6.1.0
  transformers-compat-0.7.2-5nFo8llgs2JItrIXIph57L
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
PreExisting io-classes-1.7.0.0 (io-classes-1.7.0.0-66SNyDxaj7cK65s84znkd4)
  array-0.5.6.0
  async-2.2.5-LVr5x9hlJuT5aSeOy7bxSH
  base-4.18.2.1
  bytestring-0.11.5.3
  mtl-2.3.1
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  stm-2.5.1.0
  time-1.12.2
PreExisting kan-extensions-5.2.6 (kan-extensions-5.2.6-7PMyfNq6txY6I8D5QWQNFp)
  adjunctions-4.4.2-2481KVoapFqB1gs4Mvlbn9
  array-0.5.6.0
  base-4.18.2.1
  comonad-5.0.9-8ZWRrlRL43zKWDRwcrbIAe
  containers-0.6.7
  contravariant-1.5.5-L3dzMMfQxh01G5kB8tri44
  distributive-0.6.2.1-AfprxO6uyiDBgDCaNdkxkx
  free-5.2-LSdax1DdaMaCPTpxkFxEbg
  invariant-0.6.4-KwvKSNhGUsv5z9VSzB8qYM
  mtl-2.3.1
  profunctors-5.6.2-3lgFBbFFfY91KuXJxf6gL2
  semigroupoids-6.0.1-JojY4E0VJHx8kGvykwlVDS
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  transformers-0.6.1.0
PreExisting lens-5.3.2 (lens-5.3.2-A1ohD5MRGW6IQoS7XwtVW0)
  array-0.5.6.0
  assoc-1.1.1-pRyoYwA2ut8wRI3kAERXo
  base-4.18.2.1
  base-orphans-0.9.3-6eHtw3ngQEKHEGQPUmUnCL
  bifunctors-5.6.2-JOeQrqx1Bk03m9FXwiQq0j
  bytestring-0.11.5.3
  call-stack-0.4.0-GZ3nSiFdomD3K5ojbP90a6
  comonad-5.0.9-8ZWRrlRL43zKWDRwcrbIAe
  containers-0.6.7
  contravariant-1.5.5-L3dzMMfQxh01G5kB8tri44
  distributive-0.6.2.1-AfprxO6uyiDBgDCaNdkxkx
  exceptions-0.10.7
  filepath-1.4.300.1
  free-5.2-LSdax1DdaMaCPTpxkFxEbg
  ghc-prim-0.10.0
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  indexed-traversable-0.1.4-8j5HZpShpE5BqFup9Ojenr
  indexed-traversable-instances-0.1.2-5Mon71WPUIp6XGx3YLut9Z
  kan-extensions-5.2.6-7PMyfNq6txY6I8D5QWQNFp
  mtl-2.3.1
  parallel-3.2.2.0-4GFGhbl8Ae06nPoqdIyBUD
  profunctors-5.6.2-3lgFBbFFfY91KuXJxf6gL2
  reflection-2.1.9-F2CNB67qtWJG8vTpvLlNtz
  semigroupoids-6.0.1-JojY4E0VJHx8kGvykwlVDS
  strict-0.5.1-FORtMbIni2AIKPfHCXFH91
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  template-haskell-2.20.0.0
  text-2.0.2
  th-abstraction-0.6.0.0-6nwiZFs5BlM71phLjoyZV3
  these-1.2.1-JRyCeJCkJl250bmIoLw274
  transformers-0.6.1.0
  transformers-compat-0.7.2-5nFo8llgs2JItrIXIph57L
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting lifted-async-0.10.2.7 (lifted-async-0.10.2.7-52uZJAAYd0t3DkWUeO5m8u)
  async-2.2.5-LVr5x9hlJuT5aSeOy7bxSH
  base-4.18.2.1
  constraints-0.14.2-gypyaxjSP6EacrNGj4BAU
  lifted-base-0.2.3.12-FMb6NPUZOyTIhwqlvrt5TC
  monad-control-1.0.3.1-Ay31Jsmy7evBwc6YM1Q1qc
  transformers-base-0.4.6-FFJs5iPs3OX2XrjIfecasG
PreExisting lifted-base-0.2.3.12 (lifted-base-0.2.3.12-FMb6NPUZOyTIhwqlvrt5TC)
  base-4.18.2.1
  monad-control-1.0.3.1-Ay31Jsmy7evBwc6YM1Q1qc
  transformers-base-0.4.6-FFJs5iPs3OX2XrjIfecasG
PreExisting list-t-1.0.5.7 (list-t-1.0.5.7-1WjCI7LLQ9eAhCAwsGUu04)
  base-4.18.2.1
  foldl-1.4.17-DWu1T5p5MA8L4hD951r4Mc
  logict-0.8.2.0-HPiXwh1BjjQBkvsskDN6JX
  mmorph-1.2.0-ESdjI2FgpgbLvN0Ae4I55U
  monad-control-1.0.3.1-Ay31Jsmy7evBwc6YM1Q1qc
  mtl-2.3.1
  transformers-0.6.1.0
  transformers-base-0.4.6-FFJs5iPs3OX2XrjIfecasG
PreExisting logict-0.8.2.0 (logict-0.8.2.0-HPiXwh1BjjQBkvsskDN6JX)
  base-4.18.2.1
  exceptions-0.10.7
  mtl-2.3.1
  transformers-0.6.1.0
PreExisting megaparsec-9.7.0 (megaparsec-9.7.0-LXJ8FjVdEyN8888OflW2Uq)
  array-0.5.6.0
  base-4.18.2.1
  bytestring-0.11.5.3
  case-insensitive-1.2.1.0-6SY4mNx0PwC3iNtCY6qMyt
  containers-0.6.7
  deepseq-1.4.8.1
  mtl-2.3.1
  parser-combinators-1.3.0-20UTEUZ5CKDJdRu747ID48
  scientific-0.3.8.0-LgIS9oFsrZuKm6CE7CNK3a
  text-2.0.2
  transformers-0.6.1.0
PreExisting memory-0.18.0 (memory-0.18.0-1WpDueBt7uE65CGObfwaOX)
  base-4.18.2.1
  basement-0.0.16-HvTgG10TboKKpCgs2TlMDx
  bytestring-0.11.5.3
  deepseq-1.4.8.1
  ghc-prim-0.10.0
PreExisting memory-pool-0.1.0.0 (memory-pool-0.1.0.0-6wCI8iuxvNuCVughnK5YRL)
  base-4.18.2.1
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  pvar-1.0.0.0-GerfNnTE9xGBoCo1Bt2h6C
PreExisting mempack-0.1.0.0 (mempack-0.1.0.0-6PxU5qhK2JdDLm15lFOtV2)
  FailT-0.1.2.0-CqpEwiWmKDzFDlQWafMJH1
  base-4.18.2.1
  bytestring-0.11.5.3
  mtl-2.3.1
  text-2.0.2
PreExisting microlens-0.4.13.1 (microlens-0.4.13.1-KYxyai9RKt756hvMHa07OI)
  base-4.18.2.1
PreExisting mmorph-1.2.0 (mmorph-1.2.0-ESdjI2FgpgbLvN0Ae4I55U)
  base-4.18.2.1
  mtl-2.3.1
  transformers-0.6.1.0
  transformers-compat-0.7.2-5nFo8llgs2JItrIXIph57L
PreExisting monad-control-1.0.3.1 (monad-control-1.0.3.1-Ay31Jsmy7evBwc6YM1Q1qc)
  base-4.18.2.1
  stm-2.5.1.0
  transformers-0.6.1.0
  transformers-base-0.4.6-FFJs5iPs3OX2XrjIfecasG
  transformers-compat-0.7.2-5nFo8llgs2JItrIXIph57L
PreExisting mono-traversable-1.0.21.0 (mono-traversable-1.0.21.0-6ZSLI8UyDQF3L6f7eQ6PiP)
  base-4.18.2.1
  bytestring-0.11.5.3
  containers-0.6.7
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  split-0.2.5-5qpEwx7qUv6FlaHbX7jgA2
  text-2.0.2
  transformers-0.6.1.0
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
  vector-algorithms-0.9.0.3-Eugl0Kxfg3EL8hxstvZdps
PreExisting monoidal-containers-0.6.5.0 (monoidal-containers-0.6.5.0-8J3ETiYII7jDi78zUO8Tt8)
  aeson-2.2.3.0-JLQ4tU36pWTISAtFXxxTGO
  base-4.18.2.1
  containers-0.6.7
  deepseq-1.4.8.1
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  lens-5.3.2-A1ohD5MRGW6IQoS7XwtVW0
  newtype-0.2.2.0-3mUOwLZjJK4AuUUeEZZT47
  semialign-1.3.1-EztFkwFQfON67LcAAOfCOR
  these-1.2.1-JRyCeJCkJl250bmIoLw274
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
  witherable-0.5-1LWawYeqEGqLardLVmvI0K
PreExisting mtl-2.3.1 (mtl-2.3.1)
  base-4.18.2.1
  transformers-0.6.1.0
PreExisting multiset-0.3.4.3 (multiset-0.3.4.3-KDvSQv4Hx9H4vP9Y1pJSKk)
  base-4.18.2.1
  containers-0.6.7
  deepseq-1.4.8.1
PreExisting network-uri-2.6.4.2 (network-uri-2.6.4.2-HWiIhV9Dzc69CWgfQnP49N)
  base-4.18.2.1
  deepseq-1.4.8.1
  parsec-3.1.16.1
  template-haskell-2.20.0.0
  th-compat-0.1.6-2rrkLPtbtXtGGZep4Kp6E5
PreExisting newtype-0.2.2.0 (newtype-0.2.2.0-3mUOwLZjJK4AuUUeEZZT47)
  base-4.18.2.1
PreExisting nonempty-vector-0.2.3 (nonempty-vector-0.2.3-5HrNgLjXdgb5tb1JalQ9wE)
  base-4.18.2.1
  deepseq-1.4.8.1
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting nothunks-0.2.1.1 (nothunks-0.2.1.1-LCPOey4TD5U9C99ASR6Zle)
  base-4.18.2.1
  bytestring-0.11.5.3
  containers-0.6.7
  ghc-heap-9.6.6
  stm-2.5.1.0
  text-2.0.2
  time-1.12.2
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
  wherefrom-compat-0.1.1.1-6fBiefS8SANJ4oOSgPD5v2
PreExisting old-locale-1.0.0.7 (old-locale-1.0.0.7-Gunit3UBy5P9OGDVFY5MhC)
  base-4.18.2.1
PreExisting os-string-2.0.7 (os-string-2.0.7-1wZ4pPiRvvH7hNvqWqsmFt)
  base-4.18.2.1
  bytestring-0.11.5.3
  deepseq-1.4.8.1
  exceptions-0.10.7
  template-haskell-2.20.0.0
PreExisting parallel-3.2.2.0 (parallel-3.2.2.0-4GFGhbl8Ae06nPoqdIyBUD)
  array-0.5.6.0
  base-4.18.2.1
  containers-0.6.7
  deepseq-1.4.8.1
  ghc-prim-0.10.0
PreExisting parsec-3.1.16.1 (parsec-3.1.16.1)
  base-4.18.2.1
  bytestring-0.11.5.3
  mtl-2.3.1
  text-2.0.2
PreExisting parser-combinators-1.3.0 (parser-combinators-1.3.0-20UTEUZ5CKDJdRu747ID48)
  base-4.18.2.1
PreExisting plutus-core-1.38.0.0 (plutus-core-1.38.0.0-1EHAGxkUceu1P2wlblxaR0-plutus-ir)
  algebraic-graphs-0.7-5KmI8HjBzSyfU8lkwDUnf
  base-4.18.2.1
  containers-0.6.7
  dlist-1.0-4gU1uwZtlC12QPDWmtCZHA
  dom-lt-0.2.3-F8VCC9oSO1O3DyfWfOaNnC
  extra-1.8-AULzJFoF5z919r3EcPtuPY
  flat-0.6-Bv37Eu2SGmQCNzW1lGFsyC
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  lens-5.3.2-A1ohD5MRGW6IQoS7XwtVW0
  megaparsec-9.7.0-LXJ8FjVdEyN8888OflW2Uq
  mmorph-1.2.0-ESdjI2FgpgbLvN0Ae4I55U
  monoidal-containers-0.6.5.0-8J3ETiYII7jDi78zUO8Tt8
  mtl-2.3.1
  multiset-0.3.4.3-KDvSQv4Hx9H4vP9Y1pJSKk
  parser-combinators-1.3.0-20UTEUZ5CKDJdRu747ID48
  plutus-core-1.38.0.0-LP27REH8m20HZef9XDK9Ue
  prettyprinter-1.7.1-60yVE7QePDs8FHIPsacPFF
  profunctors-5.6.2-3lgFBbFFfY91KuXJxf6gL2
  semigroupoids-6.0.1-JojY4E0VJHx8kGvykwlVDS
  semigroups-0.20-7UvOFf0Cvlt7ORp1HkBYyN
  text-2.0.2
  transformers-0.6.1.0
  witherable-0.5-1LWawYeqEGqLardLVmvI0K
PreExisting plutus-core-1.38.0.0 (plutus-core-1.38.0.0-5jlohX0XNID3q1F1YdNQmq-index-envs)
  base-4.18.2.1
  containers-0.6.7
  extra-1.8-AULzJFoF5z919r3EcPtuPY
  nonempty-vector-0.2.3-5HrNgLjXdgb5tb1JalQ9wE
  ral-0.2.2-HnUoTJsbAw0e4t3C1JSEw
PreExisting plutus-core-1.38.0.0 (plutus-core-1.38.0.0-D4YpK86Z2Pq1qdnpcOTdgI-satint)
  aeson-2.2.3.0-JLQ4tU36pWTISAtFXxxTGO
  base-4.18.2.1
  cassava-0.5.3.2-AaDxxJfHY1UBJOXWscLqgr
  deepseq-1.4.8.1
  nothunks-0.2.1.1-LCPOey4TD5U9C99ASR6Zle
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  serialise-0.2.6.1-AWwsyfvh4826fo8Eky2hQZ
  template-haskell-2.20.0.0
PreExisting plutus-core-1.38.0.0 (plutus-core-1.38.0.0-LP27REH8m20HZef9XDK9Ue)
  aeson-2.2.3.0-JLQ4tU36pWTISAtFXxxTGO
  array-0.5.6.0
  barbies-2.1.1.0-9PcrS5liw0o53hJOsckZHX
  base-4.18.2.1
  base64-bytestring-1.2.1.0-2n37CC8Eq7mGHxpF66Eiye
  bimap-0.5.0-7xXK3bsJVmhBL74wTtka32
  bytestring-0.11.5.3
  bytestring-strict-builder-0.4.5.7-FmlaugzF5nhE3sNVQTRe2S
  cardano-crypto-1.1.2-AJZvN9i8TgvHgWeLHRDjNM
  cardano-crypto-class-2.2.0.0-2iQyHLYYULOG7lWF3J1Seb
  cassava-0.5.3.2-AaDxxJfHY1UBJOXWscLqgr
  cborg-0.2.10.0-8ONsMUtgRy96wsXKOMh5PS
  composition-prelude-3.0.1.0-K5O7ycZzQuULbpRZBOtLim
  containers-0.6.7
  cryptonite-0.30-FAEIFaZOB2F8IbV9pIPymG
  data-default-class-0.2.0.0-JxPCcRIMUYsFj9JOZYFyPv
  deepseq-1.4.8.1
  dependent-sum-0.7.2.0-ItK1BiUaKp93RrXwqLEHW7
  deriving-aeson-0.2.10-2WpNSzkZvGlnRw4LShVpA
  deriving-compat-0.6.7-2uaX9AD8oM2FqMrn6CRooZ
  dlist-1.0-4gU1uwZtlC12QPDWmtCZHA
  exceptions-0.10.7
  extra-1.8-AULzJFoF5z919r3EcPtuPY
  filepath-1.4.300.1
  flat-0.6-Bv37Eu2SGmQCNzW1lGFsyC
  free-5.2-LSdax1DdaMaCPTpxkFxEbg
  ghc-prim-0.10.0
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  hedgehog-1.5-1pgPFMEzPHJER67R59BHb2
  lens-5.3.2-A1ohD5MRGW6IQoS7XwtVW0
  megaparsec-9.7.0-LXJ8FjVdEyN8888OflW2Uq
  mmorph-1.2.0-ESdjI2FgpgbLvN0Ae4I55U
  mono-traversable-1.0.21.0-6ZSLI8UyDQF3L6f7eQ6PiP
  monoidal-containers-0.6.5.0-8J3ETiYII7jDi78zUO8Tt8
  mtl-2.3.1
  multiset-0.3.4.3-KDvSQv4Hx9H4vP9Y1pJSKk
  nothunks-0.2.1.1-LCPOey4TD5U9C99ASR6Zle
  parser-combinators-1.3.0-20UTEUZ5CKDJdRu747ID48
  plutus-core-1.38.0.0-5jlohX0XNID3q1F1YdNQmq-index-envs
  plutus-core-1.38.0.0-D4YpK86Z2Pq1qdnpcOTdgI-satint
  prettyprinter-1.7.1-60yVE7QePDs8FHIPsacPFF
  prettyprinter-configurable-1.36.0.0-Hnis79jjYUlCFpRCi0yaeS
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  profunctors-5.6.2-3lgFBbFFfY91KuXJxf6gL2
  recursion-schemes-5.2.3-DuUS2WKXAB41oxa7Z9VQ5L
  semigroups-0.20-7UvOFf0Cvlt7ORp1HkBYyN
  serialise-0.2.6.1-AWwsyfvh4826fo8Eky2hQZ
  some-1.0.6-GqAJsKIAtmC915X4Y1czP2
  template-haskell-2.20.0.0
  text-2.0.2
  th-compat-0.1.6-2rrkLPtbtXtGGZep4Kp6E5
  th-lift-0.8.6-259dLbfPJk9HrfYIeZHdvQ
  th-lift-instances-0.1.20-2QVRDQSdM2rFSdCOQdCvAX
  th-utilities-0.2.5.0-4AS1tS3C71rHPBcuZL33Hf
  time-1.12.2
  transformers-0.6.1.0
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
  witherable-0.5-1LWawYeqEGqLardLVmvI0K
PreExisting plutus-ledger-api-1.38.0.0 (plutus-ledger-api-1.38.0.0-329oGVIQN5t6kv9LGM5pSR)
  base-4.18.2.1
  base16-bytestring-1.0.2.0-7dLjEOJDdBNFW2UWv9zpg8
  bytestring-0.11.5.3
  cborg-0.2.10.0-8ONsMUtgRy96wsXKOMh5PS
  containers-0.6.7
  deepseq-1.4.8.1
  lens-5.3.2-A1ohD5MRGW6IQoS7XwtVW0
  mtl-2.3.1
  nothunks-0.2.1.1-LCPOey4TD5U9C99ASR6Zle
  plutus-core-1.38.0.0-LP27REH8m20HZef9XDK9Ue
  plutus-tx-1.38.0.0-1SaqmCdyiCu4HE6yL0Prz7
  prettyprinter-1.7.1-60yVE7QePDs8FHIPsacPFF
  serialise-0.2.6.1-AWwsyfvh4826fo8Eky2hQZ
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  text-2.0.2
PreExisting plutus-tx-1.38.0.0 (plutus-tx-1.38.0.0-1SaqmCdyiCu4HE6yL0Prz7)
  aeson-2.2.3.0-JLQ4tU36pWTISAtFXxxTGO
  aeson-pretty-0.8.10-Hp7E6KJ5nrbHyBU120MC9p
  base-4.18.2.1
  base16-bytestring-1.0.2.0-7dLjEOJDdBNFW2UWv9zpg8
  bytestring-0.11.5.3
  containers-0.6.7
  data-default-class-0.2.0.0-JxPCcRIMUYsFj9JOZYFyPv
  deepseq-1.4.8.1
  deriving-compat-0.6.7-2uaX9AD8oM2FqMrn6CRooZ
  extra-1.8-AULzJFoF5z919r3EcPtuPY
  flat-0.6-Bv37Eu2SGmQCNzW1lGFsyC
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  lens-5.3.2-A1ohD5MRGW6IQoS7XwtVW0
  memory-0.18.0-1WpDueBt7uE65CGObfwaOX
  mtl-2.3.1
  plutus-core-1.38.0.0-LP27REH8m20HZef9XDK9Ue
  plutus-core-1.38.0.0-1EHAGxkUceu1P2wlblxaR0-plutus-ir
  prettyprinter-1.7.1-60yVE7QePDs8FHIPsacPFF
  serialise-0.2.6.1-AWwsyfvh4826fo8Eky2hQZ
  template-haskell-2.20.0.0
  text-2.0.2
  th-abstraction-0.6.0.0-6nwiZFs5BlM71phLjoyZV3
  th-compat-0.1.6-2rrkLPtbtXtGGZep4Kp6E5
PreExisting plutus-tx-plugin-1.38.0.0 (plutus-tx-plugin-1.38.0.0-4Y1vGYEZewxADslwiNBTcs)
  array-0.5.6.0
  base-4.18.2.1
  base16-bytestring-1.0.2.0-7dLjEOJDdBNFW2UWv9zpg8
  bytestring-0.11.5.3
  containers-0.6.7
  either-5.0.2-2Rwtb0wMsOIKaTM5DRdAHy
  extra-1.8-AULzJFoF5z919r3EcPtuPY
  flat-0.6-Bv37Eu2SGmQCNzW1lGFsyC
  ghc-9.6.6
  lens-5.3.2-A1ohD5MRGW6IQoS7XwtVW0
  mtl-2.3.1
  plutus-core-1.38.0.0-LP27REH8m20HZef9XDK9Ue
  plutus-core-1.38.0.0-1EHAGxkUceu1P2wlblxaR0-plutus-ir
  plutus-tx-1.38.0.0-1SaqmCdyiCu4HE6yL0Prz7
  prettyprinter-1.7.1-60yVE7QePDs8FHIPsacPFF
  template-haskell-2.20.0.0
  text-2.0.2
  uniplate-1.6.13-FzsJe144fc543me23PrahE
Configured (In Memory) plutus-tx-template-0.6.0.0 (plutus-tx-template-0.6.0.0-inplace-CoinFlipGame)
  base-4.18.2.1
  plutus-core-1.38.0.0-LP27REH8m20HZef9XDK9Ue
  plutus-ledger-api-1.38.0.0-329oGVIQN5t6kv9LGM5pSR
  plutus-tx-1.38.0.0-1SaqmCdyiCu4HE6yL0Prz7
  plutus-tx-plugin-1.38.0.0-4Y1vGYEZewxADslwiNBTcs
PreExisting pretty-1.1.3.6 (pretty-1.1.3.6)
  base-4.18.2.1
  deepseq-1.4.8.1
  ghc-prim-0.10.0
PreExisting pretty-show-1.10 (pretty-show-1.10-DGNDPTjEuGl6FBWGIm8DCv)
  array-0.5.6.0
  base-4.18.2.1
  filepath-1.4.300.1
  ghc-prim-0.10.0
  haskell-lexer-1.1.2-2yqmuG5l7c780PUeAEpdF8
  pretty-1.1.3.6
  text-2.0.2
PreExisting prettyprinter-1.7.1 (prettyprinter-1.7.1-60yVE7QePDs8FHIPsacPFF)
  base-4.18.2.1
  text-2.0.2
PreExisting prettyprinter-configurable-1.36.0.0 (prettyprinter-configurable-1.36.0.0-Hnis79jjYUlCFpRCi0yaeS)
  base-4.18.2.1
  microlens-0.4.13.1-KYxyai9RKt756hvMHa07OI
  mtl-2.3.1
  prettyprinter-1.7.1-60yVE7QePDs8FHIPsacPFF
  text-2.0.2
PreExisting primitive-0.9.0.0 (primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA)
  base-4.18.2.1
  deepseq-1.4.8.1
  template-haskell-2.20.0.0
  transformers-0.6.1.0
PreExisting process-1.6.19.0 (process-1.6.19.0)
  base-4.18.2.1
  deepseq-1.4.8.1
  directory-1.3.8.5
  filepath-1.4.300.1
  unix-2.8.4.0
PreExisting profunctors-5.6.2 (profunctors-5.6.2-3lgFBbFFfY91KuXJxf6gL2)
  base-4.18.2.1
  base-orphans-0.9.3-6eHtw3ngQEKHEGQPUmUnCL
  bifunctors-5.6.2-JOeQrqx1Bk03m9FXwiQq0j
  comonad-5.0.9-8ZWRrlRL43zKWDRwcrbIAe
  contravariant-1.5.5-L3dzMMfQxh01G5kB8tri44
  distributive-0.6.2.1-AfprxO6uyiDBgDCaNdkxkx
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  transformers-0.6.1.0
PreExisting pvar-1.0.0.0 (pvar-1.0.0.0-GerfNnTE9xGBoCo1Bt2h6C)
  base-4.18.2.1
  deepseq-1.4.8.1
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
PreExisting ral-0.2.2 (ral-0.2.2-HnUoTJsbAw0e4t3C1JSEw)
  QuickCheck-2.15.0.1-7DT5dbdKXgt5FCkPae5v9p
  adjunctions-4.4.2-2481KVoapFqB1gs4Mvlbn9
  base-4.18.2.1
  bin-0.1.4-kZYD9OAOMt3wjz0Kz1T2S
  boring-0.2.2-Cb7vfglM0MnGNjYX8QMR6V
  deepseq-1.4.8.1
  distributive-0.6.2.1-AfprxO6uyiDBgDCaNdkxkx
  fin-0.3.2-Gu9cQLJpDypK5hLHjRl3u9
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  indexed-traversable-0.1.4-8j5HZpShpE5BqFup9Ojenr
  semigroupoids-6.0.1-JojY4E0VJHx8kGvykwlVDS
PreExisting random-1.2.1.3 (random-1.2.1.3-4DcS9YVcrJh8BlX0j3OjY9)
  base-4.18.2.1
  bytestring-0.11.5.3
  deepseq-1.4.8.1
  mtl-2.3.1
  splitmix-0.1.0.5-BFex6Gx3IBaGtdqU1pJPtq
PreExisting recursion-schemes-5.2.3 (recursion-schemes-5.2.3-DuUS2WKXAB41oxa7Z9VQ5L)
  base-4.18.2.1
  comonad-5.0.9-8ZWRrlRL43zKWDRwcrbIAe
  containers-0.6.7
  data-fix-0.3.4-BvXmtXDsLy68185WG0Pce0
  free-5.2-LSdax1DdaMaCPTpxkFxEbg
  template-haskell-2.20.0.0
  th-abstraction-0.6.0.0-6nwiZFs5BlM71phLjoyZV3
  transformers-0.6.1.0
PreExisting reflection-2.1.9 (reflection-2.1.9-F2CNB67qtWJG8vTpvLlNtz)
  base-4.18.2.1
  template-haskell-2.20.0.0
PreExisting resourcet-1.3.0 (resourcet-1.3.0-6pmiYVzmD0M8asBrJP7r8g)
  base-4.18.2.1
  containers-0.6.7
  exceptions-0.10.7
  mtl-2.3.1
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  transformers-0.6.1.0
  unliftio-core-0.2.1.0-6sOpIonHj8t5wIbPhWbPHY
PreExisting rts-1.0.2 (rts-1.0.2)
PreExisting safe-0.3.21 (safe-0.3.21-F46Xmb3LoXlCc8daI6vSkg) base-4.18.2.1
PreExisting safe-exceptions-0.1.7.4 (safe-exceptions-0.1.7.4-G1fs5SY5i1W7EEbU0Su8pW)
  base-4.18.2.1
  deepseq-1.4.8.1
  exceptions-0.10.7
  transformers-0.6.1.0
PreExisting scientific-0.3.8.0 (scientific-0.3.8.0-LgIS9oFsrZuKm6CE7CNK3a)
  base-4.18.2.1
  binary-0.8.9.1
  bytestring-0.11.5.3
  containers-0.6.7
  deepseq-1.4.8.1
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  integer-logarithms-1.0.3.1-7Av54u0aaY3468YAGPu9Rv
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  template-haskell-2.20.0.0
  text-2.0.2
PreExisting semialign-1.3.1 (semialign-1.3.1-EztFkwFQfON67LcAAOfCOR)
  base-4.18.2.1
  containers-0.6.7
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  indexed-traversable-0.1.4-8j5HZpShpE5BqFup9Ojenr
  indexed-traversable-instances-0.1.2-5Mon71WPUIp6XGx3YLut9Z
  semigroupoids-6.0.1-JojY4E0VJHx8kGvykwlVDS
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  these-1.2.1-JRyCeJCkJl250bmIoLw274
  transformers-0.6.1.0
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting semigroupoids-6.0.1 (semigroupoids-6.0.1-JojY4E0VJHx8kGvykwlVDS)
  base-4.18.2.1
  base-orphans-0.9.3-6eHtw3ngQEKHEGQPUmUnCL
  bifunctors-5.6.2-JOeQrqx1Bk03m9FXwiQq0j
  comonad-5.0.9-8ZWRrlRL43zKWDRwcrbIAe
  containers-0.6.7
  contravariant-1.5.5-L3dzMMfQxh01G5kB8tri44
  distributive-0.6.2.1-AfprxO6uyiDBgDCaNdkxkx
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  template-haskell-2.20.0.0
  transformers-0.6.1.0
  transformers-compat-0.7.2-5nFo8llgs2JItrIXIph57L
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
PreExisting semigroups-0.20 (semigroups-0.20-7UvOFf0Cvlt7ORp1HkBYyN)
  base-4.18.2.1
PreExisting serialise-0.2.6.1 (serialise-0.2.6.1-AWwsyfvh4826fo8Eky2hQZ)
  array-0.5.6.0
  base-4.18.2.1
  bytestring-0.11.5.3
  cborg-0.2.10.0-8ONsMUtgRy96wsXKOMh5PS
  containers-0.6.7
  ghc-prim-0.10.0
  half-0.3.2-4J4TSSiKHp7LcE8iv1hUXo
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  strict-0.5.1-FORtMbIni2AIKPfHCXFH91
  text-2.0.2
  these-1.2.1-JRyCeJCkJl250bmIoLw274
  time-1.12.2
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting some-1.0.6 (some-1.0.6-GqAJsKIAtmC915X4Y1czP2)
  base-4.18.2.1
  base-orphans-0.9.3-6eHtw3ngQEKHEGQPUmUnCL
  deepseq-1.4.8.1
PreExisting split-0.2.5 (split-0.2.5-5qpEwx7qUv6FlaHbX7jgA2) base-4.18.2.1
PreExisting splitmix-0.1.0.5 (splitmix-0.1.0.5-BFex6Gx3IBaGtdqU1pJPtq)
  base-4.18.2.1
  deepseq-1.4.8.1
PreExisting stm-2.5.1.0 (stm-2.5.1.0)
  array-0.5.6.0
  base-4.18.2.1
PreExisting strict-0.5.1 (strict-0.5.1-FORtMbIni2AIKPfHCXFH91)
  assoc-1.1.1-pRyoYwA2ut8wRI3kAERXo
  base-4.18.2.1
  binary-0.8.9.1
  bytestring-0.11.5.3
  deepseq-1.4.8.1
  ghc-prim-0.10.0
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  text-2.0.2
  these-1.2.1-JRyCeJCkJl250bmIoLw274
  transformers-0.6.1.0
PreExisting syb-0.7.2.4 (syb-0.7.2.4-CGf6yzYBtNj1GaPOXC2hje) base-4.18.2.1
PreExisting system-cxx-std-lib-1.0 (system-cxx-std-lib-1.0)
PreExisting tagged-0.8.9 (tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig)
  base-4.18.2.1
  deepseq-1.4.8.1
  template-haskell-2.20.0.0
  transformers-0.6.1.0
PreExisting template-haskell-2.20.0.0 (template-haskell-2.20.0.0)
  base-4.18.2.1
  ghc-boot-th-9.6.6
  ghc-prim-0.10.0
  pretty-1.1.3.6
PreExisting terminal-size-0.3.4 (terminal-size-0.3.4-RfZxi4foNwK9w669pzI7h)
  base-4.18.2.1
PreExisting text-2.0.2 (text-2.0.2)
  array-0.5.6.0
  base-4.18.2.1
  binary-0.8.9.1
  bytestring-0.11.5.3
  deepseq-1.4.8.1
  ghc-prim-0.10.0
  template-haskell-2.20.0.0
PreExisting text-iso8601-0.1.1 (text-iso8601-0.1.1-JPUEQRnmVii5JZl0vMVtVe)
  base-4.18.2.1
  integer-conversion-0.1.1-DeIeALAMu9666WTrmIaGC5
  text-2.0.2
  time-1.12.2
  time-compat-1.9.7-2P0zNtv3JYZH7sTDKsU62C
PreExisting text-short-0.1.6 (text-short-0.1.6-JYTe7ZNYLl9B32IjKxECG6)
  base-4.18.2.1
  binary-0.8.9.1
  bytestring-0.11.5.3
  deepseq-1.4.8.1
  ghc-prim-0.10.0
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  template-haskell-2.20.0.0
  text-2.0.2
PreExisting th-abstraction-0.6.0.0 (th-abstraction-0.6.0.0-6nwiZFs5BlM71phLjoyZV3)
  base-4.18.2.1
  containers-0.6.7
  ghc-prim-0.10.0
  template-haskell-2.20.0.0
PreExisting th-compat-0.1.6 (th-compat-0.1.6-2rrkLPtbtXtGGZep4Kp6E5)
  base-4.18.2.1
  template-haskell-2.20.0.0
PreExisting th-expand-syns-0.4.12.0 (th-expand-syns-0.4.12.0-DV6lmPTNo9b74QFDSuc6ZX)
  base-4.18.2.1
  containers-0.6.7
  syb-0.7.2.4-CGf6yzYBtNj1GaPOXC2hje
  template-haskell-2.20.0.0
  th-abstraction-0.6.0.0-6nwiZFs5BlM71phLjoyZV3
PreExisting th-lift-0.8.6 (th-lift-0.8.6-259dLbfPJk9HrfYIeZHdvQ)
  base-4.18.2.1
  ghc-prim-0.10.0
  template-haskell-2.20.0.0
  th-abstraction-0.6.0.0-6nwiZFs5BlM71phLjoyZV3
PreExisting th-lift-instances-0.1.20 (th-lift-instances-0.1.20-2QVRDQSdM2rFSdCOQdCvAX)
  base-4.18.2.1
  bytestring-0.11.5.3
  containers-0.6.7
  template-haskell-2.20.0.0
  text-2.0.2
  th-lift-0.8.6-259dLbfPJk9HrfYIeZHdvQ
  transformers-0.6.1.0
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting th-orphans-0.13.16 (th-orphans-0.13.16-H1RswpAtNWAAIDDyhzlATx)
  base-4.18.2.1
  mtl-2.3.1
  template-haskell-2.20.0.0
  th-compat-0.1.6-2rrkLPtbtXtGGZep4Kp6E5
  th-lift-0.8.6-259dLbfPJk9HrfYIeZHdvQ
  th-reify-many-0.1.10-IQOOv9rmPuSAOkAjV4Tpay
PreExisting th-reify-many-0.1.10 (th-reify-many-0.1.10-IQOOv9rmPuSAOkAjV4Tpay)
  base-4.18.2.1
  containers-0.6.7
  mtl-2.3.1
  safe-0.3.21-F46Xmb3LoXlCc8daI6vSkg
  template-haskell-2.20.0.0
  th-expand-syns-0.4.12.0-DV6lmPTNo9b74QFDSuc6ZX
PreExisting th-utilities-0.2.5.0 (th-utilities-0.2.5.0-4AS1tS3C71rHPBcuZL33Hf)
  base-4.18.2.1
  bytestring-0.11.5.3
  containers-0.6.7
  directory-1.3.8.5
  filepath-1.4.300.1
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  syb-0.7.2.4-CGf6yzYBtNj1GaPOXC2hje
  template-haskell-2.20.0.0
  text-2.0.2
  th-abstraction-0.6.0.0-6nwiZFs5BlM71phLjoyZV3
  th-orphans-0.13.16-H1RswpAtNWAAIDDyhzlATx
PreExisting these-1.2.1 (these-1.2.1-JRyCeJCkJl250bmIoLw274)
  assoc-1.1.1-pRyoYwA2ut8wRI3kAERXo
  base-4.18.2.1
  binary-0.8.9.1
  deepseq-1.4.8.1
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
PreExisting time-1.12.2 (time-1.12.2)
  base-4.18.2.1
  deepseq-1.4.8.1
PreExisting time-compat-1.9.7 (time-compat-1.9.7-2P0zNtv3JYZH7sTDKsU62C)
  base-4.18.2.1
  base-orphans-0.9.3-6eHtw3ngQEKHEGQPUmUnCL
  deepseq-1.4.8.1
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  time-1.12.2
PreExisting transformers-0.6.1.0 (transformers-0.6.1.0) base-4.18.2.1
PreExisting transformers-base-0.4.6 (transformers-base-0.4.6-FFJs5iPs3OX2XrjIfecasG)
  base-4.18.2.1
  base-orphans-0.9.3-6eHtw3ngQEKHEGQPUmUnCL
  stm-2.5.1.0
  transformers-0.6.1.0
  transformers-compat-0.7.2-5nFo8llgs2JItrIXIph57L
PreExisting transformers-compat-0.7.2 (transformers-compat-0.7.2-5nFo8llgs2JItrIXIph57L)
  base-4.18.2.1
  ghc-prim-0.10.0
  transformers-0.6.1.0
PreExisting uniplate-1.6.13 (uniplate-1.6.13-FzsJe144fc543me23PrahE)
  base-4.18.2.1
  containers-0.6.7
  ghc-prim-0.10.0
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  syb-0.7.2.4-CGf6yzYBtNj1GaPOXC2hje
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
PreExisting universe-base-1.1.4 (universe-base-1.1.4-EArSvlHd71tLZXLBV7J3rk)
  base-4.18.2.1
  containers-0.6.7
  tagged-0.8.9-2fCpivRH6QIGdlOWfdc5ig
  transformers-0.6.1.0
PreExisting unix-2.8.4.0 (unix-2.8.4.0)
  base-4.18.2.1
  bytestring-0.11.5.3
  filepath-1.4.300.1
  time-1.12.2
PreExisting unliftio-core-0.2.1.0 (unliftio-core-0.2.1.0-6sOpIonHj8t5wIbPhWbPHY)
  base-4.18.2.1
  transformers-0.6.1.0
PreExisting unordered-containers-0.2.20 (unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp)
  base-4.18.2.1
  deepseq-1.4.8.1
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  template-haskell-2.20.0.0
PreExisting uuid-types-1.0.6 (uuid-types-1.0.6-9jAax7AHSRN5zS4Sd3CfwN)
  base-4.18.2.1
  binary-0.8.9.1
  bytestring-0.11.5.3
  deepseq-1.4.8.1
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  random-1.2.1.3-4DcS9YVcrJh8BlX0j3OjY9
  template-haskell-2.20.0.0
  text-2.0.2
PreExisting vector-0.13.2.0 (vector-0.13.2.0-BROyW29R0dKfiF9x9opK8)
  base-4.18.2.1
  deepseq-1.4.8.1
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  vector-stream-0.1.0.1-B3eeou3yuYd7g2aD4u5s22
PreExisting vector-algorithms-0.9.0.3 (vector-algorithms-0.9.0.3-Eugl0Kxfg3EL8hxstvZdps)
  base-4.18.2.1
  bitvec-1.1.5.0-ELB4AznZUFF9w6p5OFlmFt
  bytestring-0.11.5.3
  primitive-0.9.0.0-6O2egLZWD5R7V28EkS7LVA
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting vector-stream-0.1.0.1 (vector-stream-0.1.0.1-B3eeou3yuYd7g2aD4u5s22)
  base-4.18.2.1
  ghc-prim-0.10.0
PreExisting void-0.7.3 (void-0.7.3-DBkW9SEsEoE4KUGbU5pvgO) base-4.18.2.1
PreExisting wherefrom-compat-0.1.1.1 (wherefrom-compat-0.1.1.1-6fBiefS8SANJ4oOSgPD5v2)
  base-4.18.2.1
PreExisting witherable-0.5 (witherable-0.5-1LWawYeqEGqLardLVmvI0K)
  base-4.18.2.1
  base-orphans-0.9.3-6eHtw3ngQEKHEGQPUmUnCL
  containers-0.6.7
  hashable-1.4.7.0-FP5AGkU12JDJaeLYkuvjdc
  indexed-traversable-0.1.4-8j5HZpShpE5BqFup9Ojenr
  indexed-traversable-instances-0.1.2-5Mon71WPUIp6XGx3YLut9Z
  transformers-0.6.1.0
  unordered-containers-0.2.20-1h9eLh0z0VxCM1t7eMGKYp
  vector-0.13.2.0-BROyW29R0dKfiF9x9opK8
PreExisting wl-pprint-annotated-0.1.0.1 (wl-pprint-annotated-0.1.0.1-LbMTkgz2daVEhvOZjwdK9z)
  base-4.18.2.1
  containers-0.6.7
  deepseq-1.4.8.1
  text-2.0.2
Build profile: -w ghc-9.6.6 -O1
In order, the following will be built:
 - plutus-tx-template-0.6.0.0-inplace-CoinFlipGame (interactive) (lib:CoinFlipGame) (first run)
Executing install plan in parallel using Just 20 threads.
creating
/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build
creating
/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/tmp
creating
/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame
creating
/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/cache
whenReRegister: nothing to register
Using self-exec internal setup method with build-type Simple and args:
["act-as-setup","--build-type=Simple","--","repl","--verbose=3","--builddir=/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame","lib:CoinFlipGame"]
/nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0/bin/cabal
act-as-setup --build-type=Simple -- repl --verbose=3
--builddir=/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame
lib:CoinFlipGame
Running: /nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0/bin/cabal act-as-setup '--build-type=Simple' -- repl '--verbose=3' '--builddir=/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame' 'lib:CoinFlipGame'
with environment: [("AR","ar"),("AS","as"),("CC","gcc"),("COLORTERM","truecolor"),("CONFIG_SHELL","/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin/bash"),("CXX","g++"),("DBUS_SESSION_BUS_ADDRESS","unix:path=/run/user/1000/bus"),("DISPLAY",":0"),("GIT_ASKPASS","/home/testubuntu/.cursor-server/bin/fe574d0820377383143b2ea26aa6ae28b3425220/extensions/git/dist/askpass.sh"),("HASKELL_DIST_DIR","/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame"),("HOME","/home/testubuntu"),("HOSTTYPE","x86_64"),("HOST_PATH","/nix/store/53iigsmf32bwkfdhhihq2rppgk23k2rg-ncurses-6.4.20221231/bin:/nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/bin:/nix/store/v0vz45j6v084rcvfhzfmf7vjqd12lc1l-numactl-2.0.18/bin:/nix/store/62l1alph77x3d051zivy530mpdvkzi7c-pre-commit-4.0.1/bin:/nix/store/0308r9yjafc0hb1z4r34xbhc2sgyna3b-haskell-language-server-exe-haskell-language-server-2.8.0.0/bin:/nix/store/fhf273xpvi9r3kqvd31sv9r8k3gd7qaq-haskell-language-server-exe-haskell-language-server-wrapper-2.8.0.0/bin:/nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0/bin:/nix/store/l85yyds9b2jzv5swfq4hpjwv21dq7ylr-cabal-fmt-exe-cabal-fmt-0.1.12/bin:/nix/store/in4rzg7z6mkblbasxxsg6dik44jkngbj-stylish-haskell-exe-stylish-haskell-0.14.6.0/bin:/nix/store/76k8922p6r0kmxdwwlwnpmszhrd5gh1n-fourmolu-exe-fourmolu-0.16.2.0/bin:/nix/store/zb5p4yk9zifh0vd9bx2j6yln3a4jqkri-hlint-exe-hlint-3.8/bin:/nix/store/d0gwrmmfgnaaandpzp31a5m69wzdn9rs-ghc-9.6.6/bin:/nix/store/fsva5hfgq2mval33wgz4kg5w7a95qhk8-info/bin:/nix/store/nlm92v189hfib50sd2d6nhbkdq1myc85-list-flake-outputs/bin:/nix/store/ph44jcx3ddmlwh394mh1wb7f1qigxqb1-coreutils-9.5/bin:/nix/store/yb8icljkwhk5lla4nci3myndq2m4ywly-findutils-4.10.0/bin:/nix/store/phqahkhjsk8sl2jjiid1d47l2s4wy33h-diffutils-3.10/bin:/nix/store/yd9vbyhbxx62j0cyhd6v0iacz11nxpvc-gnused-4.9/bin:/nix/store/lvnwdmnjm7nvaq0a3vhvvn46iy4ql7gr-gnugrep-3.11/bin:/nix/store/0np7q7np75csai2cwzx57n332vn9ig4i-gawk-5.2.2/bin:/nix/store/zvn9bvrl2g516d2hfnanljiw24qa6w8l-gnutar-1.35/bin:/nix/store/db379c3zrmncmbv5khqxpk6ggbhxjw61-gzip-1.13/bin:/nix/store/girfp68w14pxfii52ak8gcs212y4q2s2-bzip2-1.0.8-bin/bin:/nix/store/21y3gqgm2a3w94m0wcrz1xxshks80z7p-gnumake-4.4.1/bin:/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin:/nix/store/91ixz3zw9ipc5j93gybir9fp5mzisq8w-patch-2.7.6/bin:/nix/store/6v73xwg2c7p5ap29ckyg18ng87pzlnxs-xz-5.6.2-bin/bin:/nix/store/a6nsbir3y5ni3wwkw933aqvcmyyywnnz-file-5.45/bin"),("IN_NIX_SHELL","impure"),("LANG","C.UTF-8"),("LD","ld"),("LESSCLOSE","/usr/bin/lesspipe %s %s"),("LESSOPEN","| /usr/bin/lesspipe %s"),("LOCALE_ARCHIVE","/nix/store/px8cvmxycca75kfbk5w4anlnqkbip773-glibc-locales-2.40-36/lib/locale/locale-archive"),("LOGNAME","testubuntu"),("LS_COLORS","rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:"),("NAME","COLOUSALSHIP"),("NIX_BINTOOLS","/nix/store/l7n97992gd5piaw8phkxzsz176gfk1yj-binutils-wrapper-2.43.1"),("NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu","1"),("NIX_BUILD_CORES","20"),("NIX_BUILD_TOP","/tmp/nix-shell.c97zY4"),("NIX_CC","/nix/store/vh9fsdhgxcnab2qk7vdp2palkkn6j3cp-gcc-wrapper-13.3.0"),("NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu","1"),("NIX_CFLAGS_COMPILE"," -frandom-seed=wnnx251x2n -isystem /nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/include -isystem /nix/store/lhyfizga3dmmhvyc51c3j43vw7al5civ-blst-3dd0f80/include -isystem /nix/store/rfmswl218z5kvy3zbbfz56m598dpm1d3-libsodium-vrf-dbb48cc-dev/include -isystem /nix/store/qmyaa3hqfcjr10c06cv0v1vm28f7r9sq-secp256k1-acf5c55/include -isystem /nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/include -isystem /nix/store/lhyfizga3dmmhvyc51c3j43vw7al5civ-blst-3dd0f80/include -isystem /nix/store/rfmswl218z5kvy3zbbfz56m598dpm1d3-libsodium-vrf-dbb48cc-dev/include -isystem /nix/store/qmyaa3hqfcjr10c06cv0v1vm28f7r9sq-secp256k1-acf5c55/include"),("NIX_ENFORCE_NO_NATIVE","1"),("NIX_GCROOT","/nix/store/wnnx251x2n46gl7f5dwmjia3rj6jrnfr-ghc-shell-for-plutus-tx-template-env"),("NIX_GHC_LIBDIR","/nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env/lib/ghc-9.6.6/lib"),("NIX_HARDENING_ENABLE","bindnow format fortify fortify3 pic relro stackprotector strictoverflow zerocallusedregs"),("NIX_LDFLAGS","-rpath /home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/outputs/out/lib  -L/nix/store/53iigsmf32bwkfdhhihq2rppgk23k2rg-ncurses-6.4.20221231/lib -L/nix/store/pmf31rbzvv618qirwmzppjb63wsrl4zi-libffi-3.4.6/lib -L/nix/store/y54504sbwlbbm14hkvv48yw4smjw649c-gmp-with-cxx-6.3.0/lib -L/nix/store/v0vz45j6v084rcvfhzfmf7vjqd12lc1l-numactl-2.0.18/lib -L/nix/store/lhyfizga3dmmhvyc51c3j43vw7al5civ-blst-3dd0f80/lib -L/nix/store/r6f360gfrjyqsaxhxnqpr49vdbwzg2jv-libsodium-vrf-dbb48cc/lib -L/nix/store/qmyaa3hqfcjr10c06cv0v1vm28f7r9sq-secp256k1-acf5c55/lib -L/nix/store/53iigsmf32bwkfdhhihq2rppgk23k2rg-ncurses-6.4.20221231/lib -L/nix/store/pmf31rbzvv618qirwmzppjb63wsrl4zi-libffi-3.4.6/lib -L/nix/store/y54504sbwlbbm14hkvv48yw4smjw649c-gmp-with-cxx-6.3.0/lib -L/nix/store/v0vz45j6v084rcvfhzfmf7vjqd12lc1l-numactl-2.0.18/lib -L/nix/store/lhyfizga3dmmhvyc51c3j43vw7al5civ-blst-3dd0f80/lib -L/nix/store/r6f360gfrjyqsaxhxnqpr49vdbwzg2jv-libsodium-vrf-dbb48cc/lib -L/nix/store/qmyaa3hqfcjr10c06cv0v1vm28f7r9sq-secp256k1-acf5c55/lib"),("NIX_PKG_CONFIG_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu","1"),("NIX_PROFILES","/nix/var/nix/profiles/default /home/testubuntu/.nix-profile"),("NIX_SSL_CERT_FILE","/etc/ssl/certs/ca-certificates.crt"),("NIX_STORE","/nix/store"),("NM","nm"),("NVM_BIN","/home/testubuntu/.nvm/versions/node/v22.9.0/bin"),("NVM_CD_FLAGS",""),("NVM_DIR","/home/testubuntu/.nvm"),("NVM_INC","/home/testubuntu/.nvm/versions/node/v22.9.0/include/node"),("OBJCOPY","objcopy"),("OBJDUMP","objdump"),("OLDPWD",""),("PATH","/nix/store/j877rdwz6hk0b4sz4d2blayc35vl4k0d-pre-commit-4.0.1/bin:/nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env/bin:/nix/store/hf9kfv5vbr68sd89al8zc3z3wgjif225-happy-exe-happy-2.1.3/bin:/nix/store/m21y6qrw4aibjxkfgx77z97wv2my2x05-pkg-config-wrapper-0.29.2/bin:/nix/store/dvfb5mrpfhg5211v6pl0a3fmz9idg6w7-patchelf-0.15.0/bin:/nix/store/vh9fsdhgxcnab2qk7vdp2palkkn6j3cp-gcc-wrapper-13.3.0/bin:/nix/store/0vsyw5bhwmisszyfd1a0sdnwvnf4qa5a-gcc-13.3.0/bin:/nix/store/vpsla1ivhavzd4fmi95yzmgb4g9rd072-glibc-2.40-36-bin/bin:/nix/store/ph44jcx3ddmlwh394mh1wb7f1qigxqb1-coreutils-9.5/bin:/nix/store/l7n97992gd5piaw8phkxzsz176gfk1yj-binutils-wrapper-2.43.1/bin:/nix/store/vcvhwiilizhijk7ywyn58p9l005n9sbn-binutils-2.43.1/bin:/nix/store/53iigsmf32bwkfdhhihq2rppgk23k2rg-ncurses-6.4.20221231/bin:/nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/bin:/nix/store/v0vz45j6v084rcvfhzfmf7vjqd12lc1l-numactl-2.0.18/bin:/nix/store/62l1alph77x3d051zivy530mpdvkzi7c-pre-commit-4.0.1/bin:/nix/store/0308r9yjafc0hb1z4r34xbhc2sgyna3b-haskell-language-server-exe-haskell-language-server-2.8.0.0/bin:/nix/store/fhf273xpvi9r3kqvd31sv9r8k3gd7qaq-haskell-language-server-exe-haskell-language-server-wrapper-2.8.0.0/bin:/nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0/bin:/nix/store/l85yyds9b2jzv5swfq4hpjwv21dq7ylr-cabal-fmt-exe-cabal-fmt-0.1.12/bin:/nix/store/in4rzg7z6mkblbasxxsg6dik44jkngbj-stylish-haskell-exe-stylish-haskell-0.14.6.0/bin:/nix/store/76k8922p6r0kmxdwwlwnpmszhrd5gh1n-fourmolu-exe-fourmolu-0.16.2.0/bin:/nix/store/zb5p4yk9zifh0vd9bx2j6yln3a4jqkri-hlint-exe-hlint-3.8/bin:/nix/store/d0gwrmmfgnaaandpzp31a5m69wzdn9rs-ghc-9.6.6/bin:/nix/store/fsva5hfgq2mval33wgz4kg5w7a95qhk8-info/bin:/nix/store/nlm92v189hfib50sd2d6nhbkdq1myc85-list-flake-outputs/bin:/nix/store/ph44jcx3ddmlwh394mh1wb7f1qigxqb1-coreutils-9.5/bin:/nix/store/yb8icljkwhk5lla4nci3myndq2m4ywly-findutils-4.10.0/bin:/nix/store/phqahkhjsk8sl2jjiid1d47l2s4wy33h-diffutils-3.10/bin:/nix/store/yd9vbyhbxx62j0cyhd6v0iacz11nxpvc-gnused-4.9/bin:/nix/store/lvnwdmnjm7nvaq0a3vhvvn46iy4ql7gr-gnugrep-3.11/bin:/nix/store/0np7q7np75csai2cwzx57n332vn9ig4i-gawk-5.2.2/bin:/nix/store/zvn9bvrl2g516d2hfnanljiw24qa6w8l-gnutar-1.35/bin:/nix/store/db379c3zrmncmbv5khqxpk6ggbhxjw61-gzip-1.13/bin:/nix/store/girfp68w14pxfii52ak8gcs212y4q2s2-bzip2-1.0.8-bin/bin:/nix/store/21y3gqgm2a3w94m0wcrz1xxshks80z7p-gnumake-4.4.1/bin:/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin:/nix/store/91ixz3zw9ipc5j93gybir9fp5mzisq8w-patch-2.7.6/bin:/nix/store/6v73xwg2c7p5ap29ckyg18ng87pzlnxs-xz-5.6.2-bin/bin:/nix/store/a6nsbir3y5ni3wwkw933aqvcmyyywnnz-file-5.45/bin:/home/testubuntu/.cursor-server/bin/fe574d0820377383143b2ea26aa6ae28b3425220/bin/remote-cli:/home/testubuntu/.nix-profile/bin:/home/testubuntu/.nvm/versions/node/v22.9.0/bin:/home/testubuntu/.cabal/bin:/home/testubuntu/.ghcup/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/Program Files (x86)/Common Files/Oracle/Java/java8path:/mnt/c/Program Files (x86)/Common Files/Oracle/Java/javapath:/mnt/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.4/bin:/mnt/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.4/libnvvp:/mnt/c/Users/ivand/.cargo/bin:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/Scripts/:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/:/mnt/c/Users/ivand/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/ivand/AppData/Local/Programs/Microsoft VS Code/bin:/mnt/c/Users/ivand/.dotnet/tools:/mnt/c/Users/ivand/AppData/Roaming/nvm:/mnt/c/Program Files/nodejs:/mnt/c/Users/ivand/AppData/Roaming/npm:/mnt/c/Users/ivand/dev/flutter/bin:/mnt/c/Windows/System32:/mnt/c/Program Files (x86)/NVIDIA Corporation/PhysX/Common:/mnt/c/Program Files/Amazon/AWSCLIV2/:/mnt/c/Program Files/NVIDIA Corporation/Nsight Compute 2024.1.0/:/mnt/c/Program Files/NVIDIA Corporation/NVIDIA NvDLISR:/mnt/c/Program Files (x86)/PowerShell/7/:/mnt/c/Program Files/GitHub CLI/:/mnt/c/Program Files/Docker/Docker/resources/bin:/mnt/c/Program Files/Git/cmd:/mnt/c/Users/ivand/.cargo/bin:/mnt/c/Users/ivand/dev/flutter/bin:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/Scripts/:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/:/mnt/c/Users/ivand/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/ivand/AppData/Local/Programs/Microsoft VS Code/bin:/mnt/c/Users/ivand/.dotnet/tools:/mnt/c/Users/ivand/AppData/Roaming/nvm:/mnt/c/Program Files/nodejs:/mnt/c/Users/ivand/AppData/Roaming/npm:/mnt/c/Windows/System32:/mnt/c/Users/ivand/AppData/Local/Programs/Fiddler:/mnt/c/Users/ivand/AppData/Local/Programs/FFmpeg/bin:/mnt/c/Users/ivand/AppData/Local/Microsoft/WinGet/Packages/Gyan.FFmpeg.Essentials_Microsoft.Winget.Source_8wekyb3d8bbwe/ffmpeg-7.1-essentials_build/bin:/mnt/c/Users/ivand/AppData/Local/GitHubDesktop/bin:/mnt/c/ghcup/bin:/snap/bin"),("PKG_CONFIG","pkg-config"),("PKG_CONFIG_PATH","/nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/lib/pkgconfig:/nix/store/lhyfizga3dmmhvyc51c3j43vw7al5civ-blst-3dd0f80/lib/pkgconfig:/nix/store/rfmswl218z5kvy3zbbfz56m598dpm1d3-libsodium-vrf-dbb48cc-dev/lib/pkgconfig:/nix/store/qmyaa3hqfcjr10c06cv0v1vm28f7r9sq-secp256k1-acf5c55/lib/pkgconfig"),("PS1","\n\\[\\033[1;32m\\][nix-shell:\\w]$\\[\\033[0m\\] "),("PULSE_SERVER","unix:/mnt/wslg/PulseServer"),("PWD","/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain"),("RANLIB","ranlib"),("READELF","readelf"),("SHELL","/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin/bash"),("SHLVL","2"),("SIZE","size"),("SOURCE_DATE_EPOCH","315532800"),("STRINGS","strings"),("STRIP","strip"),("TEMP","/tmp/nix-shell.c97zY4"),("TEMPDIR","/tmp/nix-shell.c97zY4"),("TERM","xterm-256color"),("TERM_PROGRAM","vscode"),("TERM_PROGRAM_VERSION","0.44.11"),("TMP","/tmp/nix-shell.c97zY4"),("TMPDIR","/tmp/nix-shell.c97zY4"),("USER","testubuntu"),("VSCODE_GIT_ASKPASS_EXTRA_ARGS",""),("VSCODE_GIT_ASKPASS_MAIN","/home/testubuntu/.cursor-server/bin/fe574d0820377383143b2ea26aa6ae28b3425220/extensions/git/dist/askpass-main.js"),("VSCODE_GIT_ASKPASS_NODE","/home/testubuntu/.cursor-server/bin/fe574d0820377383143b2ea26aa6ae28b3425220/node"),("VSCODE_GIT_IPC_HANDLE","/run/user/1000/vscode-git-b91ac7136a.sock"),("VSCODE_IPC_HOOK_CLI","/run/user/1000/vscode-ipc-1faa4654-7c6a-498c-91f0-7398d2544310.sock"),("WAYLAND_DISPLAY","wayland-0"),("WSL2_GUI_APPS_ENABLED","1"),("WSLENV","VSCODE_WSL_EXT_LOCATION/up"),("WSL_DISTRO_NAME","Ubuntu"),("WSL_INTEROP","/run/WSL/293_interop"),("XDG_DATA_DIRS","/nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env/share:/nix/store/m21y6qrw4aibjxkfgx77z97wv2my2x05-pkg-config-wrapper-0.29.2/share:/nix/store/dvfb5mrpfhg5211v6pl0a3fmz9idg6w7-patchelf-0.15.0/share:/usr/local/share:/usr/share:/var/lib/snapd/desktop:/home/testubuntu/.nix-profile/share:/nix/var/nix/profiles/default/share"),("XDG_RUNTIME_DIR","/run/user/1000/"),("_","/nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0/bin/cabal"),("__structuredAttrs",""),("allToolDeps","1"),("buildInputs","/nix/store/4f6csghv6ibw8sl14avxa9y98w5grfhc-plutus-core-lib-plutus-core-1.38.0.0 /nix/store/cgbkxikc9lmhjy898ici0kkja9fkhmsl-plutus-ledger-api-lib-plutus-ledger-api-1.38.0.0 /nix/store/nd1ys5yls8kbx1zwm61iy5sl5mxpbgzf-plutus-tx-lib-plutus-tx-1.38.0.0 /nix/store/37sqq1cygksmjrgphh0nzx6b9h5l0i57-plutus-tx-plugin-lib-plutus-tx-plugin-1.38.0.0 /nix/store/62l1alph77x3d051zivy530mpdvkzi7c-pre-commit-4.0.1            /nix/store/0308r9yjafc0hb1z4r34xbhc2sgyna3b-haskell-language-server-exe-haskell-language-server-2.8.0.0 /nix/store/fhf273xpvi9r3kqvd31sv9r8k3gd7qaq-haskell-language-server-exe-haskell-language-server-wrapper-2.8.0.0 /nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0 /nix/store/l85yyds9b2jzv5swfq4hpjwv21dq7ylr-cabal-fmt-exe-cabal-fmt-0.1.12 /nix/store/in4rzg7z6mkblbasxxsg6dik44jkngbj-stylish-haskell-exe-stylish-haskell-0.14.6.0 /nix/store/76k8922p6r0kmxdwwlwnpmszhrd5gh1n-fourmolu-exe-fourmolu-0.16.2.0 /nix/store/zb5p4yk9zifh0vd9bx2j6yln3a4jqkri-hlint-exe-hlint-3.8 /nix/store/d0gwrmmfgnaaandpzp31a5m69wzdn9rs-ghc-9.6.6 /nix/store/fsva5hfgq2mval33wgz4kg5w7a95qhk8-info /nix/store/nlm92v189hfib50sd2d6nhbkdq1myc85-list-flake-outputs"),("buildPhase","{ echo \"------------------------------------------------------------\";\n  echo \" WARNING: the existence of this path is not guaranteed.\";\n  echo \" It is an internal implementation detail for pkgs.mkShell.\";\n  echo \"------------------------------------------------------------\";\n  echo;\n  # Record all build inputs as runtime dependencies\n  export;\n} >> \"$out\"\n"),("builder","/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin/bash"),("cmakeFlags",""),("configureFlags",""),("depsBuildBuild",""),("depsBuildBuildPropagated",""),("depsBuildTarget",""),("depsBuildTargetPropagated",""),("depsHostHost",""),("depsHostHostPropagated",""),("depsTargetTarget",""),("depsTargetTargetPropagated",""),("doCheck",""),("doInstallCheck",""),("dontAddDisableDepTrack","1"),("enableDWARF",""),("exactDeps",""),("installPhase","echo \"Shell for plutus-tx-template\"\necho $nativeBuildInputs $buildInputs > $out\n"),("mesonFlags",""),("name","ghc-shell-for-plutus-tx-template-env"),("nativeBuildInputs","/nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env /nix/store/hf9kfv5vbr68sd89al8zc3z3wgjif225-happy-exe-happy-2.1.3 /nix/store/m21y6qrw4aibjxkfgx77z97wv2my2x05-pkg-config-wrapper-0.29.2"),("out","/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/outputs/out"),("outputs","out"),("packageSetupDeps","1"),("patches",""),("phases","installPhase"),("plutus_tx_template_datadir","/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/././."),("preferLocalBuild","1"),("propagatedBuildInputs",""),("propagatedNativeBuildInputs",""),("shell","/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin/bash"),("shellHook","\n\n\n\nexport PATH=/nix/store/j877rdwz6hk0b4sz4d2blayc35vl4k0d-pre-commit-4.0.1/bin:$PATH\nif ! type -t git >/dev/null; then\n  # This happens in pure shells, including lorri\n  echo 1>&2 \"WARNING: git-hooks.nix: git command not found; skipping installation.\"\nelif ! /nix/store/y7hmnnzxlh57vns0yiyks20803l0qj7r-git-minimal-2.47.0/bin/git rev-parse --git-dir &> /dev/null; then\n  echo 1>&2 \"WARNING: git-hooks.nix: .git not found; skipping installation.\"\nelse\n  GIT_WC=`/nix/store/y7hmnnzxlh57vns0yiyks20803l0qj7r-git-minimal-2.47.0/bin/git rev-parse --show-toplevel`\n\n  # These update procedures compare before they write, to avoid\n  # filesystem churn. This improves performance with watch tools like lorri\n  # and prevents installation loops by lorri.\n\n  if ! readlink \"${GIT_WC}/.pre-commit-config.yaml\" >/dev/null \\\n    || [[ $(readlink \"${GIT_WC}/.pre-commit-config.yaml\") != /nix/store/80fhixivf65s96rwm8j0gg8xlkq07y0h-pre-commit-config.json ]]; then\n    echo 1>&2 \"git-hooks.nix: updating $PWD repo\"\n    [ -L .pre-commit-config.yaml ] && unlink .pre-commit-config.yaml\n\n    if [ -e \"${GIT_WC}/.pre-commit-config.yaml\" ]; then\n      echo 1>&2 \"git-hooks.nix: WARNING: Refusing to install because of pre-existing .pre-commit-config.yaml\"\n      echo 1>&2 \"    1. Translate .pre-commit-config.yaml contents to the new syntax in your Nix file\"\n      echo 1>&2 \"        see https://github.com/cachix/git-hooks.nix#getting-started\"\n      echo 1>&2 \"    2. remove .pre-commit-config.yaml\"\n      echo 1>&2 \"    3. add .pre-commit-config.yaml to .gitignore\"\n    else\n      if true; then\n        nix-store --add-root \"${GIT_WC}/.pre-commit-config.yaml\" --indirect --realise /nix/store/80fhixivf65s96rwm8j0gg8xlkq07y0h-pre-commit-config.json\n      else\n        ln -fs /nix/store/80fhixivf65s96rwm8j0gg8xlkq07y0h-pre-commit-config.json \"${GIT_WC}/.pre-commit-config.yaml\"\n      fi\n      # Remove any previously installed hooks (since pre-commit itself has no convergent design)\n      hooks=\"commit-msg post-checkout post-commit post-merge post-rewrite pre-commit pre-merge-commit pre-push pre-rebase prepare-commit-msg\"\n      for hook in $hooks; do\n        pre-commit uninstall -t $hook\n      done\n      /nix/store/y7hmnnzxlh57vns0yiyks20803l0qj7r-git-minimal-2.47.0/bin/git config --local core.hooksPath \"\"\n      # Add hooks for configured stages (only) ...\n      if [ ! -z \"\" ]; then\n        for stage in ; do\n          case $stage in\n            manual)\n              ;;\n            # if you amend these switches please also review $hooks above\n            commit | merge-commit | push)\n              stage=\"pre-\"$stage\n              pre-commit install -t $stage\n              ;;\n            commit-msg|post-checkout|post-commit|post-merge|post-rewrite|pre-commit|pre-merge-commit|pre-push|pre-rebase|prepare-commit-msg|manual)\n              pre-commit install -t $stage\n              ;;\n            *)\n              echo 1>&2 \"ERROR: git-hooks.nix: either $stage is not a valid stage or git-hooks.nix doesn't yet support it.\"\n              exit 1\n              ;;\n          esac\n        done\n      # ... or default 'pre-commit' hook\n      else\n        pre-commit install\n      fi\n\n      # Fetch the absolute path to the git common directory. This will normally point to $GIT_WC/.git.\n      common_dir=$(/nix/store/y7hmnnzxlh57vns0yiyks20803l0qj7r-git-minimal-2.47.0/bin/git rev-parse --path-format=absolute --git-common-dir)\n\n      # Convert the absolute path to a path relative to the toplevel working directory.\n      common_dir=${common_dir#$GIT_WC/}\n\n      /nix/store/y7hmnnzxlh57vns0yiyks20803l0qj7r-git-minimal-2.47.0/bin/git config --local core.hooksPath \"$common_dir/hooks\"\n    fi\n  fi\nfi\n\n\n\n\nexport PS1=\"\n\\[\\033[1;32m\\][nix-shell:\\w]\\$\\[\\033[0m\\] \"\necho \nprintf \"\129311 \\033[1;31mWelcome to nix-shell\\033[0m \129311\"\necho\necho\necho \"Type 'info' to see what's inside this shell.\"\n\n\nexport LOCALE_ARCHIVE=\"/nix/store/px8cvmxycca75kfbk5w4anlnqkbip773-glibc-locales-2.40-36/lib/locale/locale-archive\"\n"),("stdenv","/nix/store/ncv68hjnidcd2bm5abkhklrijhn0cgn6-stdenv-linux"),("strictDeps",""),("system","x86_64-linux"),("withHaddock","")]
with working directory: "/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/./."
Component build order: library 'CoinFlipGame'
Running: /nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env/bin/ghc-pkg init /home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/package.conf.inplace -v2
with environment: [("AR","ar"),("AS","as"),("CC","gcc"),("COLORTERM","truecolor"),("CONFIG_SHELL","/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin/bash"),("CXX","g++"),("DBUS_SESSION_BUS_ADDRESS","unix:path=/run/user/1000/bus"),("DISPLAY",":0"),("GIT_ASKPASS","/home/testubuntu/.cursor-server/bin/fe574d0820377383143b2ea26aa6ae28b3425220/extensions/git/dist/askpass.sh"),("HASKELL_DIST_DIR","/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame"),("HOME","/home/testubuntu"),("HOSTTYPE","x86_64"),("HOST_PATH","/nix/store/53iigsmf32bwkfdhhihq2rppgk23k2rg-ncurses-6.4.20221231/bin:/nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/bin:/nix/store/v0vz45j6v084rcvfhzfmf7vjqd12lc1l-numactl-2.0.18/bin:/nix/store/62l1alph77x3d051zivy530mpdvkzi7c-pre-commit-4.0.1/bin:/nix/store/0308r9yjafc0hb1z4r34xbhc2sgyna3b-haskell-language-server-exe-haskell-language-server-2.8.0.0/bin:/nix/store/fhf273xpvi9r3kqvd31sv9r8k3gd7qaq-haskell-language-server-exe-haskell-language-server-wrapper-2.8.0.0/bin:/nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0/bin:/nix/store/l85yyds9b2jzv5swfq4hpjwv21dq7ylr-cabal-fmt-exe-cabal-fmt-0.1.12/bin:/nix/store/in4rzg7z6mkblbasxxsg6dik44jkngbj-stylish-haskell-exe-stylish-haskell-0.14.6.0/bin:/nix/store/76k8922p6r0kmxdwwlwnpmszhrd5gh1n-fourmolu-exe-fourmolu-0.16.2.0/bin:/nix/store/zb5p4yk9zifh0vd9bx2j6yln3a4jqkri-hlint-exe-hlint-3.8/bin:/nix/store/d0gwrmmfgnaaandpzp31a5m69wzdn9rs-ghc-9.6.6/bin:/nix/store/fsva5hfgq2mval33wgz4kg5w7a95qhk8-info/bin:/nix/store/nlm92v189hfib50sd2d6nhbkdq1myc85-list-flake-outputs/bin:/nix/store/ph44jcx3ddmlwh394mh1wb7f1qigxqb1-coreutils-9.5/bin:/nix/store/yb8icljkwhk5lla4nci3myndq2m4ywly-findutils-4.10.0/bin:/nix/store/phqahkhjsk8sl2jjiid1d47l2s4wy33h-diffutils-3.10/bin:/nix/store/yd9vbyhbxx62j0cyhd6v0iacz11nxpvc-gnused-4.9/bin:/nix/store/lvnwdmnjm7nvaq0a3vhvvn46iy4ql7gr-gnugrep-3.11/bin:/nix/store/0np7q7np75csai2cwzx57n332vn9ig4i-gawk-5.2.2/bin:/nix/store/zvn9bvrl2g516d2hfnanljiw24qa6w8l-gnutar-1.35/bin:/nix/store/db379c3zrmncmbv5khqxpk6ggbhxjw61-gzip-1.13/bin:/nix/store/girfp68w14pxfii52ak8gcs212y4q2s2-bzip2-1.0.8-bin/bin:/nix/store/21y3gqgm2a3w94m0wcrz1xxshks80z7p-gnumake-4.4.1/bin:/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin:/nix/store/91ixz3zw9ipc5j93gybir9fp5mzisq8w-patch-2.7.6/bin:/nix/store/6v73xwg2c7p5ap29ckyg18ng87pzlnxs-xz-5.6.2-bin/bin:/nix/store/a6nsbir3y5ni3wwkw933aqvcmyyywnnz-file-5.45/bin"),("IN_NIX_SHELL","impure"),("LANG","C.UTF-8"),("LD","ld"),("LESSCLOSE","/usr/bin/lesspipe %s %s"),("LESSOPEN","| /usr/bin/lesspipe %s"),("LOCALE_ARCHIVE","/nix/store/px8cvmxycca75kfbk5w4anlnqkbip773-glibc-locales-2.40-36/lib/locale/locale-archive"),("LOGNAME","testubuntu"),("LS_COLORS","rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:"),("NAME","COLOUSALSHIP"),("NIX_BINTOOLS","/nix/store/l7n97992gd5piaw8phkxzsz176gfk1yj-binutils-wrapper-2.43.1"),("NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu","1"),("NIX_BUILD_CORES","20"),("NIX_BUILD_TOP","/tmp/nix-shell.c97zY4"),("NIX_CC","/nix/store/vh9fsdhgxcnab2qk7vdp2palkkn6j3cp-gcc-wrapper-13.3.0"),("NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu","1"),("NIX_CFLAGS_COMPILE"," -frandom-seed=wnnx251x2n -isystem /nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/include -isystem /nix/store/lhyfizga3dmmhvyc51c3j43vw7al5civ-blst-3dd0f80/include -isystem /nix/store/rfmswl218z5kvy3zbbfz56m598dpm1d3-libsodium-vrf-dbb48cc-dev/include -isystem /nix/store/qmyaa3hqfcjr10c06cv0v1vm28f7r9sq-secp256k1-acf5c55/include -isystem /nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/include -isystem /nix/store/lhyfizga3dmmhvyc51c3j43vw7al5civ-blst-3dd0f80/include -isystem /nix/store/rfmswl218z5kvy3zbbfz56m598dpm1d3-libsodium-vrf-dbb48cc-dev/include -isystem /nix/store/qmyaa3hqfcjr10c06cv0v1vm28f7r9sq-secp256k1-acf5c55/include"),("NIX_ENFORCE_NO_NATIVE","1"),("NIX_GCROOT","/nix/store/wnnx251x2n46gl7f5dwmjia3rj6jrnfr-ghc-shell-for-plutus-tx-template-env"),("NIX_GHC_LIBDIR","/nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env/lib/ghc-9.6.6/lib"),("NIX_HARDENING_ENABLE","bindnow format fortify fortify3 pic relro stackprotector strictoverflow zerocallusedregs"),("NIX_LDFLAGS","-rpath /home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/outputs/out/lib  -L/nix/store/53iigsmf32bwkfdhhihq2rppgk23k2rg-ncurses-6.4.20221231/lib -L/nix/store/pmf31rbzvv618qirwmzppjb63wsrl4zi-libffi-3.4.6/lib -L/nix/store/y54504sbwlbbm14hkvv48yw4smjw649c-gmp-with-cxx-6.3.0/lib -L/nix/store/v0vz45j6v084rcvfhzfmf7vjqd12lc1l-numactl-2.0.18/lib -L/nix/store/lhyfizga3dmmhvyc51c3j43vw7al5civ-blst-3dd0f80/lib -L/nix/store/r6f360gfrjyqsaxhxnqpr49vdbwzg2jv-libsodium-vrf-dbb48cc/lib -L/nix/store/qmyaa3hqfcjr10c06cv0v1vm28f7r9sq-secp256k1-acf5c55/lib -L/nix/store/53iigsmf32bwkfdhhihq2rppgk23k2rg-ncurses-6.4.20221231/lib -L/nix/store/pmf31rbzvv618qirwmzppjb63wsrl4zi-libffi-3.4.6/lib -L/nix/store/y54504sbwlbbm14hkvv48yw4smjw649c-gmp-with-cxx-6.3.0/lib -L/nix/store/v0vz45j6v084rcvfhzfmf7vjqd12lc1l-numactl-2.0.18/lib -L/nix/store/lhyfizga3dmmhvyc51c3j43vw7al5civ-blst-3dd0f80/lib -L/nix/store/r6f360gfrjyqsaxhxnqpr49vdbwzg2jv-libsodium-vrf-dbb48cc/lib -L/nix/store/qmyaa3hqfcjr10c06cv0v1vm28f7r9sq-secp256k1-acf5c55/lib"),("NIX_PKG_CONFIG_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu","1"),("NIX_PROFILES","/nix/var/nix/profiles/default /home/testubuntu/.nix-profile"),("NIX_SSL_CERT_FILE","/etc/ssl/certs/ca-certificates.crt"),("NIX_STORE","/nix/store"),("NM","nm"),("NVM_BIN","/home/testubuntu/.nvm/versions/node/v22.9.0/bin"),("NVM_CD_FLAGS",""),("NVM_DIR","/home/testubuntu/.nvm"),("NVM_INC","/home/testubuntu/.nvm/versions/node/v22.9.0/include/node"),("OBJCOPY","objcopy"),("OBJDUMP","objdump"),("OLDPWD",""),("PATH","/nix/store/j877rdwz6hk0b4sz4d2blayc35vl4k0d-pre-commit-4.0.1/bin:/nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env/bin:/nix/store/hf9kfv5vbr68sd89al8zc3z3wgjif225-happy-exe-happy-2.1.3/bin:/nix/store/m21y6qrw4aibjxkfgx77z97wv2my2x05-pkg-config-wrapper-0.29.2/bin:/nix/store/dvfb5mrpfhg5211v6pl0a3fmz9idg6w7-patchelf-0.15.0/bin:/nix/store/vh9fsdhgxcnab2qk7vdp2palkkn6j3cp-gcc-wrapper-13.3.0/bin:/nix/store/0vsyw5bhwmisszyfd1a0sdnwvnf4qa5a-gcc-13.3.0/bin:/nix/store/vpsla1ivhavzd4fmi95yzmgb4g9rd072-glibc-2.40-36-bin/bin:/nix/store/ph44jcx3ddmlwh394mh1wb7f1qigxqb1-coreutils-9.5/bin:/nix/store/l7n97992gd5piaw8phkxzsz176gfk1yj-binutils-wrapper-2.43.1/bin:/nix/store/vcvhwiilizhijk7ywyn58p9l005n9sbn-binutils-2.43.1/bin:/nix/store/53iigsmf32bwkfdhhihq2rppgk23k2rg-ncurses-6.4.20221231/bin:/nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/bin:/nix/store/v0vz45j6v084rcvfhzfmf7vjqd12lc1l-numactl-2.0.18/bin:/nix/store/62l1alph77x3d051zivy530mpdvkzi7c-pre-commit-4.0.1/bin:/nix/store/0308r9yjafc0hb1z4r34xbhc2sgyna3b-haskell-language-server-exe-haskell-language-server-2.8.0.0/bin:/nix/store/fhf273xpvi9r3kqvd31sv9r8k3gd7qaq-haskell-language-server-exe-haskell-language-server-wrapper-2.8.0.0/bin:/nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0/bin:/nix/store/l85yyds9b2jzv5swfq4hpjwv21dq7ylr-cabal-fmt-exe-cabal-fmt-0.1.12/bin:/nix/store/in4rzg7z6mkblbasxxsg6dik44jkngbj-stylish-haskell-exe-stylish-haskell-0.14.6.0/bin:/nix/store/76k8922p6r0kmxdwwlwnpmszhrd5gh1n-fourmolu-exe-fourmolu-0.16.2.0/bin:/nix/store/zb5p4yk9zifh0vd9bx2j6yln3a4jqkri-hlint-exe-hlint-3.8/bin:/nix/store/d0gwrmmfgnaaandpzp31a5m69wzdn9rs-ghc-9.6.6/bin:/nix/store/fsva5hfgq2mval33wgz4kg5w7a95qhk8-info/bin:/nix/store/nlm92v189hfib50sd2d6nhbkdq1myc85-list-flake-outputs/bin:/nix/store/ph44jcx3ddmlwh394mh1wb7f1qigxqb1-coreutils-9.5/bin:/nix/store/yb8icljkwhk5lla4nci3myndq2m4ywly-findutils-4.10.0/bin:/nix/store/phqahkhjsk8sl2jjiid1d47l2s4wy33h-diffutils-3.10/bin:/nix/store/yd9vbyhbxx62j0cyhd6v0iacz11nxpvc-gnused-4.9/bin:/nix/store/lvnwdmnjm7nvaq0a3vhvvn46iy4ql7gr-gnugrep-3.11/bin:/nix/store/0np7q7np75csai2cwzx57n332vn9ig4i-gawk-5.2.2/bin:/nix/store/zvn9bvrl2g516d2hfnanljiw24qa6w8l-gnutar-1.35/bin:/nix/store/db379c3zrmncmbv5khqxpk6ggbhxjw61-gzip-1.13/bin:/nix/store/girfp68w14pxfii52ak8gcs212y4q2s2-bzip2-1.0.8-bin/bin:/nix/store/21y3gqgm2a3w94m0wcrz1xxshks80z7p-gnumake-4.4.1/bin:/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin:/nix/store/91ixz3zw9ipc5j93gybir9fp5mzisq8w-patch-2.7.6/bin:/nix/store/6v73xwg2c7p5ap29ckyg18ng87pzlnxs-xz-5.6.2-bin/bin:/nix/store/a6nsbir3y5ni3wwkw933aqvcmyyywnnz-file-5.45/bin:/home/testubuntu/.cursor-server/bin/fe574d0820377383143b2ea26aa6ae28b3425220/bin/remote-cli:/home/testubuntu/.nix-profile/bin:/home/testubuntu/.nvm/versions/node/v22.9.0/bin:/home/testubuntu/.cabal/bin:/home/testubuntu/.ghcup/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/Program Files (x86)/Common Files/Oracle/Java/java8path:/mnt/c/Program Files (x86)/Common Files/Oracle/Java/javapath:/mnt/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.4/bin:/mnt/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.4/libnvvp:/mnt/c/Users/ivand/.cargo/bin:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/Scripts/:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/:/mnt/c/Users/ivand/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/ivand/AppData/Local/Programs/Microsoft VS Code/bin:/mnt/c/Users/ivand/.dotnet/tools:/mnt/c/Users/ivand/AppData/Roaming/nvm:/mnt/c/Program Files/nodejs:/mnt/c/Users/ivand/AppData/Roaming/npm:/mnt/c/Users/ivand/dev/flutter/bin:/mnt/c/Windows/System32:/mnt/c/Program Files (x86)/NVIDIA Corporation/PhysX/Common:/mnt/c/Program Files/Amazon/AWSCLIV2/:/mnt/c/Program Files/NVIDIA Corporation/Nsight Compute 2024.1.0/:/mnt/c/Program Files/NVIDIA Corporation/NVIDIA NvDLISR:/mnt/c/Program Files (x86)/PowerShell/7/:/mnt/c/Program Files/GitHub CLI/:/mnt/c/Program Files/Docker/Docker/resources/bin:/mnt/c/Program Files/Git/cmd:/mnt/c/Users/ivand/.cargo/bin:/mnt/c/Users/ivand/dev/flutter/bin:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/Scripts/:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/:/mnt/c/Users/ivand/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/ivand/AppData/Local/Programs/Microsoft VS Code/bin:/mnt/c/Users/ivand/.dotnet/tools:/mnt/c/Users/ivand/AppData/Roaming/nvm:/mnt/c/Program Files/nodejs:/mnt/c/Users/ivand/AppData/Roaming/npm:/mnt/c/Windows/System32:/mnt/c/Users/ivand/AppData/Local/Programs/Fiddler:/mnt/c/Users/ivand/AppData/Local/Programs/FFmpeg/bin:/mnt/c/Users/ivand/AppData/Local/Microsoft/WinGet/Packages/Gyan.FFmpeg.Essentials_Microsoft.Winget.Source_8wekyb3d8bbwe/ffmpeg-7.1-essentials_build/bin:/mnt/c/Users/ivand/AppData/Local/GitHubDesktop/bin:/mnt/c/ghcup/bin:/snap/bin:/nix/store/j877rdwz6hk0b4sz4d2blayc35vl4k0d-pre-commit-4.0.1/bin:/nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env/bin:/nix/store/hf9kfv5vbr68sd89al8zc3z3wgjif225-happy-exe-happy-2.1.3/bin:/nix/store/m21y6qrw4aibjxkfgx77z97wv2my2x05-pkg-config-wrapper-0.29.2/bin:/nix/store/dvfb5mrpfhg5211v6pl0a3fmz9idg6w7-patchelf-0.15.0/bin:/nix/store/vh9fsdhgxcnab2qk7vdp2palkkn6j3cp-gcc-wrapper-13.3.0/bin:/nix/store/0vsyw5bhwmisszyfd1a0sdnwvnf4qa5a-gcc-13.3.0/bin:/nix/store/vpsla1ivhavzd4fmi95yzmgb4g9rd072-glibc-2.40-36-bin/bin:/nix/store/ph44jcx3ddmlwh394mh1wb7f1qigxqb1-coreutils-9.5/bin:/nix/store/l7n97992gd5piaw8phkxzsz176gfk1yj-binutils-wrapper-2.43.1/bin:/nix/store/vcvhwiilizhijk7ywyn58p9l005n9sbn-binutils-2.43.1/bin:/nix/store/53iigsmf32bwkfdhhihq2rppgk23k2rg-ncurses-6.4.20221231/bin:/nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/bin:/nix/store/v0vz45j6v084rcvfhzfmf7vjqd12lc1l-numactl-2.0.18/bin:/nix/store/62l1alph77x3d051zivy530mpdvkzi7c-pre-commit-4.0.1/bin:/nix/store/0308r9yjafc0hb1z4r34xbhc2sgyna3b-haskell-language-server-exe-haskell-language-server-2.8.0.0/bin:/nix/store/fhf273xpvi9r3kqvd31sv9r8k3gd7qaq-haskell-language-server-exe-haskell-language-server-wrapper-2.8.0.0/bin:/nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0/bin:/nix/store/l85yyds9b2jzv5swfq4hpjwv21dq7ylr-cabal-fmt-exe-cabal-fmt-0.1.12/bin:/nix/store/in4rzg7z6mkblbasxxsg6dik44jkngbj-stylish-haskell-exe-stylish-haskell-0.14.6.0/bin:/nix/store/76k8922p6r0kmxdwwlwnpmszhrd5gh1n-fourmolu-exe-fourmolu-0.16.2.0/bin:/nix/store/zb5p4yk9zifh0vd9bx2j6yln3a4jqkri-hlint-exe-hlint-3.8/bin:/nix/store/d0gwrmmfgnaaandpzp31a5m69wzdn9rs-ghc-9.6.6/bin:/nix/store/fsva5hfgq2mval33wgz4kg5w7a95qhk8-info/bin:/nix/store/nlm92v189hfib50sd2d6nhbkdq1myc85-list-flake-outputs/bin:/nix/store/ph44jcx3ddmlwh394mh1wb7f1qigxqb1-coreutils-9.5/bin:/nix/store/yb8icljkwhk5lla4nci3myndq2m4ywly-findutils-4.10.0/bin:/nix/store/phqahkhjsk8sl2jjiid1d47l2s4wy33h-diffutils-3.10/bin:/nix/store/yd9vbyhbxx62j0cyhd6v0iacz11nxpvc-gnused-4.9/bin:/nix/store/lvnwdmnjm7nvaq0a3vhvvn46iy4ql7gr-gnugrep-3.11/bin:/nix/store/0np7q7np75csai2cwzx57n332vn9ig4i-gawk-5.2.2/bin:/nix/store/zvn9bvrl2g516d2hfnanljiw24qa6w8l-gnutar-1.35/bin:/nix/store/db379c3zrmncmbv5khqxpk6ggbhxjw61-gzip-1.13/bin:/nix/store/girfp68w14pxfii52ak8gcs212y4q2s2-bzip2-1.0.8-bin/bin:/nix/store/21y3gqgm2a3w94m0wcrz1xxshks80z7p-gnumake-4.4.1/bin:/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin:/nix/store/91ixz3zw9ipc5j93gybir9fp5mzisq8w-patch-2.7.6/bin:/nix/store/6v73xwg2c7p5ap29ckyg18ng87pzlnxs-xz-5.6.2-bin/bin:/nix/store/a6nsbir3y5ni3wwkw933aqvcmyyywnnz-file-5.45/bin:/home/testubuntu/.cursor-server/bin/fe574d0820377383143b2ea26aa6ae28b3425220/bin/remote-cli:/home/testubuntu/.nix-profile/bin:/home/testubuntu/.nvm/versions/node/v22.9.0/bin:/home/testubuntu/.cabal/bin:/home/testubuntu/.ghcup/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/Program Files (x86)/Common Files/Oracle/Java/java8path:/mnt/c/Program Files (x86)/Common Files/Oracle/Java/javapath:/mnt/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.4/bin:/mnt/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.4/libnvvp:/mnt/c/Users/ivand/.cargo/bin:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/Scripts/:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/:/mnt/c/Users/ivand/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/ivand/AppData/Local/Programs/Microsoft VS Code/bin:/mnt/c/Users/ivand/.dotnet/tools:/mnt/c/Users/ivand/AppData/Roaming/nvm:/mnt/c/Program Files/nodejs:/mnt/c/Users/ivand/AppData/Roaming/npm:/mnt/c/Users/ivand/dev/flutter/bin:/mnt/c/Windows/System32:/mnt/c/Program Files (x86)/NVIDIA Corporation/PhysX/Common:/mnt/c/Program Files/Amazon/AWSCLIV2/:/mnt/c/Program Files/NVIDIA Corporation/Nsight Compute 2024.1.0/:/mnt/c/Program Files/NVIDIA Corporation/NVIDIA NvDLISR:/mnt/c/Program Files (x86)/PowerShell/7/:/mnt/c/Program Files/GitHub CLI/:/mnt/c/Program Files/Docker/Docker/resources/bin:/mnt/c/Program Files/Git/cmd:/mnt/c/Users/ivand/.cargo/bin:/mnt/c/Users/ivand/dev/flutter/bin:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/Scripts/:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/:/mnt/c/Users/ivand/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/ivand/AppData/Local/Programs/Microsoft VS Code/bin:/mnt/c/Users/ivand/.dotnet/tools:/mnt/c/Users/ivand/AppData/Roaming/nvm:/mnt/c/Program Files/nodejs:/mnt/c/Users/ivand/AppData/Roaming/npm:/mnt/c/Windows/System32:/mnt/c/Users/ivand/AppData/Local/Programs/Fiddler:/mnt/c/Users/ivand/AppData/Local/Programs/FFmpeg/bin:/mnt/c/Users/ivand/AppData/Local/Microsoft/WinGet/Packages/Gyan.FFmpeg.Essentials_Microsoft.Winget.Source_8wekyb3d8bbwe/ffmpeg-7.1-essentials_build/bin:/mnt/c/Users/ivand/AppData/Local/GitHubDesktop/bin:/mnt/c/ghcup/bin:/snap/bin"),("PKG_CONFIG","pkg-config"),("PKG_CONFIG_PATH","/nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/lib/pkgconfig:/nix/store/lhyfizga3dmmhvyc51c3j43vw7al5civ-blst-3dd0f80/lib/pkgconfig:/nix/store/rfmswl218z5kvy3zbbfz56m598dpm1d3-libsodium-vrf-dbb48cc-dev/lib/pkgconfig:/nix/store/qmyaa3hqfcjr10c06cv0v1vm28f7r9sq-secp256k1-acf5c55/lib/pkgconfig"),("PS1","\n\\[\\033[1;32m\\][nix-shell:\\w]$\\[\\033[0m\\] "),("PULSE_SERVER","unix:/mnt/wslg/PulseServer"),("PWD","/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain"),("RANLIB","ranlib"),("READELF","readelf"),("SHELL","/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin/bash"),("SHLVL","2"),("SIZE","size"),("SOURCE_DATE_EPOCH","315532800"),("STRINGS","strings"),("STRIP","strip"),("TEMP","/tmp/nix-shell.c97zY4"),("TEMPDIR","/tmp/nix-shell.c97zY4"),("TERM","xterm-256color"),("TERM_PROGRAM","vscode"),("TERM_PROGRAM_VERSION","0.44.11"),("TMP","/tmp/nix-shell.c97zY4"),("TMPDIR","/tmp/nix-shell.c97zY4"),("USER","testubuntu"),("VSCODE_GIT_ASKPASS_EXTRA_ARGS",""),("VSCODE_GIT_ASKPASS_MAIN","/home/testubuntu/.cursor-server/bin/fe574d0820377383143b2ea26aa6ae28b3425220/extensions/git/dist/askpass-main.js"),("VSCODE_GIT_ASKPASS_NODE","/home/testubuntu/.cursor-server/bin/fe574d0820377383143b2ea26aa6ae28b3425220/node"),("VSCODE_GIT_IPC_HANDLE","/run/user/1000/vscode-git-b91ac7136a.sock"),("VSCODE_IPC_HOOK_CLI","/run/user/1000/vscode-ipc-1faa4654-7c6a-498c-91f0-7398d2544310.sock"),("WAYLAND_DISPLAY","wayland-0"),("WSL2_GUI_APPS_ENABLED","1"),("WSLENV","VSCODE_WSL_EXT_LOCATION/up"),("WSL_DISTRO_NAME","Ubuntu"),("WSL_INTEROP","/run/WSL/293_interop"),("XDG_DATA_DIRS","/nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env/share:/nix/store/m21y6qrw4aibjxkfgx77z97wv2my2x05-pkg-config-wrapper-0.29.2/share:/nix/store/dvfb5mrpfhg5211v6pl0a3fmz9idg6w7-patchelf-0.15.0/share:/usr/local/share:/usr/share:/var/lib/snapd/desktop:/home/testubuntu/.nix-profile/share:/nix/var/nix/profiles/default/share"),("XDG_RUNTIME_DIR","/run/user/1000/"),("_","/nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0/bin/cabal"),("__structuredAttrs",""),("allToolDeps","1"),("buildInputs","/nix/store/4f6csghv6ibw8sl14avxa9y98w5grfhc-plutus-core-lib-plutus-core-1.38.0.0 /nix/store/cgbkxikc9lmhjy898ici0kkja9fkhmsl-plutus-ledger-api-lib-plutus-ledger-api-1.38.0.0 /nix/store/nd1ys5yls8kbx1zwm61iy5sl5mxpbgzf-plutus-tx-lib-plutus-tx-1.38.0.0 /nix/store/37sqq1cygksmjrgphh0nzx6b9h5l0i57-plutus-tx-plugin-lib-plutus-tx-plugin-1.38.0.0 /nix/store/62l1alph77x3d051zivy530mpdvkzi7c-pre-commit-4.0.1            /nix/store/0308r9yjafc0hb1z4r34xbhc2sgyna3b-haskell-language-server-exe-haskell-language-server-2.8.0.0 /nix/store/fhf273xpvi9r3kqvd31sv9r8k3gd7qaq-haskell-language-server-exe-haskell-language-server-wrapper-2.8.0.0 /nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0 /nix/store/l85yyds9b2jzv5swfq4hpjwv21dq7ylr-cabal-fmt-exe-cabal-fmt-0.1.12 /nix/store/in4rzg7z6mkblbasxxsg6dik44jkngbj-stylish-haskell-exe-stylish-haskell-0.14.6.0 /nix/store/76k8922p6r0kmxdwwlwnpmszhrd5gh1n-fourmolu-exe-fourmolu-0.16.2.0 /nix/store/zb5p4yk9zifh0vd9bx2j6yln3a4jqkri-hlint-exe-hlint-3.8 /nix/store/d0gwrmmfgnaaandpzp31a5m69wzdn9rs-ghc-9.6.6 /nix/store/fsva5hfgq2mval33wgz4kg5w7a95qhk8-info /nix/store/nlm92v189hfib50sd2d6nhbkdq1myc85-list-flake-outputs"),("buildPhase","{ echo \"------------------------------------------------------------\";\n  echo \" WARNING: the existence of this path is not guaranteed.\";\n  echo \" It is an internal implementation detail for pkgs.mkShell.\";\n  echo \"------------------------------------------------------------\";\n  echo;\n  # Record all build inputs as runtime dependencies\n  export;\n} >> \"$out\"\n"),("builder","/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin/bash"),("cmakeFlags",""),("configureFlags",""),("depsBuildBuild",""),("depsBuildBuildPropagated",""),("depsBuildTarget",""),("depsBuildTargetPropagated",""),("depsHostHost",""),("depsHostHostPropagated",""),("depsTargetTarget",""),("depsTargetTargetPropagated",""),("doCheck",""),("doInstallCheck",""),("dontAddDisableDepTrack","1"),("enableDWARF",""),("exactDeps",""),("installPhase","echo \"Shell for plutus-tx-template\"\necho $nativeBuildInputs $buildInputs > $out\n"),("mesonFlags",""),("name","ghc-shell-for-plutus-tx-template-env"),("nativeBuildInputs","/nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env /nix/store/hf9kfv5vbr68sd89al8zc3z3wgjif225-happy-exe-happy-2.1.3 /nix/store/m21y6qrw4aibjxkfgx77z97wv2my2x05-pkg-config-wrapper-0.29.2"),("out","/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/outputs/out"),("outputs","out"),("packageSetupDeps","1"),("patches",""),("phases","installPhase"),("plutus_tx_template_datadir","/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/././."),("preferLocalBuild","1"),("propagatedBuildInputs",""),("propagatedNativeBuildInputs",""),("shell","/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin/bash"),("shellHook","\n\n\n\nexport PATH=/nix/store/j877rdwz6hk0b4sz4d2blayc35vl4k0d-pre-commit-4.0.1/bin:$PATH\nif ! type -t git >/dev/null; then\n  # This happens in pure shells, including lorri\n  echo 1>&2 \"WARNING: git-hooks.nix: git command not found; skipping installation.\"\nelif ! /nix/store/y7hmnnzxlh57vns0yiyks20803l0qj7r-git-minimal-2.47.0/bin/git rev-parse --git-dir &> /dev/null; then\n  echo 1>&2 \"WARNING: git-hooks.nix: .git not found; skipping installation.\"\nelse\n  GIT_WC=`/nix/store/y7hmnnzxlh57vns0yiyks20803l0qj7r-git-minimal-2.47.0/bin/git rev-parse --show-toplevel`\n\n  # These update procedures compare before they write, to avoid\n  # filesystem churn. This improves performance with watch tools like lorri\n  # and prevents installation loops by lorri.\n\n  if ! readlink \"${GIT_WC}/.pre-commit-config.yaml\" >/dev/null \\\n    || [[ $(readlink \"${GIT_WC}/.pre-commit-config.yaml\") != /nix/store/80fhixivf65s96rwm8j0gg8xlkq07y0h-pre-commit-config.json ]]; then\n    echo 1>&2 \"git-hooks.nix: updating $PWD repo\"\n    [ -L .pre-commit-config.yaml ] && unlink .pre-commit-config.yaml\n\n    if [ -e \"${GIT_WC}/.pre-commit-config.yaml\" ]; then\n      echo 1>&2 \"git-hooks.nix: WARNING: Refusing to install because of pre-existing .pre-commit-config.yaml\"\n      echo 1>&2 \"    1. Translate .pre-commit-config.yaml contents to the new syntax in your Nix file\"\n      echo 1>&2 \"        see https://github.com/cachix/git-hooks.nix#getting-started\"\n      echo 1>&2 \"    2. remove .pre-commit-config.yaml\"\n      echo 1>&2 \"    3. add .pre-commit-config.yaml to .gitignore\"\n    else\n      if true; then\n        nix-store --add-root \"${GIT_WC}/.pre-commit-config.yaml\" --indirect --realise /nix/store/80fhixivf65s96rwm8j0gg8xlkq07y0h-pre-commit-config.json\n      else\n        ln -fs /nix/store/80fhixivf65s96rwm8j0gg8xlkq07y0h-pre-commit-config.json \"${GIT_WC}/.pre-commit-config.yaml\"\n      fi\n      # Remove any previously installed hooks (since pre-commit itself has no convergent design)\n      hooks=\"commit-msg post-checkout post-commit post-merge post-rewrite pre-commit pre-merge-commit pre-push pre-rebase prepare-commit-msg\"\n      for hook in $hooks; do\n        pre-commit uninstall -t $hook\n      done\n      /nix/store/y7hmnnzxlh57vns0yiyks20803l0qj7r-git-minimal-2.47.0/bin/git config --local core.hooksPath \"\"\n      # Add hooks for configured stages (only) ...\n      if [ ! -z \"\" ]; then\n        for stage in ; do\n          case $stage in\n            manual)\n              ;;\n            # if you amend these switches please also review $hooks above\n            commit | merge-commit | push)\n              stage=\"pre-\"$stage\n              pre-commit install -t $stage\n              ;;\n            commit-msg|post-checkout|post-commit|post-merge|post-rewrite|pre-commit|pre-merge-commit|pre-push|pre-rebase|prepare-commit-msg|manual)\n              pre-commit install -t $stage\n              ;;\n            *)\n              echo 1>&2 \"ERROR: git-hooks.nix: either $stage is not a valid stage or git-hooks.nix doesn't yet support it.\"\n              exit 1\n              ;;\n          esac\n        done\n      # ... or default 'pre-commit' hook\n      else\n        pre-commit install\n      fi\n\n      # Fetch the absolute path to the git common directory. This will normally point to $GIT_WC/.git.\n      common_dir=$(/nix/store/y7hmnnzxlh57vns0yiyks20803l0qj7r-git-minimal-2.47.0/bin/git rev-parse --path-format=absolute --git-common-dir)\n\n      # Convert the absolute path to a path relative to the toplevel working directory.\n      common_dir=${common_dir#$GIT_WC/}\n\n      /nix/store/y7hmnnzxlh57vns0yiyks20803l0qj7r-git-minimal-2.47.0/bin/git config --local core.hooksPath \"$common_dir/hooks\"\n    fi\n  fi\nfi\n\n\n\n\nexport PS1=\"\n\\[\\033[1;32m\\][nix-shell:\\w]\\$\\[\\033[0m\\] \"\necho \nprintf \"\129311 \\033[1;31mWelcome to nix-shell\\033[0m \129311\"\necho\necho\necho \"Type 'info' to see what's inside this shell.\"\n\n\nexport LOCALE_ARCHIVE=\"/nix/store/px8cvmxycca75kfbk5w4anlnqkbip773-glibc-locales-2.40-36/lib/locale/locale-archive\"\n"),("stdenv","/nix/store/ncv68hjnidcd2bm5abkhklrijhn0cgn6-stdenv-linux"),("strictDeps",""),("system","x86_64-linux"),("withHaddock","")]
GHC package manager version 9.6.6
writing cache /home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/package.conf.inplace/package.cache
creating
/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame
creating
/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame/autogen
creating
/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame/autogen
creating
/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame/autogen
creating
/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame/autogen
Preprocessing library 'CoinFlipGame' for plutus-tx-template-0.6.0.0...
creating
/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame
creating
/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame
Wanted build ways: [StaticWay,DynWay]
Running: /nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env/bin/ghc --interactive -fbuilding-cabal-package -O0 -outputdir /home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame -odir /home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame -hidir /home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame -hiedir /home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame/extra-compilation-artifacts/hie -stubdir /home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame -i -isrc -i/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame -i/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame/autogen -i/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/global-autogen -I/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame/autogen -I/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/global-autogen -I/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame -optP-include -optP/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame/autogen/cabal_macros.h -this-unit-id plutus-tx-template-0.6.0.0-inplace-CoinFlipGame -hide-all-packages -Wmissing-home-modules -no-user-package-db -package-db /home/testubuntu/.local/state/cabal/store/ghc-9.6.6/package.db -package-db /home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/packagedb/ghc-9.6.6 -package-db /home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/package.conf.inplace -package-id base-4.18.2.1 -package-id plutus-core-1.38.0.0-LP27REH8m20HZef9XDK9Ue -package-id plutus-ledger-api-1.38.0.0-329oGVIQN5t6kv9LGM5pSR -package-id plutus-tx-1.38.0.0-1SaqmCdyiCu4HE6yL0Prz7 -package-id plutus-tx-plugin-1.38.0.0-4Y1vGYEZewxADslwiNBTcs -XHaskell2010 NFTThree -Wall -hide-all-packages
with environment: [("AR","ar"),("AS","as"),("CC","gcc"),("COLORTERM","truecolor"),("CONFIG_SHELL","/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin/bash"),("CXX","g++"),("DBUS_SESSION_BUS_ADDRESS","unix:path=/run/user/1000/bus"),("DISPLAY",":0"),("GIT_ASKPASS","/home/testubuntu/.cursor-server/bin/fe574d0820377383143b2ea26aa6ae28b3425220/extensions/git/dist/askpass.sh"),("HASKELL_DIST_DIR","/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame"),("HOME","/home/testubuntu"),("HOSTTYPE","x86_64"),("HOST_PATH","/nix/store/53iigsmf32bwkfdhhihq2rppgk23k2rg-ncurses-6.4.20221231/bin:/nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/bin:/nix/store/v0vz45j6v084rcvfhzfmf7vjqd12lc1l-numactl-2.0.18/bin:/nix/store/62l1alph77x3d051zivy530mpdvkzi7c-pre-commit-4.0.1/bin:/nix/store/0308r9yjafc0hb1z4r34xbhc2sgyna3b-haskell-language-server-exe-haskell-language-server-2.8.0.0/bin:/nix/store/fhf273xpvi9r3kqvd31sv9r8k3gd7qaq-haskell-language-server-exe-haskell-language-server-wrapper-2.8.0.0/bin:/nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0/bin:/nix/store/l85yyds9b2jzv5swfq4hpjwv21dq7ylr-cabal-fmt-exe-cabal-fmt-0.1.12/bin:/nix/store/in4rzg7z6mkblbasxxsg6dik44jkngbj-stylish-haskell-exe-stylish-haskell-0.14.6.0/bin:/nix/store/76k8922p6r0kmxdwwlwnpmszhrd5gh1n-fourmolu-exe-fourmolu-0.16.2.0/bin:/nix/store/zb5p4yk9zifh0vd9bx2j6yln3a4jqkri-hlint-exe-hlint-3.8/bin:/nix/store/d0gwrmmfgnaaandpzp31a5m69wzdn9rs-ghc-9.6.6/bin:/nix/store/fsva5hfgq2mval33wgz4kg5w7a95qhk8-info/bin:/nix/store/nlm92v189hfib50sd2d6nhbkdq1myc85-list-flake-outputs/bin:/nix/store/ph44jcx3ddmlwh394mh1wb7f1qigxqb1-coreutils-9.5/bin:/nix/store/yb8icljkwhk5lla4nci3myndq2m4ywly-findutils-4.10.0/bin:/nix/store/phqahkhjsk8sl2jjiid1d47l2s4wy33h-diffutils-3.10/bin:/nix/store/yd9vbyhbxx62j0cyhd6v0iacz11nxpvc-gnused-4.9/bin:/nix/store/lvnwdmnjm7nvaq0a3vhvvn46iy4ql7gr-gnugrep-3.11/bin:/nix/store/0np7q7np75csai2cwzx57n332vn9ig4i-gawk-5.2.2/bin:/nix/store/zvn9bvrl2g516d2hfnanljiw24qa6w8l-gnutar-1.35/bin:/nix/store/db379c3zrmncmbv5khqxpk6ggbhxjw61-gzip-1.13/bin:/nix/store/girfp68w14pxfii52ak8gcs212y4q2s2-bzip2-1.0.8-bin/bin:/nix/store/21y3gqgm2a3w94m0wcrz1xxshks80z7p-gnumake-4.4.1/bin:/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin:/nix/store/91ixz3zw9ipc5j93gybir9fp5mzisq8w-patch-2.7.6/bin:/nix/store/6v73xwg2c7p5ap29ckyg18ng87pzlnxs-xz-5.6.2-bin/bin:/nix/store/a6nsbir3y5ni3wwkw933aqvcmyyywnnz-file-5.45/bin"),("IN_NIX_SHELL","impure"),("LANG","C.UTF-8"),("LD","ld"),("LESSCLOSE","/usr/bin/lesspipe %s %s"),("LESSOPEN","| /usr/bin/lesspipe %s"),("LOCALE_ARCHIVE","/nix/store/px8cvmxycca75kfbk5w4anlnqkbip773-glibc-locales-2.40-36/lib/locale/locale-archive"),("LOGNAME","testubuntu"),("LS_COLORS","rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:"),("NAME","COLOUSALSHIP"),("NIX_BINTOOLS","/nix/store/l7n97992gd5piaw8phkxzsz176gfk1yj-binutils-wrapper-2.43.1"),("NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu","1"),("NIX_BUILD_CORES","20"),("NIX_BUILD_TOP","/tmp/nix-shell.c97zY4"),("NIX_CC","/nix/store/vh9fsdhgxcnab2qk7vdp2palkkn6j3cp-gcc-wrapper-13.3.0"),("NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu","1"),("NIX_CFLAGS_COMPILE"," -frandom-seed=wnnx251x2n -isystem /nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/include -isystem /nix/store/lhyfizga3dmmhvyc51c3j43vw7al5civ-blst-3dd0f80/include -isystem /nix/store/rfmswl218z5kvy3zbbfz56m598dpm1d3-libsodium-vrf-dbb48cc-dev/include -isystem /nix/store/qmyaa3hqfcjr10c06cv0v1vm28f7r9sq-secp256k1-acf5c55/include -isystem /nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/include -isystem /nix/store/lhyfizga3dmmhvyc51c3j43vw7al5civ-blst-3dd0f80/include -isystem /nix/store/rfmswl218z5kvy3zbbfz56m598dpm1d3-libsodium-vrf-dbb48cc-dev/include -isystem /nix/store/qmyaa3hqfcjr10c06cv0v1vm28f7r9sq-secp256k1-acf5c55/include"),("NIX_ENFORCE_NO_NATIVE","1"),("NIX_GCROOT","/nix/store/wnnx251x2n46gl7f5dwmjia3rj6jrnfr-ghc-shell-for-plutus-tx-template-env"),("NIX_GHC_LIBDIR","/nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env/lib/ghc-9.6.6/lib"),("NIX_HARDENING_ENABLE","bindnow format fortify fortify3 pic relro stackprotector strictoverflow zerocallusedregs"),("NIX_LDFLAGS","-rpath /home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/outputs/out/lib  -L/nix/store/53iigsmf32bwkfdhhihq2rppgk23k2rg-ncurses-6.4.20221231/lib -L/nix/store/pmf31rbzvv618qirwmzppjb63wsrl4zi-libffi-3.4.6/lib -L/nix/store/y54504sbwlbbm14hkvv48yw4smjw649c-gmp-with-cxx-6.3.0/lib -L/nix/store/v0vz45j6v084rcvfhzfmf7vjqd12lc1l-numactl-2.0.18/lib -L/nix/store/lhyfizga3dmmhvyc51c3j43vw7al5civ-blst-3dd0f80/lib -L/nix/store/r6f360gfrjyqsaxhxnqpr49vdbwzg2jv-libsodium-vrf-dbb48cc/lib -L/nix/store/qmyaa3hqfcjr10c06cv0v1vm28f7r9sq-secp256k1-acf5c55/lib -L/nix/store/53iigsmf32bwkfdhhihq2rppgk23k2rg-ncurses-6.4.20221231/lib -L/nix/store/pmf31rbzvv618qirwmzppjb63wsrl4zi-libffi-3.4.6/lib -L/nix/store/y54504sbwlbbm14hkvv48yw4smjw649c-gmp-with-cxx-6.3.0/lib -L/nix/store/v0vz45j6v084rcvfhzfmf7vjqd12lc1l-numactl-2.0.18/lib -L/nix/store/lhyfizga3dmmhvyc51c3j43vw7al5civ-blst-3dd0f80/lib -L/nix/store/r6f360gfrjyqsaxhxnqpr49vdbwzg2jv-libsodium-vrf-dbb48cc/lib -L/nix/store/qmyaa3hqfcjr10c06cv0v1vm28f7r9sq-secp256k1-acf5c55/lib"),("NIX_PKG_CONFIG_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu","1"),("NIX_PROFILES","/nix/var/nix/profiles/default /home/testubuntu/.nix-profile"),("NIX_SSL_CERT_FILE","/etc/ssl/certs/ca-certificates.crt"),("NIX_STORE","/nix/store"),("NM","nm"),("NVM_BIN","/home/testubuntu/.nvm/versions/node/v22.9.0/bin"),("NVM_CD_FLAGS",""),("NVM_DIR","/home/testubuntu/.nvm"),("NVM_INC","/home/testubuntu/.nvm/versions/node/v22.9.0/include/node"),("OBJCOPY","objcopy"),("OBJDUMP","objdump"),("OLDPWD",""),("PATH","/nix/store/j877rdwz6hk0b4sz4d2blayc35vl4k0d-pre-commit-4.0.1/bin:/nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env/bin:/nix/store/hf9kfv5vbr68sd89al8zc3z3wgjif225-happy-exe-happy-2.1.3/bin:/nix/store/m21y6qrw4aibjxkfgx77z97wv2my2x05-pkg-config-wrapper-0.29.2/bin:/nix/store/dvfb5mrpfhg5211v6pl0a3fmz9idg6w7-patchelf-0.15.0/bin:/nix/store/vh9fsdhgxcnab2qk7vdp2palkkn6j3cp-gcc-wrapper-13.3.0/bin:/nix/store/0vsyw5bhwmisszyfd1a0sdnwvnf4qa5a-gcc-13.3.0/bin:/nix/store/vpsla1ivhavzd4fmi95yzmgb4g9rd072-glibc-2.40-36-bin/bin:/nix/store/ph44jcx3ddmlwh394mh1wb7f1qigxqb1-coreutils-9.5/bin:/nix/store/l7n97992gd5piaw8phkxzsz176gfk1yj-binutils-wrapper-2.43.1/bin:/nix/store/vcvhwiilizhijk7ywyn58p9l005n9sbn-binutils-2.43.1/bin:/nix/store/53iigsmf32bwkfdhhihq2rppgk23k2rg-ncurses-6.4.20221231/bin:/nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/bin:/nix/store/v0vz45j6v084rcvfhzfmf7vjqd12lc1l-numactl-2.0.18/bin:/nix/store/62l1alph77x3d051zivy530mpdvkzi7c-pre-commit-4.0.1/bin:/nix/store/0308r9yjafc0hb1z4r34xbhc2sgyna3b-haskell-language-server-exe-haskell-language-server-2.8.0.0/bin:/nix/store/fhf273xpvi9r3kqvd31sv9r8k3gd7qaq-haskell-language-server-exe-haskell-language-server-wrapper-2.8.0.0/bin:/nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0/bin:/nix/store/l85yyds9b2jzv5swfq4hpjwv21dq7ylr-cabal-fmt-exe-cabal-fmt-0.1.12/bin:/nix/store/in4rzg7z6mkblbasxxsg6dik44jkngbj-stylish-haskell-exe-stylish-haskell-0.14.6.0/bin:/nix/store/76k8922p6r0kmxdwwlwnpmszhrd5gh1n-fourmolu-exe-fourmolu-0.16.2.0/bin:/nix/store/zb5p4yk9zifh0vd9bx2j6yln3a4jqkri-hlint-exe-hlint-3.8/bin:/nix/store/d0gwrmmfgnaaandpzp31a5m69wzdn9rs-ghc-9.6.6/bin:/nix/store/fsva5hfgq2mval33wgz4kg5w7a95qhk8-info/bin:/nix/store/nlm92v189hfib50sd2d6nhbkdq1myc85-list-flake-outputs/bin:/nix/store/ph44jcx3ddmlwh394mh1wb7f1qigxqb1-coreutils-9.5/bin:/nix/store/yb8icljkwhk5lla4nci3myndq2m4ywly-findutils-4.10.0/bin:/nix/store/phqahkhjsk8sl2jjiid1d47l2s4wy33h-diffutils-3.10/bin:/nix/store/yd9vbyhbxx62j0cyhd6v0iacz11nxpvc-gnused-4.9/bin:/nix/store/lvnwdmnjm7nvaq0a3vhvvn46iy4ql7gr-gnugrep-3.11/bin:/nix/store/0np7q7np75csai2cwzx57n332vn9ig4i-gawk-5.2.2/bin:/nix/store/zvn9bvrl2g516d2hfnanljiw24qa6w8l-gnutar-1.35/bin:/nix/store/db379c3zrmncmbv5khqxpk6ggbhxjw61-gzip-1.13/bin:/nix/store/girfp68w14pxfii52ak8gcs212y4q2s2-bzip2-1.0.8-bin/bin:/nix/store/21y3gqgm2a3w94m0wcrz1xxshks80z7p-gnumake-4.4.1/bin:/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin:/nix/store/91ixz3zw9ipc5j93gybir9fp5mzisq8w-patch-2.7.6/bin:/nix/store/6v73xwg2c7p5ap29ckyg18ng87pzlnxs-xz-5.6.2-bin/bin:/nix/store/a6nsbir3y5ni3wwkw933aqvcmyyywnnz-file-5.45/bin:/home/testubuntu/.cursor-server/bin/fe574d0820377383143b2ea26aa6ae28b3425220/bin/remote-cli:/home/testubuntu/.nix-profile/bin:/home/testubuntu/.nvm/versions/node/v22.9.0/bin:/home/testubuntu/.cabal/bin:/home/testubuntu/.ghcup/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/Program Files (x86)/Common Files/Oracle/Java/java8path:/mnt/c/Program Files (x86)/Common Files/Oracle/Java/javapath:/mnt/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.4/bin:/mnt/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.4/libnvvp:/mnt/c/Users/ivand/.cargo/bin:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/Scripts/:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/:/mnt/c/Users/ivand/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/ivand/AppData/Local/Programs/Microsoft VS Code/bin:/mnt/c/Users/ivand/.dotnet/tools:/mnt/c/Users/ivand/AppData/Roaming/nvm:/mnt/c/Program Files/nodejs:/mnt/c/Users/ivand/AppData/Roaming/npm:/mnt/c/Users/ivand/dev/flutter/bin:/mnt/c/Windows/System32:/mnt/c/Program Files (x86)/NVIDIA Corporation/PhysX/Common:/mnt/c/Program Files/Amazon/AWSCLIV2/:/mnt/c/Program Files/NVIDIA Corporation/Nsight Compute 2024.1.0/:/mnt/c/Program Files/NVIDIA Corporation/NVIDIA NvDLISR:/mnt/c/Program Files (x86)/PowerShell/7/:/mnt/c/Program Files/GitHub CLI/:/mnt/c/Program Files/Docker/Docker/resources/bin:/mnt/c/Program Files/Git/cmd:/mnt/c/Users/ivand/.cargo/bin:/mnt/c/Users/ivand/dev/flutter/bin:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/Scripts/:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/:/mnt/c/Users/ivand/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/ivand/AppData/Local/Programs/Microsoft VS Code/bin:/mnt/c/Users/ivand/.dotnet/tools:/mnt/c/Users/ivand/AppData/Roaming/nvm:/mnt/c/Program Files/nodejs:/mnt/c/Users/ivand/AppData/Roaming/npm:/mnt/c/Windows/System32:/mnt/c/Users/ivand/AppData/Local/Programs/Fiddler:/mnt/c/Users/ivand/AppData/Local/Programs/FFmpeg/bin:/mnt/c/Users/ivand/AppData/Local/Microsoft/WinGet/Packages/Gyan.FFmpeg.Essentials_Microsoft.Winget.Source_8wekyb3d8bbwe/ffmpeg-7.1-essentials_build/bin:/mnt/c/Users/ivand/AppData/Local/GitHubDesktop/bin:/mnt/c/ghcup/bin:/snap/bin:/nix/store/j877rdwz6hk0b4sz4d2blayc35vl4k0d-pre-commit-4.0.1/bin:/nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env/bin:/nix/store/hf9kfv5vbr68sd89al8zc3z3wgjif225-happy-exe-happy-2.1.3/bin:/nix/store/m21y6qrw4aibjxkfgx77z97wv2my2x05-pkg-config-wrapper-0.29.2/bin:/nix/store/dvfb5mrpfhg5211v6pl0a3fmz9idg6w7-patchelf-0.15.0/bin:/nix/store/vh9fsdhgxcnab2qk7vdp2palkkn6j3cp-gcc-wrapper-13.3.0/bin:/nix/store/0vsyw5bhwmisszyfd1a0sdnwvnf4qa5a-gcc-13.3.0/bin:/nix/store/vpsla1ivhavzd4fmi95yzmgb4g9rd072-glibc-2.40-36-bin/bin:/nix/store/ph44jcx3ddmlwh394mh1wb7f1qigxqb1-coreutils-9.5/bin:/nix/store/l7n97992gd5piaw8phkxzsz176gfk1yj-binutils-wrapper-2.43.1/bin:/nix/store/vcvhwiilizhijk7ywyn58p9l005n9sbn-binutils-2.43.1/bin:/nix/store/53iigsmf32bwkfdhhihq2rppgk23k2rg-ncurses-6.4.20221231/bin:/nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/bin:/nix/store/v0vz45j6v084rcvfhzfmf7vjqd12lc1l-numactl-2.0.18/bin:/nix/store/62l1alph77x3d051zivy530mpdvkzi7c-pre-commit-4.0.1/bin:/nix/store/0308r9yjafc0hb1z4r34xbhc2sgyna3b-haskell-language-server-exe-haskell-language-server-2.8.0.0/bin:/nix/store/fhf273xpvi9r3kqvd31sv9r8k3gd7qaq-haskell-language-server-exe-haskell-language-server-wrapper-2.8.0.0/bin:/nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0/bin:/nix/store/l85yyds9b2jzv5swfq4hpjwv21dq7ylr-cabal-fmt-exe-cabal-fmt-0.1.12/bin:/nix/store/in4rzg7z6mkblbasxxsg6dik44jkngbj-stylish-haskell-exe-stylish-haskell-0.14.6.0/bin:/nix/store/76k8922p6r0kmxdwwlwnpmszhrd5gh1n-fourmolu-exe-fourmolu-0.16.2.0/bin:/nix/store/zb5p4yk9zifh0vd9bx2j6yln3a4jqkri-hlint-exe-hlint-3.8/bin:/nix/store/d0gwrmmfgnaaandpzp31a5m69wzdn9rs-ghc-9.6.6/bin:/nix/store/fsva5hfgq2mval33wgz4kg5w7a95qhk8-info/bin:/nix/store/nlm92v189hfib50sd2d6nhbkdq1myc85-list-flake-outputs/bin:/nix/store/ph44jcx3ddmlwh394mh1wb7f1qigxqb1-coreutils-9.5/bin:/nix/store/yb8icljkwhk5lla4nci3myndq2m4ywly-findutils-4.10.0/bin:/nix/store/phqahkhjsk8sl2jjiid1d47l2s4wy33h-diffutils-3.10/bin:/nix/store/yd9vbyhbxx62j0cyhd6v0iacz11nxpvc-gnused-4.9/bin:/nix/store/lvnwdmnjm7nvaq0a3vhvvn46iy4ql7gr-gnugrep-3.11/bin:/nix/store/0np7q7np75csai2cwzx57n332vn9ig4i-gawk-5.2.2/bin:/nix/store/zvn9bvrl2g516d2hfnanljiw24qa6w8l-gnutar-1.35/bin:/nix/store/db379c3zrmncmbv5khqxpk6ggbhxjw61-gzip-1.13/bin:/nix/store/girfp68w14pxfii52ak8gcs212y4q2s2-bzip2-1.0.8-bin/bin:/nix/store/21y3gqgm2a3w94m0wcrz1xxshks80z7p-gnumake-4.4.1/bin:/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin:/nix/store/91ixz3zw9ipc5j93gybir9fp5mzisq8w-patch-2.7.6/bin:/nix/store/6v73xwg2c7p5ap29ckyg18ng87pzlnxs-xz-5.6.2-bin/bin:/nix/store/a6nsbir3y5ni3wwkw933aqvcmyyywnnz-file-5.45/bin:/home/testubuntu/.cursor-server/bin/fe574d0820377383143b2ea26aa6ae28b3425220/bin/remote-cli:/home/testubuntu/.nix-profile/bin:/home/testubuntu/.nvm/versions/node/v22.9.0/bin:/home/testubuntu/.cabal/bin:/home/testubuntu/.ghcup/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/Program Files (x86)/Common Files/Oracle/Java/java8path:/mnt/c/Program Files (x86)/Common Files/Oracle/Java/javapath:/mnt/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.4/bin:/mnt/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.4/libnvvp:/mnt/c/Users/ivand/.cargo/bin:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/Scripts/:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/:/mnt/c/Users/ivand/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/ivand/AppData/Local/Programs/Microsoft VS Code/bin:/mnt/c/Users/ivand/.dotnet/tools:/mnt/c/Users/ivand/AppData/Roaming/nvm:/mnt/c/Program Files/nodejs:/mnt/c/Users/ivand/AppData/Roaming/npm:/mnt/c/Users/ivand/dev/flutter/bin:/mnt/c/Windows/System32:/mnt/c/Program Files (x86)/NVIDIA Corporation/PhysX/Common:/mnt/c/Program Files/Amazon/AWSCLIV2/:/mnt/c/Program Files/NVIDIA Corporation/Nsight Compute 2024.1.0/:/mnt/c/Program Files/NVIDIA Corporation/NVIDIA NvDLISR:/mnt/c/Program Files (x86)/PowerShell/7/:/mnt/c/Program Files/GitHub CLI/:/mnt/c/Program Files/Docker/Docker/resources/bin:/mnt/c/Program Files/Git/cmd:/mnt/c/Users/ivand/.cargo/bin:/mnt/c/Users/ivand/dev/flutter/bin:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/Scripts/:/mnt/c/Users/ivand/AppData/Local/Programs/Python/Python310/:/mnt/c/Users/ivand/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/ivand/AppData/Local/Programs/Microsoft VS Code/bin:/mnt/c/Users/ivand/.dotnet/tools:/mnt/c/Users/ivand/AppData/Roaming/nvm:/mnt/c/Program Files/nodejs:/mnt/c/Users/ivand/AppData/Roaming/npm:/mnt/c/Windows/System32:/mnt/c/Users/ivand/AppData/Local/Programs/Fiddler:/mnt/c/Users/ivand/AppData/Local/Programs/FFmpeg/bin:/mnt/c/Users/ivand/AppData/Local/Microsoft/WinGet/Packages/Gyan.FFmpeg.Essentials_Microsoft.Winget.Source_8wekyb3d8bbwe/ffmpeg-7.1-essentials_build/bin:/mnt/c/Users/ivand/AppData/Local/GitHubDesktop/bin:/mnt/c/ghcup/bin:/snap/bin"),("PKG_CONFIG","pkg-config"),("PKG_CONFIG_PATH","/nix/store/7r54fsha32821fj45j4d8v8fcsnn0wqc-ncurses-6.4.20221231-dev/lib/pkgconfig:/nix/store/lhyfizga3dmmhvyc51c3j43vw7al5civ-blst-3dd0f80/lib/pkgconfig:/nix/store/rfmswl218z5kvy3zbbfz56m598dpm1d3-libsodium-vrf-dbb48cc-dev/lib/pkgconfig:/nix/store/qmyaa3hqfcjr10c06cv0v1vm28f7r9sq-secp256k1-acf5c55/lib/pkgconfig"),("PS1","\n\\[\\033[1;32m\\][nix-shell:\\w]$\\[\\033[0m\\] "),("PULSE_SERVER","unix:/mnt/wslg/PulseServer"),("PWD","/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain"),("RANLIB","ranlib"),("READELF","readelf"),("SHELL","/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin/bash"),("SHLVL","2"),("SIZE","size"),("SOURCE_DATE_EPOCH","315532800"),("STRINGS","strings"),("STRIP","strip"),("TEMP","/tmp/nix-shell.c97zY4"),("TEMPDIR","/tmp/nix-shell.c97zY4"),("TERM","xterm-256color"),("TERM_PROGRAM","vscode"),("TERM_PROGRAM_VERSION","0.44.11"),("TMP","/tmp/nix-shell.c97zY4"),("TMPDIR","/tmp/nix-shell.c97zY4"),("USER","testubuntu"),("VSCODE_GIT_ASKPASS_EXTRA_ARGS",""),("VSCODE_GIT_ASKPASS_MAIN","/home/testubuntu/.cursor-server/bin/fe574d0820377383143b2ea26aa6ae28b3425220/extensions/git/dist/askpass-main.js"),("VSCODE_GIT_ASKPASS_NODE","/home/testubuntu/.cursor-server/bin/fe574d0820377383143b2ea26aa6ae28b3425220/node"),("VSCODE_GIT_IPC_HANDLE","/run/user/1000/vscode-git-b91ac7136a.sock"),("VSCODE_IPC_HOOK_CLI","/run/user/1000/vscode-ipc-1faa4654-7c6a-498c-91f0-7398d2544310.sock"),("WAYLAND_DISPLAY","wayland-0"),("WSL2_GUI_APPS_ENABLED","1"),("WSLENV","VSCODE_WSL_EXT_LOCATION/up"),("WSL_DISTRO_NAME","Ubuntu"),("WSL_INTEROP","/run/WSL/293_interop"),("XDG_DATA_DIRS","/nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env/share:/nix/store/m21y6qrw4aibjxkfgx77z97wv2my2x05-pkg-config-wrapper-0.29.2/share:/nix/store/dvfb5mrpfhg5211v6pl0a3fmz9idg6w7-patchelf-0.15.0/share:/usr/local/share:/usr/share:/var/lib/snapd/desktop:/home/testubuntu/.nix-profile/share:/nix/var/nix/profiles/default/share"),("XDG_RUNTIME_DIR","/run/user/1000/"),("_","/nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0/bin/cabal"),("__structuredAttrs",""),("allToolDeps","1"),("buildInputs","/nix/store/4f6csghv6ibw8sl14avxa9y98w5grfhc-plutus-core-lib-plutus-core-1.38.0.0 /nix/store/cgbkxikc9lmhjy898ici0kkja9fkhmsl-plutus-ledger-api-lib-plutus-ledger-api-1.38.0.0 /nix/store/nd1ys5yls8kbx1zwm61iy5sl5mxpbgzf-plutus-tx-lib-plutus-tx-1.38.0.0 /nix/store/37sqq1cygksmjrgphh0nzx6b9h5l0i57-plutus-tx-plugin-lib-plutus-tx-plugin-1.38.0.0 /nix/store/62l1alph77x3d051zivy530mpdvkzi7c-pre-commit-4.0.1            /nix/store/0308r9yjafc0hb1z4r34xbhc2sgyna3b-haskell-language-server-exe-haskell-language-server-2.8.0.0 /nix/store/fhf273xpvi9r3kqvd31sv9r8k3gd7qaq-haskell-language-server-exe-haskell-language-server-wrapper-2.8.0.0 /nix/store/3kbxf87c3qqii7y1kvdcxrybxvsi0cr4-cabal-install-exe-cabal-3.12.1.0 /nix/store/l85yyds9b2jzv5swfq4hpjwv21dq7ylr-cabal-fmt-exe-cabal-fmt-0.1.12 /nix/store/in4rzg7z6mkblbasxxsg6dik44jkngbj-stylish-haskell-exe-stylish-haskell-0.14.6.0 /nix/store/76k8922p6r0kmxdwwlwnpmszhrd5gh1n-fourmolu-exe-fourmolu-0.16.2.0 /nix/store/zb5p4yk9zifh0vd9bx2j6yln3a4jqkri-hlint-exe-hlint-3.8 /nix/store/d0gwrmmfgnaaandpzp31a5m69wzdn9rs-ghc-9.6.6 /nix/store/fsva5hfgq2mval33wgz4kg5w7a95qhk8-info /nix/store/nlm92v189hfib50sd2d6nhbkdq1myc85-list-flake-outputs"),("buildPhase","{ echo \"------------------------------------------------------------\";\n  echo \" WARNING: the existence of this path is not guaranteed.\";\n  echo \" It is an internal implementation detail for pkgs.mkShell.\";\n  echo \"------------------------------------------------------------\";\n  echo;\n  # Record all build inputs as runtime dependencies\n  export;\n} >> \"$out\"\n"),("builder","/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin/bash"),("cmakeFlags",""),("configureFlags",""),("depsBuildBuild",""),("depsBuildBuildPropagated",""),("depsBuildTarget",""),("depsBuildTargetPropagated",""),("depsHostHost",""),("depsHostHostPropagated",""),("depsTargetTarget",""),("depsTargetTargetPropagated",""),("doCheck",""),("doInstallCheck",""),("dontAddDisableDepTrack","1"),("enableDWARF",""),("exactDeps",""),("installPhase","echo \"Shell for plutus-tx-template\"\necho $nativeBuildInputs $buildInputs > $out\n"),("mesonFlags",""),("name","ghc-shell-for-plutus-tx-template-env"),("nativeBuildInputs","/nix/store/5fc2hpq4rqv8hjw03cwx1ml6bfr43pcn-ghc-shell-for-plutus-tx-template-ghc-9.6.6-env /nix/store/hf9kfv5vbr68sd89al8zc3z3wgjif225-happy-exe-happy-2.1.3 /nix/store/m21y6qrw4aibjxkfgx77z97wv2my2x05-pkg-config-wrapper-0.29.2"),("out","/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/outputs/out"),("outputs","out"),("packageSetupDeps","1"),("patches",""),("phases","installPhase"),("plutus_tx_template_datadir","/home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/././."),("preferLocalBuild","1"),("propagatedBuildInputs",""),("propagatedNativeBuildInputs",""),("shell","/nix/store/717iy55ncqs0wmhdkwc5fg2vci5wbmq8-bash-5.2p32/bin/bash"),("shellHook","\n\n\n\nexport PATH=/nix/store/j877rdwz6hk0b4sz4d2blayc35vl4k0d-pre-commit-4.0.1/bin:$PATH\nif ! type -t git >/dev/null; then\n  # This happens in pure shells, including lorri\n  echo 1>&2 \"WARNING: git-hooks.nix: git command not found; skipping installation.\"\nelif ! /nix/store/y7hmnnzxlh57vns0yiyks20803l0qj7r-git-minimal-2.47.0/bin/git rev-parse --git-dir &> /dev/null; then\n  echo 1>&2 \"WARNING: git-hooks.nix: .git not found; skipping installation.\"\nelse\n  GIT_WC=`/nix/store/y7hmnnzxlh57vns0yiyks20803l0qj7r-git-minimal-2.47.0/bin/git rev-parse --show-toplevel`\n\n  # These update procedures compare before they write, to avoid\n  # filesystem churn. This improves performance with watch tools like lorri\n  # and prevents installation loops by lorri.\n\n  if ! readlink \"${GIT_WC}/.pre-commit-config.yaml\" >/dev/null \\\n    || [[ $(readlink \"${GIT_WC}/.pre-commit-config.yaml\") != /nix/store/80fhixivf65s96rwm8j0gg8xlkq07y0h-pre-commit-config.json ]]; then\n    echo 1>&2 \"git-hooks.nix: updating $PWD repo\"\n    [ -L .pre-commit-config.yaml ] && unlink .pre-commit-config.yaml\n\n    if [ -e \"${GIT_WC}/.pre-commit-config.yaml\" ]; then\n      echo 1>&2 \"git-hooks.nix: WARNING: Refusing to install because of pre-existing .pre-commit-config.yaml\"\n      echo 1>&2 \"    1. Translate .pre-commit-config.yaml contents to the new syntax in your Nix file\"\n      echo 1>&2 \"        see https://github.com/cachix/git-hooks.nix#getting-started\"\n      echo 1>&2 \"    2. remove .pre-commit-config.yaml\"\n      echo 1>&2 \"    3. add .pre-commit-config.yaml to .gitignore\"\n    else\n      if true; then\n        nix-store --add-root \"${GIT_WC}/.pre-commit-config.yaml\" --indirect --realise /nix/store/80fhixivf65s96rwm8j0gg8xlkq07y0h-pre-commit-config.json\n      else\n        ln -fs /nix/store/80fhixivf65s96rwm8j0gg8xlkq07y0h-pre-commit-config.json \"${GIT_WC}/.pre-commit-config.yaml\"\n      fi\n      # Remove any previously installed hooks (since pre-commit itself has no convergent design)\n      hooks=\"commit-msg post-checkout post-commit post-merge post-rewrite pre-commit pre-merge-commit pre-push pre-rebase prepare-commit-msg\"\n      for hook in $hooks; do\n        pre-commit uninstall -t $hook\n      done\n      /nix/store/y7hmnnzxlh57vns0yiyks20803l0qj7r-git-minimal-2.47.0/bin/git config --local core.hooksPath \"\"\n      # Add hooks for configured stages (only) ...\n      if [ ! -z \"\" ]; then\n        for stage in ; do\n          case $stage in\n            manual)\n              ;;\n            # if you amend these switches please also review $hooks above\n            commit | merge-commit | push)\n              stage=\"pre-\"$stage\n              pre-commit install -t $stage\n              ;;\n            commit-msg|post-checkout|post-commit|post-merge|post-rewrite|pre-commit|pre-merge-commit|pre-push|pre-rebase|prepare-commit-msg|manual)\n              pre-commit install -t $stage\n              ;;\n            *)\n              echo 1>&2 \"ERROR: git-hooks.nix: either $stage is not a valid stage or git-hooks.nix doesn't yet support it.\"\n              exit 1\n              ;;\n          esac\n        done\n      # ... or default 'pre-commit' hook\n      else\n        pre-commit install\n      fi\n\n      # Fetch the absolute path to the git common directory. This will normally point to $GIT_WC/.git.\n      common_dir=$(/nix/store/y7hmnnzxlh57vns0yiyks20803l0qj7r-git-minimal-2.47.0/bin/git rev-parse --path-format=absolute --git-common-dir)\n\n      # Convert the absolute path to a path relative to the toplevel working directory.\n      common_dir=${common_dir#$GIT_WC/}\n\n      /nix/store/y7hmnnzxlh57vns0yiyks20803l0qj7r-git-minimal-2.47.0/bin/git config --local core.hooksPath \"$common_dir/hooks\"\n    fi\n  fi\nfi\n\n\n\n\nexport PS1=\"\n\\[\\033[1;32m\\][nix-shell:\\w]\\$\\[\\033[0m\\] \"\necho \nprintf \"\129311 \\033[1;31mWelcome to nix-shell\\033[0m \129311\"\necho\necho\necho \"Type 'info' to see what's inside this shell.\"\n\n\nexport LOCALE_ARCHIVE=\"/nix/store/px8cvmxycca75kfbk5w4anlnqkbip773-glibc-locales-2.40-36/lib/locale/locale-archive\"\n"),("stdenv","/nix/store/ncv68hjnidcd2bm5abkhklrijhn0cgn6-stdenv-linux"),("strictDeps",""),("system","x86_64-linux"),("withHaddock","")]
GHCi, version 9.6.6: https://www.haskell.org/ghc/  :? for help
[1 of 1] Compiling NFTThree         ( src/NFTThree.hs, /home/testubuntu/projects/PokerFace/Development/CoinFlipGame/on-chain/dist-newstyle/build/x86_64-linux/ghc-9.6.6/plutus-tx-template-0.6.0.0/l/CoinFlipGame/build/CoinFlipGame/NFTThree.o )

src/NFTThree.hs:31:1: warning: [-Wunused-imports]
    The import of ‘GHC.Generics’ is redundant
      except perhaps to import instances from ‘GHC.Generics’
    To import instances alone, use: import GHC.Generics()
   |
31 | import GHC.Generics (Generic)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/NFTThree.hs:36:1: warning: [-Wunused-imports]
    The import of ‘TxOut, TxOut(txOutAddress)’
    from module ‘PlutusLedgerApi.V2’ is redundant
   |
36 | import PlutusLedgerApi.V2 (PubKeyHash, ScriptContext (..), TxInfo (..), TxOut(..), txOutAddress)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/NFTThree.hs:38:1: warning: [-Wunused-imports]
    The import of ‘PlutusLedgerApi.V1.Address’ is redundant
      except perhaps to import instances from ‘PlutusLedgerApi.V1.Address’
    To import instances alone, use: import PlutusLedgerApi.V1.Address()
   |
38 | import PlutusLedgerApi.V1.Address (toScriptHash)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/NFTThree.hs:40:1: warning: [-Wunused-imports]
    The import of ‘contains, from, to’
    from module ‘PlutusLedgerApi.V1.Interval’ is redundant
   |
40 | import PlutusLedgerApi.V1.Interval (Extended(..), LowerBound(..), UpperBound(..), ivFrom, ivTo, contains, to, from)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/NFTThree.hs:42:1: warning: [-Wunused-imports]
    The import of ‘PlutusTx.Blueprint’ is redundant
      except perhaps to import instances from ‘PlutusTx.Blueprint’
    To import instances alone, use: import PlutusTx.Blueprint()
   |
42 | import PlutusTx.Blueprint
   | ^^^^^^^^^^^^^^^^^^^^^^^^^

<no location info>: error:
    GHC Core to PLC plugin: Error: Reference to a name which is not a local, a builtin, or an external INLINABLE function: Variable GHC.Base.build
                               No unfolding
Context: Compiling expr: GHC.Base.build
Context: Compiling expr: GHC.Base.build @a1
Context: Compiling expr: GHC.Base.build
                           @a1
                           (\ (@a2)
                              (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                              (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                              c y n2)
Context: Compiling expr: GHC.Tuple.Prim.(,)
                           @[a1]
                           @[a1]
                           (GHC.Base.build
                              @a1
                              (\ (@a2)
                                 (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                                 (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                                 c y n2))
Context: Compiling expr: (GHC.Base.build
                            @a1
                            (\ (@a2)
                               (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                               (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                               c y n2),
                          ys)
Context: Creating alternative: GHC.Types.True
Context: Compiling expr: case PlutusTx.Builtins.Internal.ifThenElse
                                @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                         of {
                           GHC.Types.False ->
                             case go
                                    @a1
                                    (PlutusTx.Builtins.Internal.subtractInteger
                                       ds2 (GHC.Num.Integer.IS 1#))
                                    ys
                             of
                             { (zs [Occ=Once1], ws [Occ=Once1]) ->
                             (GHC.Types.: @a1 y zs, ws)
                             };
                           GHC.Types.True ->
                             (GHC.Base.build
                                @a1
                                (\ (@a2)
                                   (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                                   (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                                   c y n2),
                              ys)
                         }
Context: Compiling expr: case PlutusTx.Builtins.Internal.equalsInteger
                                ds2 (GHC.Num.Integer.IS 1#)
                         of b1 [Occ=Once1]
                         { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                         case PlutusTx.Builtins.Internal.ifThenElse
                                @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                         of {
                           GHC.Types.False ->
                             case go
                                    @a1
                                    (PlutusTx.Builtins.Internal.subtractInteger
                                       ds2 (GHC.Num.Integer.IS 1#))
                                    ys
                             of
                             { (zs [Occ=Once1], ws [Occ=Once1]) ->
                             (GHC.Types.: @a1 y zs, ws)
                             };
                           GHC.Types.True ->
                             (GHC.Base.build
                                @a1
                                (\ (@a2)
                                   (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                                   (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                                   c y n2),
                              ys)
                         }
                         }
Context: Creating alternative: :
Context: Compiling expr: case ds1 of {
                           [] -> (GHC.Types.[] @a1, GHC.Types.[] @a1);
                           : y [Occ=Once2] ys [Occ=Once2] ->
                             case PlutusTx.Builtins.Internal.equalsInteger
                                    ds2 (GHC.Num.Integer.IS 1#)
                             of b1 [Occ=Once1]
                             { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                             case PlutusTx.Builtins.Internal.ifThenElse
                                    @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                             of {
                               GHC.Types.False ->
                                 case go
                                        @a1
                                        (PlutusTx.Builtins.Internal.subtractInteger
                                           ds2 (GHC.Num.Integer.IS 1#))
                                        ys
                                 of
                                 { (zs [Occ=Once1], ws [Occ=Once1]) ->
                                 (GHC.Types.: @a1 y zs, ws)
                                 };
                               GHC.Types.True ->
                                 (GHC.Base.build
                                    @a1
                                    (\ (@a2)
                                       (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                                       (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                                       c y n2),
                                  ys)
                             }
                             }
                         }
Context: Compiling expr: case ds of ds2 { __DEFAULT ->
                         case ds1 of {
                           [] -> (GHC.Types.[] @a1, GHC.Types.[] @a1);
                           : y [Occ=Once2] ys [Occ=Once2] ->
                             case PlutusTx.Builtins.Internal.equalsInteger
                                    ds2 (GHC.Num.Integer.IS 1#)
                             of b1 [Occ=Once1]
                             { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                             case PlutusTx.Builtins.Internal.ifThenElse
                                    @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                             of {
                               GHC.Types.False ->
                                 case go
                                        @a1
                                        (PlutusTx.Builtins.Internal.subtractInteger
                                           ds2 (GHC.Num.Integer.IS 1#))
                                        ys
                                 of
                                 { (zs [Occ=Once1], ws [Occ=Once1]) ->
                                 (GHC.Types.: @a1 y zs, ws)
                                 };
                               GHC.Types.True ->
                                 (GHC.Base.build
                                    @a1
                                    (\ (@a2)
                                       (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                                       (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                                       c y n2),
                                  ys)
                             }
                             }
                         }
                         }
Context: Compiling expr: \ (ds1 [Occ=Once1!] :: [a1]) ->
                           case ds of ds2 { __DEFAULT ->
                           case ds1 of {
                             [] -> (GHC.Types.[] @a1, GHC.Types.[] @a1);
                             : y [Occ=Once2] ys [Occ=Once2] ->
                               case PlutusTx.Builtins.Internal.equalsInteger
                                      ds2 (GHC.Num.Integer.IS 1#)
                               of b1 [Occ=Once1]
                               { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                               case PlutusTx.Builtins.Internal.ifThenElse
                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                               of {
                                 GHC.Types.False ->
                                   case go
                                          @a1
                                          (PlutusTx.Builtins.Internal.subtractInteger
                                             ds2 (GHC.Num.Integer.IS 1#))
                                          ys
                                   of
                                   { (zs [Occ=Once1], ws [Occ=Once1]) ->
                                   (GHC.Types.: @a1 y zs, ws)
                                   };
                                 GHC.Types.True ->
                                   (GHC.Base.build
                                      @a1
                                      (\ (@a2)
                                         (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                                         (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                                         c y n2),
                                    ys)
                               }
                               }
                           }
                           }
Context: Compiling expr: \ (ds [Occ=Once1] :: GHC.Num.Integer.Integer)
                           (ds1 [Occ=Once1!] :: [a1]) ->
                           case ds of ds2 { __DEFAULT ->
                           case ds1 of {
                             [] -> (GHC.Types.[] @a1, GHC.Types.[] @a1);
                             : y [Occ=Once2] ys [Occ=Once2] ->
                               case PlutusTx.Builtins.Internal.equalsInteger
                                      ds2 (GHC.Num.Integer.IS 1#)
                               of b1 [Occ=Once1]
                               { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                               case PlutusTx.Builtins.Internal.ifThenElse
                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                               of {
                                 GHC.Types.False ->
                                   case go
                                          @a1
                                          (PlutusTx.Builtins.Internal.subtractInteger
                                             ds2 (GHC.Num.Integer.IS 1#))
                                          ys
                                   of
                                   { (zs [Occ=Once1], ws [Occ=Once1]) ->
                                   (GHC.Types.: @a1 y zs, ws)
                                   };
                                 GHC.Types.True ->
                                   (GHC.Base.build
                                      @a1
                                      (\ (@a2)
                                         (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                                         (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                                         c y n2),
                                    ys)
                               }
                               }
                           }
                           }
Context: Compiling expr: \ (@a1)
                           (ds [Occ=Once1] :: GHC.Num.Integer.Integer)
                           (ds1 [Occ=Once1!] :: [a1]) ->
                           case ds of ds2 { __DEFAULT ->
                           case ds1 of {
                             [] -> (GHC.Types.[] @a1, GHC.Types.[] @a1);
                             : y [Occ=Once2] ys [Occ=Once2] ->
                               case PlutusTx.Builtins.Internal.equalsInteger
                                      ds2 (GHC.Num.Integer.IS 1#)
                               of b1 [Occ=Once1]
                               { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                               case PlutusTx.Builtins.Internal.ifThenElse
                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                               of {
                                 GHC.Types.False ->
                                   case go
                                          @a1
                                          (PlutusTx.Builtins.Internal.subtractInteger
                                             ds2 (GHC.Num.Integer.IS 1#))
                                          ys
                                   of
                                   { (zs [Occ=Once1], ws [Occ=Once1]) ->
                                   (GHC.Types.: @a1 y zs, ws)
                                   };
                                 GHC.Types.True ->
                                   (GHC.Base.build
                                      @a1
                                      (\ (@a2)
                                         (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                                         (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                                         c y n2),
                                    ys)
                               }
                               }
                           }
                           }
Context: Compiling expr: letrec {
                           go [Occ=LoopBreaker]
                             :: forall a1. GHC.Num.Integer.Integer -> [a1] -> ([a1], [a1])
                           [LclId, Arity=2]
                           go
                             = \ (@a1)
                                 (ds [Occ=Once1] :: GHC.Num.Integer.Integer)
                                 (ds1 [Occ=Once1!] :: [a1]) ->
                                 case ds of ds2 { __DEFAULT ->
                                 case ds1 of {
                                   [] -> (GHC.Types.[] @a1, GHC.Types.[] @a1);
                                   : y [Occ=Once2] ys [Occ=Once2] ->
                                     case PlutusTx.Builtins.Internal.equalsInteger
                                            ds2 (GHC.Num.Integer.IS 1#)
                                     of b1 [Occ=Once1]
                                     { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                     case PlutusTx.Builtins.Internal.ifThenElse
                                            @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                     of {
                                       GHC.Types.False ->
                                         case go
                                                @a1
                                                (PlutusTx.Builtins.Internal.subtractInteger
                                                   ds2 (GHC.Num.Integer.IS 1#))
                                                ys
                                         of
                                         { (zs [Occ=Once1], ws [Occ=Once1]) ->
                                         (GHC.Types.: @a1 y zs, ws)
                                         };
                                       GHC.Types.True ->
                                         (GHC.Base.build
                                            @a1
                                            (\ (@a2)
                                               (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                                               (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                                               c y n2),
                                          ys)
                                     }
                                     }
                                 }
                                 }; } in
                         case PlutusTx.Builtins.Internal.lessThanEqualsInteger
                                n1 (GHC.Num.Integer.IS 0#)
                         of b1 [Occ=Once1]
                         { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                         case PlutusTx.Builtins.Internal.ifThenElse
                                @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                         of {
                           GHC.Types.False -> go @a n1 xs1;
                           GHC.Types.True -> (GHC.Types.[] @a, xs1)
                         }
                         }
Context: Compiling expr: case xs of xs1 [Occ=Once2] { __DEFAULT ->
                         letrec {
                           go [Occ=LoopBreaker]
                             :: forall a1. GHC.Num.Integer.Integer -> [a1] -> ([a1], [a1])
                           [LclId, Arity=2]
                           go
                             = \ (@a1)
                                 (ds [Occ=Once1] :: GHC.Num.Integer.Integer)
                                 (ds1 [Occ=Once1!] :: [a1]) ->
                                 case ds of ds2 { __DEFAULT ->
                                 case ds1 of {
                                   [] -> (GHC.Types.[] @a1, GHC.Types.[] @a1);
                                   : y [Occ=Once2] ys [Occ=Once2] ->
                                     case PlutusTx.Builtins.Internal.equalsInteger
                                            ds2 (GHC.Num.Integer.IS 1#)
                                     of b1 [Occ=Once1]
                                     { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                     case PlutusTx.Builtins.Internal.ifThenElse
                                            @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                     of {
                                       GHC.Types.False ->
                                         case go
                                                @a1
                                                (PlutusTx.Builtins.Internal.subtractInteger
                                                   ds2 (GHC.Num.Integer.IS 1#))
                                                ys
                                         of
                                         { (zs [Occ=Once1], ws [Occ=Once1]) ->
                                         (GHC.Types.: @a1 y zs, ws)
                                         };
                                       GHC.Types.True ->
                                         (GHC.Base.build
                                            @a1
                                            (\ (@a2)
                                               (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                                               (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                                               c y n2),
                                          ys)
                                     }
                                     }
                                 }
                                 }; } in
                         case PlutusTx.Builtins.Internal.lessThanEqualsInteger
                                n1 (GHC.Num.Integer.IS 0#)
                         of b1 [Occ=Once1]
                         { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                         case PlutusTx.Builtins.Internal.ifThenElse
                                @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                         of {
                           GHC.Types.False -> go @a n1 xs1;
                           GHC.Types.True -> (GHC.Types.[] @a, xs1)
                         }
                         }
                         }
Context: Compiling expr: case n of n1 { __DEFAULT ->
                         case xs of xs1 [Occ=Once2] { __DEFAULT ->
                         letrec {
                           go [Occ=LoopBreaker]
                             :: forall a1. GHC.Num.Integer.Integer -> [a1] -> ([a1], [a1])
                           [LclId, Arity=2]
                           go
                             = \ (@a1)
                                 (ds [Occ=Once1] :: GHC.Num.Integer.Integer)
                                 (ds1 [Occ=Once1!] :: [a1]) ->
                                 case ds of ds2 { __DEFAULT ->
                                 case ds1 of {
                                   [] -> (GHC.Types.[] @a1, GHC.Types.[] @a1);
                                   : y [Occ=Once2] ys [Occ=Once2] ->
                                     case PlutusTx.Builtins.Internal.equalsInteger
                                            ds2 (GHC.Num.Integer.IS 1#)
                                     of b1 [Occ=Once1]
                                     { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                     case PlutusTx.Builtins.Internal.ifThenElse
                                            @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                     of {
                                       GHC.Types.False ->
                                         case go
                                                @a1
                                                (PlutusTx.Builtins.Internal.subtractInteger
                                                   ds2 (GHC.Num.Integer.IS 1#))
                                                ys
                                         of
                                         { (zs [Occ=Once1], ws [Occ=Once1]) ->
                                         (GHC.Types.: @a1 y zs, ws)
                                         };
                                       GHC.Types.True ->
                                         (GHC.Base.build
                                            @a1
                                            (\ (@a2)
                                               (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                                               (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                                               c y n2),
                                          ys)
                                     }
                                     }
                                 }
                                 }; } in
                         case PlutusTx.Builtins.Internal.lessThanEqualsInteger
                                n1 (GHC.Num.Integer.IS 0#)
                         of b1 [Occ=Once1]
                         { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                         case PlutusTx.Builtins.Internal.ifThenElse
                                @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                         of {
                           GHC.Types.False -> go @a n1 xs1;
                           GHC.Types.True -> (GHC.Types.[] @a, xs1)
                         }
                         }
                         }
                         }
Context: Compiling expr: \ (xs [Occ=Once1] :: [a]) ->
                           case n of n1 { __DEFAULT ->
                           case xs of xs1 [Occ=Once2] { __DEFAULT ->
                           letrec {
                             go [Occ=LoopBreaker]
                               :: forall a1. GHC.Num.Integer.Integer -> [a1] -> ([a1], [a1])
                             [LclId, Arity=2]
                             go
                               = \ (@a1)
                                   (ds [Occ=Once1] :: GHC.Num.Integer.Integer)
                                   (ds1 [Occ=Once1!] :: [a1]) ->
                                   case ds of ds2 { __DEFAULT ->
                                   case ds1 of {
                                     [] -> (GHC.Types.[] @a1, GHC.Types.[] @a1);
                                     : y [Occ=Once2] ys [Occ=Once2] ->
                                       case PlutusTx.Builtins.Internal.equalsInteger
                                              ds2 (GHC.Num.Integer.IS 1#)
                                       of b1 [Occ=Once1]
                                       { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                       case PlutusTx.Builtins.Internal.ifThenElse
                                              @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                       of {
                                         GHC.Types.False ->
                                           case go
                                                  @a1
                                                  (PlutusTx.Builtins.Internal.subtractInteger
                                                     ds2 (GHC.Num.Integer.IS 1#))
                                                  ys
                                           of
                                           { (zs [Occ=Once1], ws [Occ=Once1]) ->
                                           (GHC.Types.: @a1 y zs, ws)
                                           };
                                         GHC.Types.True ->
                                           (GHC.Base.build
                                              @a1
                                              (\ (@a2)
                                                 (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                                                 (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                                                 c y n2),
                                            ys)
                                       }
                                       }
                                   }
                                   }; } in
                           case PlutusTx.Builtins.Internal.lessThanEqualsInteger
                                  n1 (GHC.Num.Integer.IS 0#)
                           of b1 [Occ=Once1]
                           { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                           case PlutusTx.Builtins.Internal.ifThenElse
                                  @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                           of {
                             GHC.Types.False -> go @a n1 xs1;
                             GHC.Types.True -> (GHC.Types.[] @a, xs1)
                           }
                           }
                           }
                           }
Context: Compiling expr: \ (n [Occ=Once1] :: GHC.Num.Integer.Integer)
                           (xs [Occ=Once1] :: [a]) ->
                           case n of n1 { __DEFAULT ->
                           case xs of xs1 [Occ=Once2] { __DEFAULT ->
                           letrec {
                             go [Occ=LoopBreaker]
                               :: forall a1. GHC.Num.Integer.Integer -> [a1] -> ([a1], [a1])
                             [LclId, Arity=2]
                             go
                               = \ (@a1)
                                   (ds [Occ=Once1] :: GHC.Num.Integer.Integer)
                                   (ds1 [Occ=Once1!] :: [a1]) ->
                                   case ds of ds2 { __DEFAULT ->
                                   case ds1 of {
                                     [] -> (GHC.Types.[] @a1, GHC.Types.[] @a1);
                                     : y [Occ=Once2] ys [Occ=Once2] ->
                                       case PlutusTx.Builtins.Internal.equalsInteger
                                              ds2 (GHC.Num.Integer.IS 1#)
                                       of b1 [Occ=Once1]
                                       { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                       case PlutusTx.Builtins.Internal.ifThenElse
                                              @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                       of {
                                         GHC.Types.False ->
                                           case go
                                                  @a1
                                                  (PlutusTx.Builtins.Internal.subtractInteger
                                                     ds2 (GHC.Num.Integer.IS 1#))
                                                  ys
                                           of
                                           { (zs [Occ=Once1], ws [Occ=Once1]) ->
                                           (GHC.Types.: @a1 y zs, ws)
                                           };
                                         GHC.Types.True ->
                                           (GHC.Base.build
                                              @a1
                                              (\ (@a2)
                                                 (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                                                 (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                                                 c y n2),
                                            ys)
                                       }
                                       }
                                   }
                                   }; } in
                           case PlutusTx.Builtins.Internal.lessThanEqualsInteger
                                  n1 (GHC.Num.Integer.IS 0#)
                           of b1 [Occ=Once1]
                           { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                           case PlutusTx.Builtins.Internal.ifThenElse
                                  @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                           of {
                             GHC.Types.False -> go @a n1 xs1;
                             GHC.Types.True -> (GHC.Types.[] @a, xs1)
                           }
                           }
                           }
                           }
Context: Compiling expr: \ (@a)
                           (n [Occ=Once1] :: GHC.Num.Integer.Integer)
                           (xs [Occ=Once1] :: [a]) ->
                           case n of n1 { __DEFAULT ->
                           case xs of xs1 [Occ=Once2] { __DEFAULT ->
                           letrec {
                             go [Occ=LoopBreaker]
                               :: forall a1. GHC.Num.Integer.Integer -> [a1] -> ([a1], [a1])
                             [LclId, Arity=2]
                             go
                               = \ (@a1)
                                   (ds [Occ=Once1] :: GHC.Num.Integer.Integer)
                                   (ds1 [Occ=Once1!] :: [a1]) ->
                                   case ds of ds2 { __DEFAULT ->
                                   case ds1 of {
                                     [] -> (GHC.Types.[] @a1, GHC.Types.[] @a1);
                                     : y [Occ=Once2] ys [Occ=Once2] ->
                                       case PlutusTx.Builtins.Internal.equalsInteger
                                              ds2 (GHC.Num.Integer.IS 1#)
                                       of b1 [Occ=Once1]
                                       { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                       case PlutusTx.Builtins.Internal.ifThenElse
                                              @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                       of {
                                         GHC.Types.False ->
                                           case go
                                                  @a1
                                                  (PlutusTx.Builtins.Internal.subtractInteger
                                                     ds2 (GHC.Num.Integer.IS 1#))
                                                  ys
                                           of
                                           { (zs [Occ=Once1], ws [Occ=Once1]) ->
                                           (GHC.Types.: @a1 y zs, ws)
                                           };
                                         GHC.Types.True ->
                                           (GHC.Base.build
                                              @a1
                                              (\ (@a2)
                                                 (c [Occ=Once1!, OS=OneShot] :: a1 -> a2 -> a2)
                                                 (n2 [Occ=Once1, OS=OneShot] :: a2) ->
                                                 c y n2),
                                            ys)
                                       }
                                       }
                                   }
                                   }; } in
                           case PlutusTx.Builtins.Internal.lessThanEqualsInteger
                                  n1 (GHC.Num.Integer.IS 0#)
                           of b1 [Occ=Once1]
                           { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                           case PlutusTx.Builtins.Internal.ifThenElse
                                  @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                           of {
                             GHC.Types.False -> go @a n1 xs1;
                             GHC.Types.True -> (GHC.Types.[] @a, xs1)
                           }
                           }
                           }
                           }
Context: Compiling definition of: PlutusTx.List.splitAt
Context: Compiling expr: PlutusTx.List.splitAt
Context: Compiling expr: PlutusTx.List.splitAt
                           @PlutusTx.Builtins.Internal.BuiltinString
Context: Compiling expr: PlutusTx.List.splitAt
                           @PlutusTx.Builtins.Internal.BuiltinString
                           (let {
                              z1 [Occ=OnceL1] :: GHC.Num.Integer.Integer
                              [LclId]
                              z1 = GHC.Num.Integer.IS 0# } in
                            letrec {
                              go [Occ=LoopBreaker]
                                :: [PlutusTx.Builtins.Internal.BuiltinString]
                                   -> GHC.Num.Integer.Integer
                              [LclId, Arity=1]
                              go
                                = \ (ds4 [Occ=Once1!]
                                       :: [PlutusTx.Builtins.Internal.BuiltinString]) ->
                                    case ds4 of {
                                      [] -> z1;
                                      : x1 [Occ=Once1!] xs [Occ=Once1] ->
                                        case x1 of
                                        { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                        case go xs of acc1 [Occ=Once1] { __DEFAULT ->
                                        PlutusTx.Builtins.Internal.addInteger acc1 (GHC.Num.Integer.IS 1#)
                                        }
                                        }
                                    }; } in
                            case go wild of x1 [Occ=Once1] { __DEFAULT ->
                            PlutusTx.Builtins.Internal.divideInteger x1 (GHC.Num.Integer.IS 2#)
                            })
Context: Compiling expr: PlutusTx.List.splitAt
                           @PlutusTx.Builtins.Internal.BuiltinString
                           (let {
                              z1 [Occ=OnceL1] :: GHC.Num.Integer.Integer
                              [LclId]
                              z1 = GHC.Num.Integer.IS 0# } in
                            letrec {
                              go [Occ=LoopBreaker]
                                :: [PlutusTx.Builtins.Internal.BuiltinString]
                                   -> GHC.Num.Integer.Integer
                              [LclId, Arity=1]
                              go
                                = \ (ds4 [Occ=Once1!]
                                       :: [PlutusTx.Builtins.Internal.BuiltinString]) ->
                                    case ds4 of {
                                      [] -> z1;
                                      : x1 [Occ=Once1!] xs [Occ=Once1] ->
                                        case x1 of
                                        { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                        case go xs of acc1 [Occ=Once1] { __DEFAULT ->
                                        PlutusTx.Builtins.Internal.addInteger acc1 (GHC.Num.Integer.IS 1#)
                                        }
                                        }
                                    }; } in
                            case go wild of x1 [Occ=Once1] { __DEFAULT ->
                            PlutusTx.Builtins.Internal.divideInteger x1 (GHC.Num.Integer.IS 2#)
                            })
                           wild
Context: Compiling expr: case PlutusTx.List.splitAt
                                @PlutusTx.Builtins.Internal.BuiltinString
                                (let {
                                   z1 [Occ=OnceL1] :: GHC.Num.Integer.Integer
                                   [LclId]
                                   z1 = GHC.Num.Integer.IS 0# } in
                                 letrec {
                                   go [Occ=LoopBreaker]
                                     :: [PlutusTx.Builtins.Internal.BuiltinString]
                                        -> GHC.Num.Integer.Integer
                                   [LclId, Arity=1]
                                   go
                                     = \ (ds4 [Occ=Once1!]
                                            :: [PlutusTx.Builtins.Internal.BuiltinString]) ->
                                         case ds4 of {
                                           [] -> z1;
                                           : x1 [Occ=Once1!] xs [Occ=Once1] ->
                                             case x1 of
                                             { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                             case go xs of acc1 [Occ=Once1] { __DEFAULT ->
                                             PlutusTx.Builtins.Internal.addInteger
                                               acc1 (GHC.Num.Integer.IS 1#)
                                             }
                                             }
                                         }; } in
                                 case go wild of x1 [Occ=Once1] { __DEFAULT ->
                                 PlutusTx.Builtins.Internal.divideInteger x1 (GHC.Num.Integer.IS 2#)
                                 })
                                wild
                         of
                         { (ipv2 [Occ=Once1], ipv3 [Occ=Once1]) ->
                         PlutusTx.Builtins.Internal.appendString
                           (PlutusTx.Show.TH.concatBuiltinStrings ipv2)
                           (PlutusTx.Show.TH.concatBuiltinStrings ipv3)
                         }
Context: Creating alternative: :
Context: Compiling expr: case ds3 of {
                           [] -> x;
                           : _ [Occ=Dead] _ [Occ=Dead] ->
                             case PlutusTx.List.splitAt
                                    @PlutusTx.Builtins.Internal.BuiltinString
                                    (let {
                                       z1 [Occ=OnceL1] :: GHC.Num.Integer.Integer
                                       [LclId]
                                       z1 = GHC.Num.Integer.IS 0# } in
                                     letrec {
                                       go [Occ=LoopBreaker]
                                         :: [PlutusTx.Builtins.Internal.BuiltinString]
                                            -> GHC.Num.Integer.Integer
                                       [LclId, Arity=1]
                                       go
                                         = \ (ds4 [Occ=Once1!]
                                                :: [PlutusTx.Builtins.Internal.BuiltinString]) ->
                                             case ds4 of {
                                               [] -> z1;
                                               : x1 [Occ=Once1!] xs [Occ=Once1] ->
                                                 case x1 of
                                                 { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                                 case go xs of acc1 [Occ=Once1] { __DEFAULT ->
                                                 PlutusTx.Builtins.Internal.addInteger
                                                   acc1 (GHC.Num.Integer.IS 1#)
                                                 }
                                                 }
                                             }; } in
                                     case go wild of x1 [Occ=Once1] { __DEFAULT ->
                                     PlutusTx.Builtins.Internal.divideInteger x1 (GHC.Num.Integer.IS 2#)
                                     })
                                    wild
                             of
                             { (ipv2 [Occ=Once1], ipv3 [Occ=Once1]) ->
                             PlutusTx.Builtins.Internal.appendString
                               (PlutusTx.Show.TH.concatBuiltinStrings ipv2)
                               (PlutusTx.Show.TH.concatBuiltinStrings ipv3)
                             }
                         }
Context: Creating alternative: :
Context: Compiling expr: case ds2 of wild {
                           [] ->
                             PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                               (GHC.Types.[] @GHC.Types.Char);
                           : x [Occ=Once1] ds3 [Occ=Once1!] ->
                             case ds3 of {
                               [] -> x;
                               : _ [Occ=Dead] _ [Occ=Dead] ->
                                 case PlutusTx.List.splitAt
                                        @PlutusTx.Builtins.Internal.BuiltinString
                                        (let {
                                           z1 [Occ=OnceL1] :: GHC.Num.Integer.Integer
                                           [LclId]
                                           z1 = GHC.Num.Integer.IS 0# } in
                                         letrec {
                                           go [Occ=LoopBreaker]
                                             :: [PlutusTx.Builtins.Internal.BuiltinString]
                                                -> GHC.Num.Integer.Integer
                                           [LclId, Arity=1]
                                           go
                                             = \ (ds4 [Occ=Once1!]
                                                    :: [PlutusTx.Builtins.Internal.BuiltinString]) ->
                                                 case ds4 of {
                                                   [] -> z1;
                                                   : x1 [Occ=Once1!] xs [Occ=Once1] ->
                                                     case x1 of
                                                     { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                                     case go xs of acc1 [Occ=Once1] { __DEFAULT ->
                                                     PlutusTx.Builtins.Internal.addInteger
                                                       acc1 (GHC.Num.Integer.IS 1#)
                                                     }
                                                     }
                                                 }; } in
                                         case go wild of x1 [Occ=Once1] { __DEFAULT ->
                                         PlutusTx.Builtins.Internal.divideInteger x1 (GHC.Num.Integer.IS 2#)
                                         })
                                        wild
                                 of
                                 { (ipv2 [Occ=Once1], ipv3 [Occ=Once1]) ->
                                 PlutusTx.Builtins.Internal.appendString
                                   (PlutusTx.Show.TH.concatBuiltinStrings ipv2)
                                   (PlutusTx.Show.TH.concatBuiltinStrings ipv3)
                                 }
                             }
                         }
Context: Compiling expr: \ (ds2 [Occ=Once1!]
                              :: [PlutusTx.Builtins.Internal.BuiltinString]) ->
                           case ds2 of wild {
                             [] ->
                               PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                 (GHC.Types.[] @GHC.Types.Char);
                             : x [Occ=Once1] ds3 [Occ=Once1!] ->
                               case ds3 of {
                                 [] -> x;
                                 : _ [Occ=Dead] _ [Occ=Dead] ->
                                   case PlutusTx.List.splitAt
                                          @PlutusTx.Builtins.Internal.BuiltinString
                                          (let {
                                             z1 [Occ=OnceL1] :: GHC.Num.Integer.Integer
                                             [LclId]
                                             z1 = GHC.Num.Integer.IS 0# } in
                                           letrec {
                                             go [Occ=LoopBreaker]
                                               :: [PlutusTx.Builtins.Internal.BuiltinString]
                                                  -> GHC.Num.Integer.Integer
                                             [LclId, Arity=1]
                                             go
                                               = \ (ds4 [Occ=Once1!]
                                                      :: [PlutusTx.Builtins.Internal.BuiltinString]) ->
                                                   case ds4 of {
                                                     [] -> z1;
                                                     : x1 [Occ=Once1!] xs [Occ=Once1] ->
                                                       case x1 of
                                                       { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                                       case go xs of acc1 [Occ=Once1] { __DEFAULT ->
                                                       PlutusTx.Builtins.Internal.addInteger
                                                         acc1 (GHC.Num.Integer.IS 1#)
                                                       }
                                                       }
                                                   }; } in
                                           case go wild of x1 [Occ=Once1] { __DEFAULT ->
                                           PlutusTx.Builtins.Internal.divideInteger
                                             x1 (GHC.Num.Integer.IS 2#)
                                           })
                                          wild
                                   of
                                   { (ipv2 [Occ=Once1], ipv3 [Occ=Once1]) ->
                                   PlutusTx.Builtins.Internal.appendString
                                     (PlutusTx.Show.TH.concatBuiltinStrings ipv2)
                                     (PlutusTx.Show.TH.concatBuiltinStrings ipv3)
                                   }
                               }
                           }
Context: Compiling definition of: PlutusTx.Show.TH.concatBuiltinStrings
Context: Compiling expr: PlutusTx.Show.TH.concatBuiltinStrings
Context: Compiling expr: PlutusTx.Show.TH.concatBuiltinStrings
                           (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                              (GHC.Num.Integer.IS 0#)
                              startTimeInt
                              (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString))
Context: Compiling expr: PlutusTx.Builtins.Internal.appendString
                           (PlutusTx.Show.TH.concatBuiltinStrings
                              (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                 (GHC.Num.Integer.IS 0#)
                                 startTimeInt
                                 (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))
Context: Compiling expr: PlutusTx.Builtins.Internal.appendString
                           (PlutusTx.Show.TH.concatBuiltinStrings
                              (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                 (GHC.Num.Integer.IS 0#)
                                 startTimeInt
                                 (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))
                           (PlutusTx.Builtins.Internal.appendString
                              (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                 (GHC.CString.unpackCString# " End: "#))
                              (PlutusTx.Show.TH.concatBuiltinStrings
                                 (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                    (GHC.Num.Integer.IS 0#)
                                    endTimeInt
                                    (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString))))
Context: Compiling expr: PlutusTx.Builtins.Internal.appendString
                           (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                              (GHC.CString.unpackCString# "Invalid time window - Start: "#))
                           (PlutusTx.Builtins.Internal.appendString
                              (PlutusTx.Show.TH.concatBuiltinStrings
                                 (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                    (GHC.Num.Integer.IS 0#)
                                    startTimeInt
                                    (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))
                              (PlutusTx.Builtins.Internal.appendString
                                 (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                    (GHC.CString.unpackCString# " End: "#))
                                 (PlutusTx.Show.TH.concatBuiltinStrings
                                    (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                       (GHC.Num.Integer.IS 0#)
                                       endTimeInt
                                       (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))))
Context: Compiling expr: case PlutusTx.Builtins.Internal.appendString
                                (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                   (GHC.CString.unpackCString# "Invalid time window - Start: "#))
                                (PlutusTx.Builtins.Internal.appendString
                                   (PlutusTx.Show.TH.concatBuiltinStrings
                                      (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                         (GHC.Num.Integer.IS 0#)
                                         startTimeInt
                                         (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))
                                   (PlutusTx.Builtins.Internal.appendString
                                      (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                         (GHC.CString.unpackCString# " End: "#))
                                      (PlutusTx.Show.TH.concatBuiltinStrings
                                         (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                            (GHC.Num.Integer.IS 0#)
                                            endTimeInt
                                            (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))))
                         of str1 [Occ=Once1]
                         { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                         case validWindow of {
                           GHC.Types.False ->
                             PlutusTx.Builtins.Internal.trace
                               @GHC.Types.Bool str1 GHC.Types.False;
                           GHC.Types.True -> GHC.Types.True
                         }
                         }
Context: Compiling expr: case case (endTimeInt
                                    `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                            :: GHC.Types.Coercible
                                                 GHC.Num.Integer.Integer PlutusLedgerApi.V1.Time.POSIXTime))
                                   `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                           :: GHC.Types.Coercible
                                                PlutusLedgerApi.V1.Time.POSIXTime GHC.Num.Integer.Integer)
                              of x1 [Occ=Once1]
                              { __DEFAULT ->
                              case case (startTimeInt
                                         `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                 :: GHC.Types.Coercible
                                                      GHC.Num.Integer.Integer
                                                      PlutusLedgerApi.V1.Time.POSIXTime))
                                        `cast` (Sym (SelCo:Fun(arg)
                                                         (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                          %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                          %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                          ; Sym (PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                     <PlutusLedgerApi.V1.Time.POSIXTime>_N)
                                                          ; PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                <PlutusLedgerApi.V1.Time.POSIXTime>_N))
                                                :: GHC.Types.Coercible
                                                     PlutusLedgerApi.V1.Time.POSIXTime
                                                     GHC.Num.Integer.Integer)
                                   of x1 [Occ=Once1]
                                   { __DEFAULT ->
                                   PlutusTx.Builtins.Internal.addInteger
                                     x1 (GHC.Num.Integer.IS 10000#)
                                   }
                              of y1 [Occ=Once1]
                              { __DEFAULT ->
                              case PlutusTx.Builtins.Internal.lessThanEqualsInteger x1 y1
                              of b1 [Occ=Once1]
                              { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                              PlutusTx.Builtins.Internal.ifThenElse
                                @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                              }
                              }
                              }
                         of validWindow [Occ=Once1!]
                         { __DEFAULT ->
                         case PlutusTx.Builtins.Internal.appendString
                                (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                   (GHC.CString.unpackCString# "Invalid time window - Start: "#))
                                (PlutusTx.Builtins.Internal.appendString
                                   (PlutusTx.Show.TH.concatBuiltinStrings
                                      (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                         (GHC.Num.Integer.IS 0#)
                                         startTimeInt
                                         (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))
                                   (PlutusTx.Builtins.Internal.appendString
                                      (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                         (GHC.CString.unpackCString# " End: "#))
                                      (PlutusTx.Show.TH.concatBuiltinStrings
                                         (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                            (GHC.Num.Integer.IS 0#)
                                            endTimeInt
                                            (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))))
                         of str1 [Occ=Once1]
                         { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                         case validWindow of {
                           GHC.Types.False ->
                             PlutusTx.Builtins.Internal.trace
                               @GHC.Types.Bool str1 GHC.Types.False;
                           GHC.Types.True -> GHC.Types.True
                         }
                         }
                         }
Context: Compiling expr: case startTime
                              `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                      :: GHC.Types.Coercible
                                           PlutusLedgerApi.V1.Time.POSIXTime GHC.Num.Integer.Integer)
                         of startTimeInt
                         { __DEFAULT ->
                         case case (endTimeInt
                                    `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                            :: GHC.Types.Coercible
                                                 GHC.Num.Integer.Integer PlutusLedgerApi.V1.Time.POSIXTime))
                                   `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                           :: GHC.Types.Coercible
                                                PlutusLedgerApi.V1.Time.POSIXTime GHC.Num.Integer.Integer)
                              of x1 [Occ=Once1]
                              { __DEFAULT ->
                              case case (startTimeInt
                                         `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                 :: GHC.Types.Coercible
                                                      GHC.Num.Integer.Integer
                                                      PlutusLedgerApi.V1.Time.POSIXTime))
                                        `cast` (Sym (SelCo:Fun(arg)
                                                         (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                          %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                          %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                          ; Sym (PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                     <PlutusLedgerApi.V1.Time.POSIXTime>_N)
                                                          ; PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                <PlutusLedgerApi.V1.Time.POSIXTime>_N))
                                                :: GHC.Types.Coercible
                                                     PlutusLedgerApi.V1.Time.POSIXTime
                                                     GHC.Num.Integer.Integer)
                                   of x1 [Occ=Once1]
                                   { __DEFAULT ->
                                   PlutusTx.Builtins.Internal.addInteger
                                     x1 (GHC.Num.Integer.IS 10000#)
                                   }
                              of y1 [Occ=Once1]
                              { __DEFAULT ->
                              case PlutusTx.Builtins.Internal.lessThanEqualsInteger x1 y1
                              of b1 [Occ=Once1]
                              { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                              PlutusTx.Builtins.Internal.ifThenElse
                                @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                              }
                              }
                              }
                         of validWindow [Occ=Once1!]
                         { __DEFAULT ->
                         case PlutusTx.Builtins.Internal.appendString
                                (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                   (GHC.CString.unpackCString# "Invalid time window - Start: "#))
                                (PlutusTx.Builtins.Internal.appendString
                                   (PlutusTx.Show.TH.concatBuiltinStrings
                                      (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                         (GHC.Num.Integer.IS 0#)
                                         startTimeInt
                                         (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))
                                   (PlutusTx.Builtins.Internal.appendString
                                      (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                         (GHC.CString.unpackCString# " End: "#))
                                      (PlutusTx.Show.TH.concatBuiltinStrings
                                         (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                            (GHC.Num.Integer.IS 0#)
                                            endTimeInt
                                            (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))))
                         of str1 [Occ=Once1]
                         { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                         case validWindow of {
                           GHC.Types.False ->
                             PlutusTx.Builtins.Internal.trace
                               @GHC.Types.Bool str1 GHC.Types.False;
                           GHC.Types.True -> GHC.Types.True
                         }
                         }
                         }
                         }
Context: Compiling expr: case endTime
                              `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                      :: GHC.Types.Coercible
                                           PlutusLedgerApi.V1.Time.POSIXTime GHC.Num.Integer.Integer)
                         of endTimeInt
                         { __DEFAULT ->
                         case startTime
                              `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                      :: GHC.Types.Coercible
                                           PlutusLedgerApi.V1.Time.POSIXTime GHC.Num.Integer.Integer)
                         of startTimeInt
                         { __DEFAULT ->
                         case case (endTimeInt
                                    `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                            :: GHC.Types.Coercible
                                                 GHC.Num.Integer.Integer PlutusLedgerApi.V1.Time.POSIXTime))
                                   `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                           :: GHC.Types.Coercible
                                                PlutusLedgerApi.V1.Time.POSIXTime GHC.Num.Integer.Integer)
                              of x1 [Occ=Once1]
                              { __DEFAULT ->
                              case case (startTimeInt
                                         `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                 :: GHC.Types.Coercible
                                                      GHC.Num.Integer.Integer
                                                      PlutusLedgerApi.V1.Time.POSIXTime))
                                        `cast` (Sym (SelCo:Fun(arg)
                                                         (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                          %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                          %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                          ; Sym (PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                     <PlutusLedgerApi.V1.Time.POSIXTime>_N)
                                                          ; PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                <PlutusLedgerApi.V1.Time.POSIXTime>_N))
                                                :: GHC.Types.Coercible
                                                     PlutusLedgerApi.V1.Time.POSIXTime
                                                     GHC.Num.Integer.Integer)
                                   of x1 [Occ=Once1]
                                   { __DEFAULT ->
                                   PlutusTx.Builtins.Internal.addInteger
                                     x1 (GHC.Num.Integer.IS 10000#)
                                   }
                              of y1 [Occ=Once1]
                              { __DEFAULT ->
                              case PlutusTx.Builtins.Internal.lessThanEqualsInteger x1 y1
                              of b1 [Occ=Once1]
                              { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                              PlutusTx.Builtins.Internal.ifThenElse
                                @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                              }
                              }
                              }
                         of validWindow [Occ=Once1!]
                         { __DEFAULT ->
                         case PlutusTx.Builtins.Internal.appendString
                                (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                   (GHC.CString.unpackCString# "Invalid time window - Start: "#))
                                (PlutusTx.Builtins.Internal.appendString
                                   (PlutusTx.Show.TH.concatBuiltinStrings
                                      (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                         (GHC.Num.Integer.IS 0#)
                                         startTimeInt
                                         (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))
                                   (PlutusTx.Builtins.Internal.appendString
                                      (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                         (GHC.CString.unpackCString# " End: "#))
                                      (PlutusTx.Show.TH.concatBuiltinStrings
                                         (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                            (GHC.Num.Integer.IS 0#)
                                            endTimeInt
                                            (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))))
                         of str1 [Occ=Once1]
                         { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                         case validWindow of {
                           GHC.Types.False ->
                             PlutusTx.Builtins.Internal.trace
                               @GHC.Types.Bool str1 GHC.Types.False;
                           GHC.Types.True -> GHC.Types.True
                         }
                         }
                         }
                         }
                         }
Context: Creating alternative: PlutusLedgerApi.V1.Interval.Finite
Context: Compiling expr: case ds_d9sG of {
                           __DEFAULT ->
                             case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                    (GHC.CString.unpackCString#
                                       "Invalid: Missing upper bound for validity interval"#)
                             of str1 [Occ=Once1]
                             { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                             case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                             { () ->
                             PlutusTx.Builtins.Internal.error
                               @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                             }
                             };
                           PlutusLedgerApi.V1.Interval.Finite endTime [Occ=Once1] ->
                             case endTime
                                  `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                          :: GHC.Types.Coercible
                                               PlutusLedgerApi.V1.Time.POSIXTime GHC.Num.Integer.Integer)
                             of endTimeInt
                             { __DEFAULT ->
                             case startTime
                                  `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                          :: GHC.Types.Coercible
                                               PlutusLedgerApi.V1.Time.POSIXTime GHC.Num.Integer.Integer)
                             of startTimeInt
                             { __DEFAULT ->
                             case case (endTimeInt
                                        `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                :: GHC.Types.Coercible
                                                     GHC.Num.Integer.Integer
                                                     PlutusLedgerApi.V1.Time.POSIXTime))
                                       `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                               :: GHC.Types.Coercible
                                                    PlutusLedgerApi.V1.Time.POSIXTime
                                                    GHC.Num.Integer.Integer)
                                  of x1 [Occ=Once1]
                                  { __DEFAULT ->
                                  case case (startTimeInt
                                             `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                     :: GHC.Types.Coercible
                                                          GHC.Num.Integer.Integer
                                                          PlutusLedgerApi.V1.Time.POSIXTime))
                                            `cast` (Sym (SelCo:Fun(arg)
                                                             (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                              %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                              %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                              ; Sym (PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                         <PlutusLedgerApi.V1.Time.POSIXTime>_N)
                                                              ; PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                    <PlutusLedgerApi.V1.Time.POSIXTime>_N))
                                                    :: GHC.Types.Coercible
                                                         PlutusLedgerApi.V1.Time.POSIXTime
                                                         GHC.Num.Integer.Integer)
                                       of x1 [Occ=Once1]
                                       { __DEFAULT ->
                                       PlutusTx.Builtins.Internal.addInteger
                                         x1 (GHC.Num.Integer.IS 10000#)
                                       }
                                  of y1 [Occ=Once1]
                                  { __DEFAULT ->
                                  case PlutusTx.Builtins.Internal.lessThanEqualsInteger x1 y1
                                  of b1 [Occ=Once1]
                                  { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                  PlutusTx.Builtins.Internal.ifThenElse
                                    @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                  }
                                  }
                                  }
                             of validWindow [Occ=Once1!]
                             { __DEFAULT ->
                             case PlutusTx.Builtins.Internal.appendString
                                    (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                       (GHC.CString.unpackCString# "Invalid time window - Start: "#))
                                    (PlutusTx.Builtins.Internal.appendString
                                       (PlutusTx.Show.TH.concatBuiltinStrings
                                          (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                             (GHC.Num.Integer.IS 0#)
                                             startTimeInt
                                             (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))
                                       (PlutusTx.Builtins.Internal.appendString
                                          (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                             (GHC.CString.unpackCString# " End: "#))
                                          (PlutusTx.Show.TH.concatBuiltinStrings
                                             (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                (GHC.Num.Integer.IS 0#)
                                                endTimeInt
                                                (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))))
                             of str1 [Occ=Once1]
                             { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                             case validWindow of {
                               GHC.Types.False ->
                                 PlutusTx.Builtins.Internal.trace
                                   @GHC.Types.Bool str1 GHC.Types.False;
                               GHC.Types.True -> GHC.Types.True
                             }
                             }
                             }
                             }
                             }
                         }
Context: Creating alternative: PlutusLedgerApi.V1.Interval.UpperBound
Context: Compiling expr: case case ipv of
                              { PlutusLedgerApi.V1.Interval.Interval _ [Occ=Dead]
                                                                     ds2 [Occ=Once1] ->
                              ds2
                              }
                         of
                         { PlutusLedgerApi.V1.Interval.UpperBound ds_d9sG [Occ=Once1!]
                                                                  _ [Occ=Dead] ->
                         case ds_d9sG of {
                           __DEFAULT ->
                             case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                    (GHC.CString.unpackCString#
                                       "Invalid: Missing upper bound for validity interval"#)
                             of str1 [Occ=Once1]
                             { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                             case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                             { () ->
                             PlutusTx.Builtins.Internal.error
                               @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                             }
                             };
                           PlutusLedgerApi.V1.Interval.Finite endTime [Occ=Once1] ->
                             case endTime
                                  `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                          :: GHC.Types.Coercible
                                               PlutusLedgerApi.V1.Time.POSIXTime GHC.Num.Integer.Integer)
                             of endTimeInt
                             { __DEFAULT ->
                             case startTime
                                  `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                          :: GHC.Types.Coercible
                                               PlutusLedgerApi.V1.Time.POSIXTime GHC.Num.Integer.Integer)
                             of startTimeInt
                             { __DEFAULT ->
                             case case (endTimeInt
                                        `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                :: GHC.Types.Coercible
                                                     GHC.Num.Integer.Integer
                                                     PlutusLedgerApi.V1.Time.POSIXTime))
                                       `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                               :: GHC.Types.Coercible
                                                    PlutusLedgerApi.V1.Time.POSIXTime
                                                    GHC.Num.Integer.Integer)
                                  of x1 [Occ=Once1]
                                  { __DEFAULT ->
                                  case case (startTimeInt
                                             `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                     :: GHC.Types.Coercible
                                                          GHC.Num.Integer.Integer
                                                          PlutusLedgerApi.V1.Time.POSIXTime))
                                            `cast` (Sym (SelCo:Fun(arg)
                                                             (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                              %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                              %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                              ; Sym (PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                         <PlutusLedgerApi.V1.Time.POSIXTime>_N)
                                                              ; PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                    <PlutusLedgerApi.V1.Time.POSIXTime>_N))
                                                    :: GHC.Types.Coercible
                                                         PlutusLedgerApi.V1.Time.POSIXTime
                                                         GHC.Num.Integer.Integer)
                                       of x1 [Occ=Once1]
                                       { __DEFAULT ->
                                       PlutusTx.Builtins.Internal.addInteger
                                         x1 (GHC.Num.Integer.IS 10000#)
                                       }
                                  of y1 [Occ=Once1]
                                  { __DEFAULT ->
                                  case PlutusTx.Builtins.Internal.lessThanEqualsInteger x1 y1
                                  of b1 [Occ=Once1]
                                  { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                  PlutusTx.Builtins.Internal.ifThenElse
                                    @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                  }
                                  }
                                  }
                             of validWindow [Occ=Once1!]
                             { __DEFAULT ->
                             case PlutusTx.Builtins.Internal.appendString
                                    (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                       (GHC.CString.unpackCString# "Invalid time window - Start: "#))
                                    (PlutusTx.Builtins.Internal.appendString
                                       (PlutusTx.Show.TH.concatBuiltinStrings
                                          (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                             (GHC.Num.Integer.IS 0#)
                                             startTimeInt
                                             (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))
                                       (PlutusTx.Builtins.Internal.appendString
                                          (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                             (GHC.CString.unpackCString# " End: "#))
                                          (PlutusTx.Show.TH.concatBuiltinStrings
                                             (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                (GHC.Num.Integer.IS 0#)
                                                endTimeInt
                                                (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))))
                             of str1 [Occ=Once1]
                             { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                             case validWindow of {
                               GHC.Types.False ->
                                 PlutusTx.Builtins.Internal.trace
                                   @GHC.Types.Bool str1 GHC.Types.False;
                               GHC.Types.True -> GHC.Types.True
                             }
                             }
                             }
                             }
                             }
                         }
                         }
Context: Creating alternative: PlutusLedgerApi.V1.Interval.Finite
Context: Compiling expr: case ds_d9sM of {
                           __DEFAULT ->
                             case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                    (GHC.CString.unpackCString#
                                       "Invalid: Missing lower bound for validity interval"#)
                             of str1 [Occ=Once1]
                             { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                             case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                             { () ->
                             PlutusTx.Builtins.Internal.error
                               @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                             }
                             };
                           PlutusLedgerApi.V1.Interval.Finite startTime [Occ=Once1] ->
                             case case ipv of
                                  { PlutusLedgerApi.V1.Interval.Interval _ [Occ=Dead]
                                                                         ds2 [Occ=Once1] ->
                                  ds2
                                  }
                             of
                             { PlutusLedgerApi.V1.Interval.UpperBound ds_d9sG [Occ=Once1!]
                                                                      _ [Occ=Dead] ->
                             case ds_d9sG of {
                               __DEFAULT ->
                                 case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                        (GHC.CString.unpackCString#
                                           "Invalid: Missing upper bound for validity interval"#)
                                 of str1 [Occ=Once1]
                                 { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                 case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                 { () ->
                                 PlutusTx.Builtins.Internal.error
                                   @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                 }
                                 };
                               PlutusLedgerApi.V1.Interval.Finite endTime [Occ=Once1] ->
                                 case endTime
                                      `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                              :: GHC.Types.Coercible
                                                   PlutusLedgerApi.V1.Time.POSIXTime GHC.Num.Integer.Integer)
                                 of endTimeInt
                                 { __DEFAULT ->
                                 case startTime
                                      `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                              :: GHC.Types.Coercible
                                                   PlutusLedgerApi.V1.Time.POSIXTime GHC.Num.Integer.Integer)
                                 of startTimeInt
                                 { __DEFAULT ->
                                 case case (endTimeInt
                                            `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                    :: GHC.Types.Coercible
                                                         GHC.Num.Integer.Integer
                                                         PlutusLedgerApi.V1.Time.POSIXTime))
                                           `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                   :: GHC.Types.Coercible
                                                        PlutusLedgerApi.V1.Time.POSIXTime
                                                        GHC.Num.Integer.Integer)
                                      of x1 [Occ=Once1]
                                      { __DEFAULT ->
                                      case case (startTimeInt
                                                 `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                         :: GHC.Types.Coercible
                                                              GHC.Num.Integer.Integer
                                                              PlutusLedgerApi.V1.Time.POSIXTime))
                                                `cast` (Sym (SelCo:Fun(arg)
                                                                 (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                  ; Sym (PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                             <PlutusLedgerApi.V1.Time.POSIXTime>_N)
                                                                  ; PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                        <PlutusLedgerApi.V1.Time.POSIXTime>_N))
                                                        :: GHC.Types.Coercible
                                                             PlutusLedgerApi.V1.Time.POSIXTime
                                                             GHC.Num.Integer.Integer)
                                           of x1 [Occ=Once1]
                                           { __DEFAULT ->
                                           PlutusTx.Builtins.Internal.addInteger
                                             x1 (GHC.Num.Integer.IS 10000#)
                                           }
                                      of y1 [Occ=Once1]
                                      { __DEFAULT ->
                                      case PlutusTx.Builtins.Internal.lessThanEqualsInteger x1 y1
                                      of b1 [Occ=Once1]
                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                      PlutusTx.Builtins.Internal.ifThenElse
                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                      }
                                      }
                                      }
                                 of validWindow [Occ=Once1!]
                                 { __DEFAULT ->
                                 case PlutusTx.Builtins.Internal.appendString
                                        (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                           (GHC.CString.unpackCString# "Invalid time window - Start: "#))
                                        (PlutusTx.Builtins.Internal.appendString
                                           (PlutusTx.Show.TH.concatBuiltinStrings
                                              (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                 (GHC.Num.Integer.IS 0#)
                                                 startTimeInt
                                                 (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))
                                           (PlutusTx.Builtins.Internal.appendString
                                              (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                 (GHC.CString.unpackCString# " End: "#))
                                              (PlutusTx.Show.TH.concatBuiltinStrings
                                                 (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                    (GHC.Num.Integer.IS 0#)
                                                    endTimeInt
                                                    (GHC.Types.[]
                                                       @PlutusTx.Builtins.Internal.BuiltinString)))))
                                 of str1 [Occ=Once1]
                                 { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                 case validWindow of {
                                   GHC.Types.False ->
                                     PlutusTx.Builtins.Internal.trace
                                       @GHC.Types.Bool str1 GHC.Types.False;
                                   GHC.Types.True -> GHC.Types.True
                                 }
                                 }
                                 }
                                 }
                                 }
                             }
                             }
                         }
Context: Creating alternative: PlutusLedgerApi.V1.Interval.LowerBound
Context: Compiling expr: case case ipv of
                              { PlutusLedgerApi.V1.Interval.Interval ds1 [Occ=Once1]
                                                                     _ [Occ=Dead] ->
                              ds1
                              }
                         of
                         { PlutusLedgerApi.V1.Interval.LowerBound ds_d9sM [Occ=Once1!]
                                                                  _ [Occ=Dead] ->
                         case ds_d9sM of {
                           __DEFAULT ->
                             case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                    (GHC.CString.unpackCString#
                                       "Invalid: Missing lower bound for validity interval"#)
                             of str1 [Occ=Once1]
                             { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                             case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                             { () ->
                             PlutusTx.Builtins.Internal.error
                               @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                             }
                             };
                           PlutusLedgerApi.V1.Interval.Finite startTime [Occ=Once1] ->
                             case case ipv of
                                  { PlutusLedgerApi.V1.Interval.Interval _ [Occ=Dead]
                                                                         ds2 [Occ=Once1] ->
                                  ds2
                                  }
                             of
                             { PlutusLedgerApi.V1.Interval.UpperBound ds_d9sG [Occ=Once1!]
                                                                      _ [Occ=Dead] ->
                             case ds_d9sG of {
                               __DEFAULT ->
                                 case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                        (GHC.CString.unpackCString#
                                           "Invalid: Missing upper bound for validity interval"#)
                                 of str1 [Occ=Once1]
                                 { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                 case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                 { () ->
                                 PlutusTx.Builtins.Internal.error
                                   @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                 }
                                 };
                               PlutusLedgerApi.V1.Interval.Finite endTime [Occ=Once1] ->
                                 case endTime
                                      `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                              :: GHC.Types.Coercible
                                                   PlutusLedgerApi.V1.Time.POSIXTime GHC.Num.Integer.Integer)
                                 of endTimeInt
                                 { __DEFAULT ->
                                 case startTime
                                      `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                              :: GHC.Types.Coercible
                                                   PlutusLedgerApi.V1.Time.POSIXTime GHC.Num.Integer.Integer)
                                 of startTimeInt
                                 { __DEFAULT ->
                                 case case (endTimeInt
                                            `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                    :: GHC.Types.Coercible
                                                         GHC.Num.Integer.Integer
                                                         PlutusLedgerApi.V1.Time.POSIXTime))
                                           `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                   :: GHC.Types.Coercible
                                                        PlutusLedgerApi.V1.Time.POSIXTime
                                                        GHC.Num.Integer.Integer)
                                      of x1 [Occ=Once1]
                                      { __DEFAULT ->
                                      case case (startTimeInt
                                                 `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                         :: GHC.Types.Coercible
                                                              GHC.Num.Integer.Integer
                                                              PlutusLedgerApi.V1.Time.POSIXTime))
                                                `cast` (Sym (SelCo:Fun(arg)
                                                                 (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                  ; Sym (PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                             <PlutusLedgerApi.V1.Time.POSIXTime>_N)
                                                                  ; PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                        <PlutusLedgerApi.V1.Time.POSIXTime>_N))
                                                        :: GHC.Types.Coercible
                                                             PlutusLedgerApi.V1.Time.POSIXTime
                                                             GHC.Num.Integer.Integer)
                                           of x1 [Occ=Once1]
                                           { __DEFAULT ->
                                           PlutusTx.Builtins.Internal.addInteger
                                             x1 (GHC.Num.Integer.IS 10000#)
                                           }
                                      of y1 [Occ=Once1]
                                      { __DEFAULT ->
                                      case PlutusTx.Builtins.Internal.lessThanEqualsInteger x1 y1
                                      of b1 [Occ=Once1]
                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                      PlutusTx.Builtins.Internal.ifThenElse
                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                      }
                                      }
                                      }
                                 of validWindow [Occ=Once1!]
                                 { __DEFAULT ->
                                 case PlutusTx.Builtins.Internal.appendString
                                        (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                           (GHC.CString.unpackCString# "Invalid time window - Start: "#))
                                        (PlutusTx.Builtins.Internal.appendString
                                           (PlutusTx.Show.TH.concatBuiltinStrings
                                              (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                 (GHC.Num.Integer.IS 0#)
                                                 startTimeInt
                                                 (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString)))
                                           (PlutusTx.Builtins.Internal.appendString
                                              (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                 (GHC.CString.unpackCString# " End: "#))
                                              (PlutusTx.Show.TH.concatBuiltinStrings
                                                 (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                    (GHC.Num.Integer.IS 0#)
                                                    endTimeInt
                                                    (GHC.Types.[]
                                                       @PlutusTx.Builtins.Internal.BuiltinString)))))
                                 of str1 [Occ=Once1]
                                 { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                 case validWindow of {
                                   GHC.Types.False ->
                                     PlutusTx.Builtins.Internal.trace
                                       @GHC.Types.Bool str1 GHC.Types.False;
                                   GHC.Types.True -> GHC.Types.True
                                 }
                                 }
                                 }
                                 }
                                 }
                             }
                             }
                         }
                         }
Context: Compiling expr: case case case ipv of
                                   { PlutusLedgerApi.V1.Interval.Interval ds1 [Occ=Once1]
                                                                          _ [Occ=Dead] ->
                                   ds1
                                   }
                              of
                              { PlutusLedgerApi.V1.Interval.LowerBound ds_d9sM [Occ=Once1!]
                                                                       _ [Occ=Dead] ->
                              case ds_d9sM of {
                                __DEFAULT ->
                                  case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                         (GHC.CString.unpackCString#
                                            "Invalid: Missing lower bound for validity interval"#)
                                  of str1 [Occ=Once1]
                                  { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                  case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                  { () ->
                                  PlutusTx.Builtins.Internal.error
                                    @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                  }
                                  };
                                PlutusLedgerApi.V1.Interval.Finite startTime [Occ=Once1] ->
                                  case case ipv of
                                       { PlutusLedgerApi.V1.Interval.Interval _ [Occ=Dead]
                                                                              ds2 [Occ=Once1] ->
                                       ds2
                                       }
                                  of
                                  { PlutusLedgerApi.V1.Interval.UpperBound ds_d9sG [Occ=Once1!]
                                                                           _ [Occ=Dead] ->
                                  case ds_d9sG of {
                                    __DEFAULT ->
                                      case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                             (GHC.CString.unpackCString#
                                                "Invalid: Missing upper bound for validity interval"#)
                                      of str1 [Occ=Once1]
                                      { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                      case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                      { () ->
                                      PlutusTx.Builtins.Internal.error
                                        @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                      }
                                      };
                                    PlutusLedgerApi.V1.Interval.Finite endTime [Occ=Once1] ->
                                      case endTime
                                           `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                   :: GHC.Types.Coercible
                                                        PlutusLedgerApi.V1.Time.POSIXTime
                                                        GHC.Num.Integer.Integer)
                                      of endTimeInt
                                      { __DEFAULT ->
                                      case startTime
                                           `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                   :: GHC.Types.Coercible
                                                        PlutusLedgerApi.V1.Time.POSIXTime
                                                        GHC.Num.Integer.Integer)
                                      of startTimeInt
                                      { __DEFAULT ->
                                      case case (endTimeInt
                                                 `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                         :: GHC.Types.Coercible
                                                              GHC.Num.Integer.Integer
                                                              PlutusLedgerApi.V1.Time.POSIXTime))
                                                `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                        :: GHC.Types.Coercible
                                                             PlutusLedgerApi.V1.Time.POSIXTime
                                                             GHC.Num.Integer.Integer)
                                           of x1 [Occ=Once1]
                                           { __DEFAULT ->
                                           case case (startTimeInt
                                                      `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                              :: GHC.Types.Coercible
                                                                   GHC.Num.Integer.Integer
                                                                   PlutusLedgerApi.V1.Time.POSIXTime))
                                                     `cast` (Sym (SelCo:Fun(arg)
                                                                      (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                       %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                       %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                       ; Sym (PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                                  <PlutusLedgerApi.V1.Time.POSIXTime>_N)
                                                                       ; PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                             <PlutusLedgerApi.V1.Time.POSIXTime>_N))
                                                             :: GHC.Types.Coercible
                                                                  PlutusLedgerApi.V1.Time.POSIXTime
                                                                  GHC.Num.Integer.Integer)
                                                of x1 [Occ=Once1]
                                                { __DEFAULT ->
                                                PlutusTx.Builtins.Internal.addInteger
                                                  x1 (GHC.Num.Integer.IS 10000#)
                                                }
                                           of y1 [Occ=Once1]
                                           { __DEFAULT ->
                                           case PlutusTx.Builtins.Internal.lessThanEqualsInteger x1 y1
                                           of b1 [Occ=Once1]
                                           { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                           PlutusTx.Builtins.Internal.ifThenElse
                                             @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                           }
                                           }
                                           }
                                      of validWindow [Occ=Once1!]
                                      { __DEFAULT ->
                                      case PlutusTx.Builtins.Internal.appendString
                                             (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                (GHC.CString.unpackCString#
                                                   "Invalid time window - Start: "#))
                                             (PlutusTx.Builtins.Internal.appendString
                                                (PlutusTx.Show.TH.concatBuiltinStrings
                                                   (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                      (GHC.Num.Integer.IS 0#)
                                                      startTimeInt
                                                      (GHC.Types.[]
                                                         @PlutusTx.Builtins.Internal.BuiltinString)))
                                                (PlutusTx.Builtins.Internal.appendString
                                                   (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString# " End: "#))
                                                   (PlutusTx.Show.TH.concatBuiltinStrings
                                                      (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                         (GHC.Num.Integer.IS 0#)
                                                         endTimeInt
                                                         (GHC.Types.[]
                                                            @PlutusTx.Builtins.Internal.BuiltinString)))))
                                      of str1 [Occ=Once1]
                                      { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                      case validWindow of {
                                        GHC.Types.False ->
                                          PlutusTx.Builtins.Internal.trace
                                            @GHC.Types.Bool str1 GHC.Types.False;
                                        GHC.Types.True -> GHC.Types.True
                                      }
                                      }
                                      }
                                      }
                                      }
                                  }
                                  }
                              }
                              }
                         of validateMintingWindow [Occ=Once1!]
                         { __DEFAULT ->
                         let {
                           ds_d9s7
                             :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                  PlutusLedgerApi.V1.Value.TokenName, GHC.Num.Integer.Integer)]
                           [LclId,
                            Unf=Unf{Src=<vanilla>, TopLvl=False,
                                    Value=False, ConLike=False, WorkFree=False, Expandable=False,
                                    Guidance=IF_ARGS [] 20 0}]
                           ds_d9s7 = PlutusLedgerApi.V1.Value.flattenValue ipv } in
                         case join {
                                fail_d9ss [Occ=Once4!T[1]] :: (# #) -> GHC.Types.Bool
                                [LclId[JoinId(1)(Nothing)],
                                 Arity=1,
                                 Str=<L>,
                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                         Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                         Guidance=IF_ARGS [0] 490 0}]
                                fail_d9ss _ [Occ=Dead, OS=OneShot]
                                  = case ds_d9s7 of ds_X3 [Occ=Once1] { __DEFAULT ->
                                    case PlutusTx.Builtins.Internal.appendString
                                           (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                              (GHC.CString.unpackCString#
                                                 "Invalid number of minted tokens: "#))
                                           (let {
                                              z1 [Occ=OnceL1] :: GHC.Num.Integer.Integer
                                              [LclId,
                                               Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                       Value=True, ConLike=True, WorkFree=True,
                                                       Expandable=True,
                                                       Guidance=IF_ARGS [] 10 10}]
                                              z1 = GHC.Num.Integer.IS 0# } in
                                            letrec {
                                              go [Occ=LoopBreaker]
                                                :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                     PlutusLedgerApi.V1.Value.TokenName,
                                                     GHC.Num.Integer.Integer)]
                                                   -> GHC.Num.Integer.Integer
                                              [LclId,
                                               Arity=1,
                                               Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                       Value=True, ConLike=True, WorkFree=True,
                                                       Expandable=True,
                                                       Guidance=IF_ARGS [30] 100 0}]
                                              go
                                                = \ (ds [Occ=Once1!]
                                                       :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                            PlutusLedgerApi.V1.Value.TokenName,
                                                            GHC.Num.Integer.Integer)]) ->
                                                    case ds of {
                                                      [] -> z1;
                                                      : x [Occ=Once1!] xs [Occ=Once1] ->
                                                        case x of
                                                        { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                                                        case go xs of acc1 [Occ=Once1] { __DEFAULT ->
                                                        PlutusTx.Builtins.Internal.addInteger
                                                          acc1 (GHC.Num.Integer.IS 1#)
                                                        }
                                                        }
                                                    }; } in
                                            case go ds_X3 of x1 [Occ=Once1] { __DEFAULT ->
                                            PlutusTx.Show.TH.concatBuiltinStrings
                                              (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                 (GHC.Num.Integer.IS 0#)
                                                 x1
                                                 (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString))
                                            })
                                    of str1 [Occ=Once1]
                                    { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                    case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                    { () ->
                                    PlutusTx.Builtins.Internal.error
                                      @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                    }
                                    }
                                    } } in
                              case ds_d9s7 of {
                                [] -> jump fail_d9ss GHC.Prim.(##);
                                : ds_d9sk [Occ=Once1!] ds_d9sl [Occ=Once1!] ->
                                  case ds_d9sk of
                                  { (cs1 [Occ=Once1!], tn1 [Occ=Once1], q1 [Occ=Once1]) ->
                                  case ds_d9sl of {
                                    [] -> jump fail_d9ss GHC.Prim.(##);
                                    : ds_d9sm [Occ=Once1!] ds_d9sn [Occ=Once1!] ->
                                      case ds_d9sm of
                                      { (cs2 [Occ=Once1!], tn2 [Occ=Once1], q2 [Occ=Once1]) ->
                                      case ds_d9sn of {
                                        [] -> jump fail_d9ss GHC.Prim.(##);
                                        : ds_d9so [Occ=Once1!] ds_d9sp [Occ=Once1!] ->
                                          case ds_d9so of
                                          { (cs3 [Occ=Once1!], tn3 [Occ=Once1], q3 [Occ=Once1]) ->
                                          case ds_d9sp of {
                                            [] ->
                                              let {
                                                conditions_s9SM [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SM
                                                  = case cs1
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of x1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol ctx)
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of y1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SN [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 140 0}]
                                                conditions_s9SN
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid currency symbol for token 1"#) } in
                                              let {
                                                conditions_s9SO [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SO = (conditions_s9SM, conditions_s9SN) } in
                                              let {
                                                conditions_s9SP [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SP
                                                  = case cs2
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of x1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol ctx)
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of y1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SQ [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 140 0}]
                                                conditions_s9SQ
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid currency symbol for token 2"#) } in
                                              let {
                                                conditions_s9SR [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SR = (conditions_s9SP, conditions_s9SQ) } in
                                              let {
                                                conditions_s9SS [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SS
                                                  = case cs3
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of x1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol ctx)
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of y1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9ST [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 140 0}]
                                                conditions_s9ST
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid currency symbol for token 3"#) } in
                                              let {
                                                conditions_s9SU [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SU = (conditions_s9SS, conditions_s9ST) } in
                                              let {
                                                conditions_s9SV [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 100 0}]
                                                conditions_s9SV
                                                  = case q1 of x1 [Occ=Once1] { __DEFAULT ->
                                                    case PlutusTx.Builtins.Internal.equalsInteger
                                                           x1 (GHC.Num.Integer.IS 1#)
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SW [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SW
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid quantity for token 1"#) } in
                                              let {
                                                conditions_s9SX [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SX = (conditions_s9SV, conditions_s9SW) } in
                                              let {
                                                conditions_s9SY [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 100 0}]
                                                conditions_s9SY
                                                  = case q2 of x1 [Occ=Once1] { __DEFAULT ->
                                                    case PlutusTx.Builtins.Internal.equalsInteger
                                                           x1 (GHC.Num.Integer.IS 1#)
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SZ [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SZ
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid quantity for token 2"#) } in
                                              let {
                                                conditions_s9T0 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T0 = (conditions_s9SY, conditions_s9SZ) } in
                                              let {
                                                conditions_s9T1 [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 100 0}]
                                                conditions_s9T1
                                                  = case q3 of x1 [Occ=Once1] { __DEFAULT ->
                                                    case PlutusTx.Builtins.Internal.equalsInteger
                                                           x1 (GHC.Num.Integer.IS 1#)
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9T2 [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9T2
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid quantity for token 3"#) } in
                                              let {
                                                conditions_s9T3 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T3 = (conditions_s9T1, conditions_s9T2) } in
                                              let {
                                                conditions_s9T4 [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 30 0}]
                                                conditions_s9T4
                                                  = PlutusTx.Builtins.equalsByteString
                                                      (tn1
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                         ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                    <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                         ; PlutusTx.Eq.N:Eq[0]
                                                                               <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (coinFlipTokenName_s9Di
                                                       `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                               ; Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                               :: GHC.Types.Coercible
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                              let {
                                                conditions_s9T5 [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 150 0}]
                                                conditions_s9T5
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid token name: expected CoinFlip"#) } in
                                              let {
                                                conditions_s9T6 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T6 = (conditions_s9T4, conditions_s9T5) } in
                                              let {
                                                conditions_s9T7 [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 30 0}]
                                                conditions_s9T7
                                                  = PlutusTx.Builtins.equalsByteString
                                                      (tn2
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                         ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                    <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                         ; PlutusTx.Eq.N:Eq[0]
                                                                               <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (vrfHolderTokenName_s9Dh
                                                       `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                               ; Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                               :: GHC.Types.Coercible
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                              let {
                                                conditions_s9T8 [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 150 0}]
                                                conditions_s9T8
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid token name: expected VRFHolder"#) } in
                                              let {
                                                conditions_s9T9 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T9 = (conditions_s9T7, conditions_s9T8) } in
                                              let {
                                                conditions_s9Ta [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 30 0}]
                                                conditions_s9Ta
                                                  = PlutusTx.Builtins.equalsByteString
                                                      (tn3
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                         ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                    <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                         ; PlutusTx.Eq.N:Eq[0]
                                                                               <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (housePotTokenName_s9Dg
                                                       `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                               ; Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                               :: GHC.Types.Coercible
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                              let {
                                                conditions_s9Tb [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 150 0}]
                                                conditions_s9Tb
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid token name: expected HousePot"#) } in
                                              let {
                                                conditions_s9Tc [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tc = (conditions_s9Ta, conditions_s9Tb) } in
                                              let {
                                                conditions_s9Td [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Td
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9Tc
                                                      (GHC.Types.[]
                                                         @(GHC.Types.Bool,
                                                           PlutusTx.Builtins.Internal.BuiltinString)) } in
                                              let {
                                                conditions_s9Te [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Te
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T9
                                                      conditions_s9Td } in
                                              let {
                                                conditions_s9Tf [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tf
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T6
                                                      conditions_s9Te } in
                                              let {
                                                conditions_s9Tg [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tg
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T3
                                                      conditions_s9Tf } in
                                              let {
                                                conditions_s9Th [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Th
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T0
                                                      conditions_s9Tg } in
                                              let {
                                                conditions_s9Ti [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Ti
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9SX
                                                      conditions_s9Th } in
                                              let {
                                                conditions_s9Tj [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tj
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9SU
                                                      conditions_s9Ti } in
                                              let {
                                                conditions_s9Tk [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tk
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9SR
                                                      conditions_s9Tj } in
                                              joinrec {
                                                go [Occ=LoopBreakerT[1]]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                     -> GHC.Types.Bool
                                                [LclId[JoinId(1)(Nothing)],
                                                 Arity=1,
                                                 Str=<L>,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [30] 84 20}]
                                                go (ds [Occ=Once1!]
                                                      :: [(GHC.Types.Bool,
                                                           PlutusTx.Builtins.Internal.BuiltinString)])
                                                  = case ds of {
                                                      [] -> GHC.Types.True;
                                                      : x [Occ=Once1!] xs [Occ=Once1] ->
                                                        case case x of
                                                             { (condition [Occ=Once1], msg [Occ=Once1]) ->
                                                             PlutusTx.Trace.traceIfFalse msg condition
                                                             }
                                                        of {
                                                          GHC.Types.False -> GHC.Types.False;
                                                          GHC.Types.True -> jump go xs
                                                        }
                                                    }; } in
                                              jump go
                                                (GHC.Types.:
                                                   @(GHC.Types.Bool,
                                                     PlutusTx.Builtins.Internal.BuiltinString)
                                                   conditions_s9SO
                                                   conditions_s9Tk);
                                            : _ [Occ=Dead] _ [Occ=Dead] -> jump fail_d9ss GHC.Prim.(##)
                                          }
                                          }
                                      }
                                      }
                                  }
                                  }
                              }
                         of mintedExactlyThreeTokens [Occ=Once1!]
                         { __DEFAULT ->
                         PlutusTx.List.and
                           (GHC.Types.:
                              @GHC.Types.Bool
                              (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                      (GHC.CString.unpackCString#
                                         "Unauthorized: Transaction not signed by correct key"#)
                               of str1 [Occ=Once1]
                               { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                               case joinrec {
                                      go12 [Occ=LoopBreakerT[1]]
                                        :: [PlutusLedgerApi.V1.Crypto.PubKeyHash] -> GHC.Types.Bool
                                      [LclId[JoinId(1)(Nothing)],
                                       Arity=1,
                                       Str=<L>,
                                       Unf=Unf{Src=<vanilla>, TopLvl=False,
                                               Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                               Guidance=IF_ARGS [30] 134 20}]
                                      go12 (ds13 [Occ=Once1!] :: [PlutusLedgerApi.V1.Crypto.PubKeyHash])
                                        = case ds13 of {
                                            [] -> GHC.Types.False;
                                            : x2 [Occ=Once1!] xs [Occ=Once1] ->
                                              case x2
                                                   `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                                           :: GHC.Types.Coercible
                                                                PlutusLedgerApi.V1.Crypto.PubKeyHash
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                              of y1 [Occ=Once1]
                                              { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                              case PlutusTx.Builtins.Internal.equalsByteString nt_s9Qy y1
                                              of b1 [Occ=Once1]
                                              { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                              case PlutusTx.Builtins.Internal.ifThenElse
                                                     @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                              of {
                                                GHC.Types.False -> jump go12 xs;
                                                GHC.Types.True -> GHC.Types.True
                                              }
                                              }
                                              }
                                          }; } in
                                    jump go12 ipv
                               of {
                                 GHC.Types.False ->
                                   PlutusTx.Builtins.Internal.trace
                                     @GHC.Types.Bool str1 GHC.Types.False;
                                 GHC.Types.True -> GHC.Types.True
                               }
                               })
                              (GHC.Types.:
                                 @GHC.Types.Bool
                                 (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                         (GHC.CString.unpackCString#
                                            "Invalid: Must mint exactly three tokens"#)
                                  of str1 [Occ=Once1]
                                  { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                  case mintedExactlyThreeTokens of {
                                    GHC.Types.False ->
                                      PlutusTx.Builtins.Internal.trace
                                        @GHC.Types.Bool str1 GHC.Types.False;
                                    GHC.Types.True -> GHC.Types.True
                                  }
                                  })
                                 (GHC.Types.:
                                    @GHC.Types.Bool
                                    (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                            (GHC.CString.unpackCString#
                                               "Invalid: Transaction outside minting window"#)
                                     of str1 [Occ=Once1]
                                     { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                     case validateMintingWindow of {
                                       GHC.Types.False ->
                                         PlutusTx.Builtins.Internal.trace
                                           @GHC.Types.Bool str1 GHC.Types.False;
                                       GHC.Types.True -> GHC.Types.True
                                     }
                                     })
                                    (GHC.Types.[] @GHC.Types.Bool))))
                         }
                         }
Context: Creating alternative: PlutusLedgerApi.V2.Contexts.TxInfo
Context: Compiling expr: case ipv of
                         { PlutusLedgerApi.V2.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                              _ [Occ=Dead] _ [Occ=Dead] ipv [Occ=Once1]
                                                              _ [Occ=Dead] _ [Occ=Dead] ipv ipv [Occ=Once1]
                                                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                         case case case ipv of
                                   { PlutusLedgerApi.V1.Interval.Interval ds1 [Occ=Once1]
                                                                          _ [Occ=Dead] ->
                                   ds1
                                   }
                              of
                              { PlutusLedgerApi.V1.Interval.LowerBound ds_d9sM [Occ=Once1!]
                                                                       _ [Occ=Dead] ->
                              case ds_d9sM of {
                                __DEFAULT ->
                                  case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                         (GHC.CString.unpackCString#
                                            "Invalid: Missing lower bound for validity interval"#)
                                  of str1 [Occ=Once1]
                                  { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                  case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                  { () ->
                                  PlutusTx.Builtins.Internal.error
                                    @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                  }
                                  };
                                PlutusLedgerApi.V1.Interval.Finite startTime [Occ=Once1] ->
                                  case case ipv of
                                       { PlutusLedgerApi.V1.Interval.Interval _ [Occ=Dead]
                                                                              ds2 [Occ=Once1] ->
                                       ds2
                                       }
                                  of
                                  { PlutusLedgerApi.V1.Interval.UpperBound ds_d9sG [Occ=Once1!]
                                                                           _ [Occ=Dead] ->
                                  case ds_d9sG of {
                                    __DEFAULT ->
                                      case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                             (GHC.CString.unpackCString#
                                                "Invalid: Missing upper bound for validity interval"#)
                                      of str1 [Occ=Once1]
                                      { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                      case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                      { () ->
                                      PlutusTx.Builtins.Internal.error
                                        @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                      }
                                      };
                                    PlutusLedgerApi.V1.Interval.Finite endTime [Occ=Once1] ->
                                      case endTime
                                           `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                   :: GHC.Types.Coercible
                                                        PlutusLedgerApi.V1.Time.POSIXTime
                                                        GHC.Num.Integer.Integer)
                                      of endTimeInt
                                      { __DEFAULT ->
                                      case startTime
                                           `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                   :: GHC.Types.Coercible
                                                        PlutusLedgerApi.V1.Time.POSIXTime
                                                        GHC.Num.Integer.Integer)
                                      of startTimeInt
                                      { __DEFAULT ->
                                      case case (endTimeInt
                                                 `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                         :: GHC.Types.Coercible
                                                              GHC.Num.Integer.Integer
                                                              PlutusLedgerApi.V1.Time.POSIXTime))
                                                `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                        :: GHC.Types.Coercible
                                                             PlutusLedgerApi.V1.Time.POSIXTime
                                                             GHC.Num.Integer.Integer)
                                           of x1 [Occ=Once1]
                                           { __DEFAULT ->
                                           case case (startTimeInt
                                                      `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                              :: GHC.Types.Coercible
                                                                   GHC.Num.Integer.Integer
                                                                   PlutusLedgerApi.V1.Time.POSIXTime))
                                                     `cast` (Sym (SelCo:Fun(arg)
                                                                      (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                       %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                       %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                       ; Sym (PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                                  <PlutusLedgerApi.V1.Time.POSIXTime>_N)
                                                                       ; PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                             <PlutusLedgerApi.V1.Time.POSIXTime>_N))
                                                             :: GHC.Types.Coercible
                                                                  PlutusLedgerApi.V1.Time.POSIXTime
                                                                  GHC.Num.Integer.Integer)
                                                of x1 [Occ=Once1]
                                                { __DEFAULT ->
                                                PlutusTx.Builtins.Internal.addInteger
                                                  x1 (GHC.Num.Integer.IS 10000#)
                                                }
                                           of y1 [Occ=Once1]
                                           { __DEFAULT ->
                                           case PlutusTx.Builtins.Internal.lessThanEqualsInteger x1 y1
                                           of b1 [Occ=Once1]
                                           { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                           PlutusTx.Builtins.Internal.ifThenElse
                                             @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                           }
                                           }
                                           }
                                      of validWindow [Occ=Once1!]
                                      { __DEFAULT ->
                                      case PlutusTx.Builtins.Internal.appendString
                                             (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                (GHC.CString.unpackCString#
                                                   "Invalid time window - Start: "#))
                                             (PlutusTx.Builtins.Internal.appendString
                                                (PlutusTx.Show.TH.concatBuiltinStrings
                                                   (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                      (GHC.Num.Integer.IS 0#)
                                                      startTimeInt
                                                      (GHC.Types.[]
                                                         @PlutusTx.Builtins.Internal.BuiltinString)))
                                                (PlutusTx.Builtins.Internal.appendString
                                                   (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString# " End: "#))
                                                   (PlutusTx.Show.TH.concatBuiltinStrings
                                                      (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                         (GHC.Num.Integer.IS 0#)
                                                         endTimeInt
                                                         (GHC.Types.[]
                                                            @PlutusTx.Builtins.Internal.BuiltinString)))))
                                      of str1 [Occ=Once1]
                                      { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                      case validWindow of {
                                        GHC.Types.False ->
                                          PlutusTx.Builtins.Internal.trace
                                            @GHC.Types.Bool str1 GHC.Types.False;
                                        GHC.Types.True -> GHC.Types.True
                                      }
                                      }
                                      }
                                      }
                                      }
                                  }
                                  }
                              }
                              }
                         of validateMintingWindow [Occ=Once1!]
                         { __DEFAULT ->
                         let {
                           ds_d9s7
                             :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                  PlutusLedgerApi.V1.Value.TokenName, GHC.Num.Integer.Integer)]
                           [LclId,
                            Unf=Unf{Src=<vanilla>, TopLvl=False,
                                    Value=False, ConLike=False, WorkFree=False, Expandable=False,
                                    Guidance=IF_ARGS [] 20 0}]
                           ds_d9s7 = PlutusLedgerApi.V1.Value.flattenValue ipv } in
                         case join {
                                fail_d9ss [Occ=Once4!T[1]] :: (# #) -> GHC.Types.Bool
                                [LclId[JoinId(1)(Nothing)],
                                 Arity=1,
                                 Str=<L>,
                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                         Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                         Guidance=IF_ARGS [0] 490 0}]
                                fail_d9ss _ [Occ=Dead, OS=OneShot]
                                  = case ds_d9s7 of ds_X3 [Occ=Once1] { __DEFAULT ->
                                    case PlutusTx.Builtins.Internal.appendString
                                           (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                              (GHC.CString.unpackCString#
                                                 "Invalid number of minted tokens: "#))
                                           (let {
                                              z1 [Occ=OnceL1] :: GHC.Num.Integer.Integer
                                              [LclId,
                                               Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                       Value=True, ConLike=True, WorkFree=True,
                                                       Expandable=True,
                                                       Guidance=IF_ARGS [] 10 10}]
                                              z1 = GHC.Num.Integer.IS 0# } in
                                            letrec {
                                              go [Occ=LoopBreaker]
                                                :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                     PlutusLedgerApi.V1.Value.TokenName,
                                                     GHC.Num.Integer.Integer)]
                                                   -> GHC.Num.Integer.Integer
                                              [LclId,
                                               Arity=1,
                                               Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                       Value=True, ConLike=True, WorkFree=True,
                                                       Expandable=True,
                                                       Guidance=IF_ARGS [30] 100 0}]
                                              go
                                                = \ (ds [Occ=Once1!]
                                                       :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                            PlutusLedgerApi.V1.Value.TokenName,
                                                            GHC.Num.Integer.Integer)]) ->
                                                    case ds of {
                                                      [] -> z1;
                                                      : x [Occ=Once1!] xs [Occ=Once1] ->
                                                        case x of
                                                        { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                                                        case go xs of acc1 [Occ=Once1] { __DEFAULT ->
                                                        PlutusTx.Builtins.Internal.addInteger
                                                          acc1 (GHC.Num.Integer.IS 1#)
                                                        }
                                                        }
                                                    }; } in
                                            case go ds_X3 of x1 [Occ=Once1] { __DEFAULT ->
                                            PlutusTx.Show.TH.concatBuiltinStrings
                                              (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                 (GHC.Num.Integer.IS 0#)
                                                 x1
                                                 (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString))
                                            })
                                    of str1 [Occ=Once1]
                                    { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                    case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                    { () ->
                                    PlutusTx.Builtins.Internal.error
                                      @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                    }
                                    }
                                    } } in
                              case ds_d9s7 of {
                                [] -> jump fail_d9ss GHC.Prim.(##);
                                : ds_d9sk [Occ=Once1!] ds_d9sl [Occ=Once1!] ->
                                  case ds_d9sk of
                                  { (cs1 [Occ=Once1!], tn1 [Occ=Once1], q1 [Occ=Once1]) ->
                                  case ds_d9sl of {
                                    [] -> jump fail_d9ss GHC.Prim.(##);
                                    : ds_d9sm [Occ=Once1!] ds_d9sn [Occ=Once1!] ->
                                      case ds_d9sm of
                                      { (cs2 [Occ=Once1!], tn2 [Occ=Once1], q2 [Occ=Once1]) ->
                                      case ds_d9sn of {
                                        [] -> jump fail_d9ss GHC.Prim.(##);
                                        : ds_d9so [Occ=Once1!] ds_d9sp [Occ=Once1!] ->
                                          case ds_d9so of
                                          { (cs3 [Occ=Once1!], tn3 [Occ=Once1], q3 [Occ=Once1]) ->
                                          case ds_d9sp of {
                                            [] ->
                                              let {
                                                conditions_s9SM [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SM
                                                  = case cs1
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of x1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol ctx)
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of y1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SN [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 140 0}]
                                                conditions_s9SN
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid currency symbol for token 1"#) } in
                                              let {
                                                conditions_s9SO [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SO = (conditions_s9SM, conditions_s9SN) } in
                                              let {
                                                conditions_s9SP [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SP
                                                  = case cs2
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of x1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol ctx)
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of y1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SQ [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 140 0}]
                                                conditions_s9SQ
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid currency symbol for token 2"#) } in
                                              let {
                                                conditions_s9SR [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SR = (conditions_s9SP, conditions_s9SQ) } in
                                              let {
                                                conditions_s9SS [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SS
                                                  = case cs3
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of x1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol ctx)
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of y1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9ST [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 140 0}]
                                                conditions_s9ST
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid currency symbol for token 3"#) } in
                                              let {
                                                conditions_s9SU [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SU = (conditions_s9SS, conditions_s9ST) } in
                                              let {
                                                conditions_s9SV [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 100 0}]
                                                conditions_s9SV
                                                  = case q1 of x1 [Occ=Once1] { __DEFAULT ->
                                                    case PlutusTx.Builtins.Internal.equalsInteger
                                                           x1 (GHC.Num.Integer.IS 1#)
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SW [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SW
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid quantity for token 1"#) } in
                                              let {
                                                conditions_s9SX [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SX = (conditions_s9SV, conditions_s9SW) } in
                                              let {
                                                conditions_s9SY [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 100 0}]
                                                conditions_s9SY
                                                  = case q2 of x1 [Occ=Once1] { __DEFAULT ->
                                                    case PlutusTx.Builtins.Internal.equalsInteger
                                                           x1 (GHC.Num.Integer.IS 1#)
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SZ [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SZ
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid quantity for token 2"#) } in
                                              let {
                                                conditions_s9T0 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T0 = (conditions_s9SY, conditions_s9SZ) } in
                                              let {
                                                conditions_s9T1 [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 100 0}]
                                                conditions_s9T1
                                                  = case q3 of x1 [Occ=Once1] { __DEFAULT ->
                                                    case PlutusTx.Builtins.Internal.equalsInteger
                                                           x1 (GHC.Num.Integer.IS 1#)
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9T2 [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9T2
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid quantity for token 3"#) } in
                                              let {
                                                conditions_s9T3 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T3 = (conditions_s9T1, conditions_s9T2) } in
                                              let {
                                                conditions_s9T4 [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 30 0}]
                                                conditions_s9T4
                                                  = PlutusTx.Builtins.equalsByteString
                                                      (tn1
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                         ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                    <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                         ; PlutusTx.Eq.N:Eq[0]
                                                                               <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (coinFlipTokenName_s9Di
                                                       `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                               ; Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                               :: GHC.Types.Coercible
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                              let {
                                                conditions_s9T5 [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 150 0}]
                                                conditions_s9T5
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid token name: expected CoinFlip"#) } in
                                              let {
                                                conditions_s9T6 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T6 = (conditions_s9T4, conditions_s9T5) } in
                                              let {
                                                conditions_s9T7 [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 30 0}]
                                                conditions_s9T7
                                                  = PlutusTx.Builtins.equalsByteString
                                                      (tn2
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                         ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                    <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                         ; PlutusTx.Eq.N:Eq[0]
                                                                               <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (vrfHolderTokenName_s9Dh
                                                       `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                               ; Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                               :: GHC.Types.Coercible
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                              let {
                                                conditions_s9T8 [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 150 0}]
                                                conditions_s9T8
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid token name: expected VRFHolder"#) } in
                                              let {
                                                conditions_s9T9 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T9 = (conditions_s9T7, conditions_s9T8) } in
                                              let {
                                                conditions_s9Ta [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 30 0}]
                                                conditions_s9Ta
                                                  = PlutusTx.Builtins.equalsByteString
                                                      (tn3
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                         ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                    <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                         ; PlutusTx.Eq.N:Eq[0]
                                                                               <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (housePotTokenName_s9Dg
                                                       `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                               ; Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                               :: GHC.Types.Coercible
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                              let {
                                                conditions_s9Tb [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 150 0}]
                                                conditions_s9Tb
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid token name: expected HousePot"#) } in
                                              let {
                                                conditions_s9Tc [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tc = (conditions_s9Ta, conditions_s9Tb) } in
                                              let {
                                                conditions_s9Td [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Td
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9Tc
                                                      (GHC.Types.[]
                                                         @(GHC.Types.Bool,
                                                           PlutusTx.Builtins.Internal.BuiltinString)) } in
                                              let {
                                                conditions_s9Te [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Te
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T9
                                                      conditions_s9Td } in
                                              let {
                                                conditions_s9Tf [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tf
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T6
                                                      conditions_s9Te } in
                                              let {
                                                conditions_s9Tg [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tg
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T3
                                                      conditions_s9Tf } in
                                              let {
                                                conditions_s9Th [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Th
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T0
                                                      conditions_s9Tg } in
                                              let {
                                                conditions_s9Ti [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Ti
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9SX
                                                      conditions_s9Th } in
                                              let {
                                                conditions_s9Tj [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tj
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9SU
                                                      conditions_s9Ti } in
                                              let {
                                                conditions_s9Tk [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tk
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9SR
                                                      conditions_s9Tj } in
                                              joinrec {
                                                go [Occ=LoopBreakerT[1]]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                     -> GHC.Types.Bool
                                                [LclId[JoinId(1)(Nothing)],
                                                 Arity=1,
                                                 Str=<L>,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [30] 84 20}]
                                                go (ds [Occ=Once1!]
                                                      :: [(GHC.Types.Bool,
                                                           PlutusTx.Builtins.Internal.BuiltinString)])
                                                  = case ds of {
                                                      [] -> GHC.Types.True;
                                                      : x [Occ=Once1!] xs [Occ=Once1] ->
                                                        case case x of
                                                             { (condition [Occ=Once1], msg [Occ=Once1]) ->
                                                             PlutusTx.Trace.traceIfFalse msg condition
                                                             }
                                                        of {
                                                          GHC.Types.False -> GHC.Types.False;
                                                          GHC.Types.True -> jump go xs
                                                        }
                                                    }; } in
                                              jump go
                                                (GHC.Types.:
                                                   @(GHC.Types.Bool,
                                                     PlutusTx.Builtins.Internal.BuiltinString)
                                                   conditions_s9SO
                                                   conditions_s9Tk);
                                            : _ [Occ=Dead] _ [Occ=Dead] -> jump fail_d9ss GHC.Prim.(##)
                                          }
                                          }
                                      }
                                      }
                                  }
                                  }
                              }
                         of mintedExactlyThreeTokens [Occ=Once1!]
                         { __DEFAULT ->
                         PlutusTx.List.and
                           (GHC.Types.:
                              @GHC.Types.Bool
                              (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                      (GHC.CString.unpackCString#
                                         "Unauthorized: Transaction not signed by correct key"#)
                               of str1 [Occ=Once1]
                               { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                               case joinrec {
                                      go12 [Occ=LoopBreakerT[1]]
                                        :: [PlutusLedgerApi.V1.Crypto.PubKeyHash] -> GHC.Types.Bool
                                      [LclId[JoinId(1)(Nothing)],
                                       Arity=1,
                                       Str=<L>,
                                       Unf=Unf{Src=<vanilla>, TopLvl=False,
                                               Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                               Guidance=IF_ARGS [30] 134 20}]
                                      go12 (ds13 [Occ=Once1!] :: [PlutusLedgerApi.V1.Crypto.PubKeyHash])
                                        = case ds13 of {
                                            [] -> GHC.Types.False;
                                            : x2 [Occ=Once1!] xs [Occ=Once1] ->
                                              case x2
                                                   `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                                           :: GHC.Types.Coercible
                                                                PlutusLedgerApi.V1.Crypto.PubKeyHash
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                              of y1 [Occ=Once1]
                                              { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                              case PlutusTx.Builtins.Internal.equalsByteString nt_s9Qy y1
                                              of b1 [Occ=Once1]
                                              { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                              case PlutusTx.Builtins.Internal.ifThenElse
                                                     @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                              of {
                                                GHC.Types.False -> jump go12 xs;
                                                GHC.Types.True -> GHC.Types.True
                                              }
                                              }
                                              }
                                          }; } in
                                    jump go12 ipv
                               of {
                                 GHC.Types.False ->
                                   PlutusTx.Builtins.Internal.trace
                                     @GHC.Types.Bool str1 GHC.Types.False;
                                 GHC.Types.True -> GHC.Types.True
                               }
                               })
                              (GHC.Types.:
                                 @GHC.Types.Bool
                                 (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                         (GHC.CString.unpackCString#
                                            "Invalid: Must mint exactly three tokens"#)
                                  of str1 [Occ=Once1]
                                  { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                  case mintedExactlyThreeTokens of {
                                    GHC.Types.False ->
                                      PlutusTx.Builtins.Internal.trace
                                        @GHC.Types.Bool str1 GHC.Types.False;
                                    GHC.Types.True -> GHC.Types.True
                                  }
                                  })
                                 (GHC.Types.:
                                    @GHC.Types.Bool
                                    (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                            (GHC.CString.unpackCString#
                                               "Invalid: Transaction outside minting window"#)
                                     of str1 [Occ=Once1]
                                     { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                     case validateMintingWindow of {
                                       GHC.Types.False ->
                                         PlutusTx.Builtins.Internal.trace
                                           @GHC.Types.Bool str1 GHC.Types.False;
                                       GHC.Types.True -> GHC.Types.True
                                     }
                                     })
                                    (GHC.Types.[] @GHC.Types.Bool))))
                         }
                         }
                         }
Context: Creating alternative: PlutusLedgerApi.V2.Contexts.ScriptContext
Context: Compiling expr: case ctx of ctx
                         { PlutusLedgerApi.V2.Contexts.ScriptContext ipv [Occ=Once1!]
                                                                     _ [Occ=Dead] ->
                         case ipv of
                         { PlutusLedgerApi.V2.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                              _ [Occ=Dead] _ [Occ=Dead] ipv [Occ=Once1]
                                                              _ [Occ=Dead] _ [Occ=Dead] ipv ipv [Occ=Once1]
                                                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                         case case case ipv of
                                   { PlutusLedgerApi.V1.Interval.Interval ds1 [Occ=Once1]
                                                                          _ [Occ=Dead] ->
                                   ds1
                                   }
                              of
                              { PlutusLedgerApi.V1.Interval.LowerBound ds_d9sM [Occ=Once1!]
                                                                       _ [Occ=Dead] ->
                              case ds_d9sM of {
                                __DEFAULT ->
                                  case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                         (GHC.CString.unpackCString#
                                            "Invalid: Missing lower bound for validity interval"#)
                                  of str1 [Occ=Once1]
                                  { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                  case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                  { () ->
                                  PlutusTx.Builtins.Internal.error
                                    @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                  }
                                  };
                                PlutusLedgerApi.V1.Interval.Finite startTime [Occ=Once1] ->
                                  case case ipv of
                                       { PlutusLedgerApi.V1.Interval.Interval _ [Occ=Dead]
                                                                              ds2 [Occ=Once1] ->
                                       ds2
                                       }
                                  of
                                  { PlutusLedgerApi.V1.Interval.UpperBound ds_d9sG [Occ=Once1!]
                                                                           _ [Occ=Dead] ->
                                  case ds_d9sG of {
                                    __DEFAULT ->
                                      case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                             (GHC.CString.unpackCString#
                                                "Invalid: Missing upper bound for validity interval"#)
                                      of str1 [Occ=Once1]
                                      { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                      case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                      { () ->
                                      PlutusTx.Builtins.Internal.error
                                        @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                      }
                                      };
                                    PlutusLedgerApi.V1.Interval.Finite endTime [Occ=Once1] ->
                                      case endTime
                                           `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                   :: GHC.Types.Coercible
                                                        PlutusLedgerApi.V1.Time.POSIXTime
                                                        GHC.Num.Integer.Integer)
                                      of endTimeInt
                                      { __DEFAULT ->
                                      case startTime
                                           `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                   :: GHC.Types.Coercible
                                                        PlutusLedgerApi.V1.Time.POSIXTime
                                                        GHC.Num.Integer.Integer)
                                      of startTimeInt
                                      { __DEFAULT ->
                                      case case (endTimeInt
                                                 `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                         :: GHC.Types.Coercible
                                                              GHC.Num.Integer.Integer
                                                              PlutusLedgerApi.V1.Time.POSIXTime))
                                                `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                        :: GHC.Types.Coercible
                                                             PlutusLedgerApi.V1.Time.POSIXTime
                                                             GHC.Num.Integer.Integer)
                                           of x1 [Occ=Once1]
                                           { __DEFAULT ->
                                           case case (startTimeInt
                                                      `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                              :: GHC.Types.Coercible
                                                                   GHC.Num.Integer.Integer
                                                                   PlutusLedgerApi.V1.Time.POSIXTime))
                                                     `cast` (Sym (SelCo:Fun(arg)
                                                                      (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                       %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                       %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                       ; Sym (PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                                  <PlutusLedgerApi.V1.Time.POSIXTime>_N)
                                                                       ; PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                             <PlutusLedgerApi.V1.Time.POSIXTime>_N))
                                                             :: GHC.Types.Coercible
                                                                  PlutusLedgerApi.V1.Time.POSIXTime
                                                                  GHC.Num.Integer.Integer)
                                                of x1 [Occ=Once1]
                                                { __DEFAULT ->
                                                PlutusTx.Builtins.Internal.addInteger
                                                  x1 (GHC.Num.Integer.IS 10000#)
                                                }
                                           of y1 [Occ=Once1]
                                           { __DEFAULT ->
                                           case PlutusTx.Builtins.Internal.lessThanEqualsInteger x1 y1
                                           of b1 [Occ=Once1]
                                           { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                           PlutusTx.Builtins.Internal.ifThenElse
                                             @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                           }
                                           }
                                           }
                                      of validWindow [Occ=Once1!]
                                      { __DEFAULT ->
                                      case PlutusTx.Builtins.Internal.appendString
                                             (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                (GHC.CString.unpackCString#
                                                   "Invalid time window - Start: "#))
                                             (PlutusTx.Builtins.Internal.appendString
                                                (PlutusTx.Show.TH.concatBuiltinStrings
                                                   (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                      (GHC.Num.Integer.IS 0#)
                                                      startTimeInt
                                                      (GHC.Types.[]
                                                         @PlutusTx.Builtins.Internal.BuiltinString)))
                                                (PlutusTx.Builtins.Internal.appendString
                                                   (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString# " End: "#))
                                                   (PlutusTx.Show.TH.concatBuiltinStrings
                                                      (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                         (GHC.Num.Integer.IS 0#)
                                                         endTimeInt
                                                         (GHC.Types.[]
                                                            @PlutusTx.Builtins.Internal.BuiltinString)))))
                                      of str1 [Occ=Once1]
                                      { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                      case validWindow of {
                                        GHC.Types.False ->
                                          PlutusTx.Builtins.Internal.trace
                                            @GHC.Types.Bool str1 GHC.Types.False;
                                        GHC.Types.True -> GHC.Types.True
                                      }
                                      }
                                      }
                                      }
                                      }
                                  }
                                  }
                              }
                              }
                         of validateMintingWindow [Occ=Once1!]
                         { __DEFAULT ->
                         let {
                           ds_d9s7
                             :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                  PlutusLedgerApi.V1.Value.TokenName, GHC.Num.Integer.Integer)]
                           [LclId,
                            Unf=Unf{Src=<vanilla>, TopLvl=False,
                                    Value=False, ConLike=False, WorkFree=False, Expandable=False,
                                    Guidance=IF_ARGS [] 20 0}]
                           ds_d9s7 = PlutusLedgerApi.V1.Value.flattenValue ipv } in
                         case join {
                                fail_d9ss [Occ=Once4!T[1]] :: (# #) -> GHC.Types.Bool
                                [LclId[JoinId(1)(Nothing)],
                                 Arity=1,
                                 Str=<L>,
                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                         Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                         Guidance=IF_ARGS [0] 490 0}]
                                fail_d9ss _ [Occ=Dead, OS=OneShot]
                                  = case ds_d9s7 of ds_X3 [Occ=Once1] { __DEFAULT ->
                                    case PlutusTx.Builtins.Internal.appendString
                                           (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                              (GHC.CString.unpackCString#
                                                 "Invalid number of minted tokens: "#))
                                           (let {
                                              z1 [Occ=OnceL1] :: GHC.Num.Integer.Integer
                                              [LclId,
                                               Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                       Value=True, ConLike=True, WorkFree=True,
                                                       Expandable=True,
                                                       Guidance=IF_ARGS [] 10 10}]
                                              z1 = GHC.Num.Integer.IS 0# } in
                                            letrec {
                                              go [Occ=LoopBreaker]
                                                :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                     PlutusLedgerApi.V1.Value.TokenName,
                                                     GHC.Num.Integer.Integer)]
                                                   -> GHC.Num.Integer.Integer
                                              [LclId,
                                               Arity=1,
                                               Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                       Value=True, ConLike=True, WorkFree=True,
                                                       Expandable=True,
                                                       Guidance=IF_ARGS [30] 100 0}]
                                              go
                                                = \ (ds [Occ=Once1!]
                                                       :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                            PlutusLedgerApi.V1.Value.TokenName,
                                                            GHC.Num.Integer.Integer)]) ->
                                                    case ds of {
                                                      [] -> z1;
                                                      : x [Occ=Once1!] xs [Occ=Once1] ->
                                                        case x of
                                                        { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                                                        case go xs of acc1 [Occ=Once1] { __DEFAULT ->
                                                        PlutusTx.Builtins.Internal.addInteger
                                                          acc1 (GHC.Num.Integer.IS 1#)
                                                        }
                                                        }
                                                    }; } in
                                            case go ds_X3 of x1 [Occ=Once1] { __DEFAULT ->
                                            PlutusTx.Show.TH.concatBuiltinStrings
                                              (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                 (GHC.Num.Integer.IS 0#)
                                                 x1
                                                 (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString))
                                            })
                                    of str1 [Occ=Once1]
                                    { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                    case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                    { () ->
                                    PlutusTx.Builtins.Internal.error
                                      @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                    }
                                    }
                                    } } in
                              case ds_d9s7 of {
                                [] -> jump fail_d9ss GHC.Prim.(##);
                                : ds_d9sk [Occ=Once1!] ds_d9sl [Occ=Once1!] ->
                                  case ds_d9sk of
                                  { (cs1 [Occ=Once1!], tn1 [Occ=Once1], q1 [Occ=Once1]) ->
                                  case ds_d9sl of {
                                    [] -> jump fail_d9ss GHC.Prim.(##);
                                    : ds_d9sm [Occ=Once1!] ds_d9sn [Occ=Once1!] ->
                                      case ds_d9sm of
                                      { (cs2 [Occ=Once1!], tn2 [Occ=Once1], q2 [Occ=Once1]) ->
                                      case ds_d9sn of {
                                        [] -> jump fail_d9ss GHC.Prim.(##);
                                        : ds_d9so [Occ=Once1!] ds_d9sp [Occ=Once1!] ->
                                          case ds_d9so of
                                          { (cs3 [Occ=Once1!], tn3 [Occ=Once1], q3 [Occ=Once1]) ->
                                          case ds_d9sp of {
                                            [] ->
                                              let {
                                                conditions_s9SM [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SM
                                                  = case cs1
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of x1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol ctx)
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of y1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SN [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 140 0}]
                                                conditions_s9SN
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid currency symbol for token 1"#) } in
                                              let {
                                                conditions_s9SO [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SO = (conditions_s9SM, conditions_s9SN) } in
                                              let {
                                                conditions_s9SP [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SP
                                                  = case cs2
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of x1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol ctx)
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of y1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SQ [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 140 0}]
                                                conditions_s9SQ
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid currency symbol for token 2"#) } in
                                              let {
                                                conditions_s9SR [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SR = (conditions_s9SP, conditions_s9SQ) } in
                                              let {
                                                conditions_s9SS [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SS
                                                  = case cs3
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of x1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol ctx)
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of y1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9ST [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 140 0}]
                                                conditions_s9ST
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid currency symbol for token 3"#) } in
                                              let {
                                                conditions_s9SU [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SU = (conditions_s9SS, conditions_s9ST) } in
                                              let {
                                                conditions_s9SV [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 100 0}]
                                                conditions_s9SV
                                                  = case q1 of x1 [Occ=Once1] { __DEFAULT ->
                                                    case PlutusTx.Builtins.Internal.equalsInteger
                                                           x1 (GHC.Num.Integer.IS 1#)
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SW [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SW
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid quantity for token 1"#) } in
                                              let {
                                                conditions_s9SX [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SX = (conditions_s9SV, conditions_s9SW) } in
                                              let {
                                                conditions_s9SY [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 100 0}]
                                                conditions_s9SY
                                                  = case q2 of x1 [Occ=Once1] { __DEFAULT ->
                                                    case PlutusTx.Builtins.Internal.equalsInteger
                                                           x1 (GHC.Num.Integer.IS 1#)
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SZ [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SZ
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid quantity for token 2"#) } in
                                              let {
                                                conditions_s9T0 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T0 = (conditions_s9SY, conditions_s9SZ) } in
                                              let {
                                                conditions_s9T1 [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 100 0}]
                                                conditions_s9T1
                                                  = case q3 of x1 [Occ=Once1] { __DEFAULT ->
                                                    case PlutusTx.Builtins.Internal.equalsInteger
                                                           x1 (GHC.Num.Integer.IS 1#)
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9T2 [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9T2
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid quantity for token 3"#) } in
                                              let {
                                                conditions_s9T3 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T3 = (conditions_s9T1, conditions_s9T2) } in
                                              let {
                                                conditions_s9T4 [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 30 0}]
                                                conditions_s9T4
                                                  = PlutusTx.Builtins.equalsByteString
                                                      (tn1
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                         ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                    <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                         ; PlutusTx.Eq.N:Eq[0]
                                                                               <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (coinFlipTokenName_s9Di
                                                       `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                               ; Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                               :: GHC.Types.Coercible
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                              let {
                                                conditions_s9T5 [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 150 0}]
                                                conditions_s9T5
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid token name: expected CoinFlip"#) } in
                                              let {
                                                conditions_s9T6 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T6 = (conditions_s9T4, conditions_s9T5) } in
                                              let {
                                                conditions_s9T7 [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 30 0}]
                                                conditions_s9T7
                                                  = PlutusTx.Builtins.equalsByteString
                                                      (tn2
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                         ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                    <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                         ; PlutusTx.Eq.N:Eq[0]
                                                                               <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (vrfHolderTokenName_s9Dh
                                                       `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                               ; Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                               :: GHC.Types.Coercible
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                              let {
                                                conditions_s9T8 [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 150 0}]
                                                conditions_s9T8
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid token name: expected VRFHolder"#) } in
                                              let {
                                                conditions_s9T9 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T9 = (conditions_s9T7, conditions_s9T8) } in
                                              let {
                                                conditions_s9Ta [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 30 0}]
                                                conditions_s9Ta
                                                  = PlutusTx.Builtins.equalsByteString
                                                      (tn3
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                         ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                    <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                         ; PlutusTx.Eq.N:Eq[0]
                                                                               <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (housePotTokenName_s9Dg
                                                       `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                               ; Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                               :: GHC.Types.Coercible
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                              let {
                                                conditions_s9Tb [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 150 0}]
                                                conditions_s9Tb
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid token name: expected HousePot"#) } in
                                              let {
                                                conditions_s9Tc [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tc = (conditions_s9Ta, conditions_s9Tb) } in
                                              let {
                                                conditions_s9Td [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Td
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9Tc
                                                      (GHC.Types.[]
                                                         @(GHC.Types.Bool,
                                                           PlutusTx.Builtins.Internal.BuiltinString)) } in
                                              let {
                                                conditions_s9Te [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Te
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T9
                                                      conditions_s9Td } in
                                              let {
                                                conditions_s9Tf [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tf
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T6
                                                      conditions_s9Te } in
                                              let {
                                                conditions_s9Tg [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tg
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T3
                                                      conditions_s9Tf } in
                                              let {
                                                conditions_s9Th [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Th
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T0
                                                      conditions_s9Tg } in
                                              let {
                                                conditions_s9Ti [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Ti
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9SX
                                                      conditions_s9Th } in
                                              let {
                                                conditions_s9Tj [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tj
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9SU
                                                      conditions_s9Ti } in
                                              let {
                                                conditions_s9Tk [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tk
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9SR
                                                      conditions_s9Tj } in
                                              joinrec {
                                                go [Occ=LoopBreakerT[1]]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                     -> GHC.Types.Bool
                                                [LclId[JoinId(1)(Nothing)],
                                                 Arity=1,
                                                 Str=<L>,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [30] 84 20}]
                                                go (ds [Occ=Once1!]
                                                      :: [(GHC.Types.Bool,
                                                           PlutusTx.Builtins.Internal.BuiltinString)])
                                                  = case ds of {
                                                      [] -> GHC.Types.True;
                                                      : x [Occ=Once1!] xs [Occ=Once1] ->
                                                        case case x of
                                                             { (condition [Occ=Once1], msg [Occ=Once1]) ->
                                                             PlutusTx.Trace.traceIfFalse msg condition
                                                             }
                                                        of {
                                                          GHC.Types.False -> GHC.Types.False;
                                                          GHC.Types.True -> jump go xs
                                                        }
                                                    }; } in
                                              jump go
                                                (GHC.Types.:
                                                   @(GHC.Types.Bool,
                                                     PlutusTx.Builtins.Internal.BuiltinString)
                                                   conditions_s9SO
                                                   conditions_s9Tk);
                                            : _ [Occ=Dead] _ [Occ=Dead] -> jump fail_d9ss GHC.Prim.(##)
                                          }
                                          }
                                      }
                                      }
                                  }
                                  }
                              }
                         of mintedExactlyThreeTokens [Occ=Once1!]
                         { __DEFAULT ->
                         PlutusTx.List.and
                           (GHC.Types.:
                              @GHC.Types.Bool
                              (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                      (GHC.CString.unpackCString#
                                         "Unauthorized: Transaction not signed by correct key"#)
                               of str1 [Occ=Once1]
                               { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                               case joinrec {
                                      go12 [Occ=LoopBreakerT[1]]
                                        :: [PlutusLedgerApi.V1.Crypto.PubKeyHash] -> GHC.Types.Bool
                                      [LclId[JoinId(1)(Nothing)],
                                       Arity=1,
                                       Str=<L>,
                                       Unf=Unf{Src=<vanilla>, TopLvl=False,
                                               Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                               Guidance=IF_ARGS [30] 134 20}]
                                      go12 (ds13 [Occ=Once1!] :: [PlutusLedgerApi.V1.Crypto.PubKeyHash])
                                        = case ds13 of {
                                            [] -> GHC.Types.False;
                                            : x2 [Occ=Once1!] xs [Occ=Once1] ->
                                              case x2
                                                   `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                                           :: GHC.Types.Coercible
                                                                PlutusLedgerApi.V1.Crypto.PubKeyHash
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                              of y1 [Occ=Once1]
                                              { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                              case PlutusTx.Builtins.Internal.equalsByteString nt_s9Qy y1
                                              of b1 [Occ=Once1]
                                              { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                              case PlutusTx.Builtins.Internal.ifThenElse
                                                     @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                              of {
                                                GHC.Types.False -> jump go12 xs;
                                                GHC.Types.True -> GHC.Types.True
                                              }
                                              }
                                              }
                                          }; } in
                                    jump go12 ipv
                               of {
                                 GHC.Types.False ->
                                   PlutusTx.Builtins.Internal.trace
                                     @GHC.Types.Bool str1 GHC.Types.False;
                                 GHC.Types.True -> GHC.Types.True
                               }
                               })
                              (GHC.Types.:
                                 @GHC.Types.Bool
                                 (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                         (GHC.CString.unpackCString#
                                            "Invalid: Must mint exactly three tokens"#)
                                  of str1 [Occ=Once1]
                                  { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                  case mintedExactlyThreeTokens of {
                                    GHC.Types.False ->
                                      PlutusTx.Builtins.Internal.trace
                                        @GHC.Types.Bool str1 GHC.Types.False;
                                    GHC.Types.True -> GHC.Types.True
                                  }
                                  })
                                 (GHC.Types.:
                                    @GHC.Types.Bool
                                    (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                            (GHC.CString.unpackCString#
                                               "Invalid: Transaction outside minting window"#)
                                     of str1 [Occ=Once1]
                                     { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                     case validateMintingWindow of {
                                       GHC.Types.False ->
                                         PlutusTx.Builtins.Internal.trace
                                           @GHC.Types.Bool str1 GHC.Types.False;
                                       GHC.Types.True -> GHC.Types.True
                                     }
                                     })
                                    (GHC.Types.[] @GHC.Types.Bool))))
                         }
                         }
                         }
                         }
Context: Compiling expr: case _redeemer of { () ->
                         case ctx of ctx
                         { PlutusLedgerApi.V2.Contexts.ScriptContext ipv [Occ=Once1!]
                                                                     _ [Occ=Dead] ->
                         case ipv of
                         { PlutusLedgerApi.V2.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                              _ [Occ=Dead] _ [Occ=Dead] ipv [Occ=Once1]
                                                              _ [Occ=Dead] _ [Occ=Dead] ipv ipv [Occ=Once1]
                                                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                         case case case ipv of
                                   { PlutusLedgerApi.V1.Interval.Interval ds1 [Occ=Once1]
                                                                          _ [Occ=Dead] ->
                                   ds1
                                   }
                              of
                              { PlutusLedgerApi.V1.Interval.LowerBound ds_d9sM [Occ=Once1!]
                                                                       _ [Occ=Dead] ->
                              case ds_d9sM of {
                                __DEFAULT ->
                                  case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                         (GHC.CString.unpackCString#
                                            "Invalid: Missing lower bound for validity interval"#)
                                  of str1 [Occ=Once1]
                                  { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                  case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                  { () ->
                                  PlutusTx.Builtins.Internal.error
                                    @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                  }
                                  };
                                PlutusLedgerApi.V1.Interval.Finite startTime [Occ=Once1] ->
                                  case case ipv of
                                       { PlutusLedgerApi.V1.Interval.Interval _ [Occ=Dead]
                                                                              ds2 [Occ=Once1] ->
                                       ds2
                                       }
                                  of
                                  { PlutusLedgerApi.V1.Interval.UpperBound ds_d9sG [Occ=Once1!]
                                                                           _ [Occ=Dead] ->
                                  case ds_d9sG of {
                                    __DEFAULT ->
                                      case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                             (GHC.CString.unpackCString#
                                                "Invalid: Missing upper bound for validity interval"#)
                                      of str1 [Occ=Once1]
                                      { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                      case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                      { () ->
                                      PlutusTx.Builtins.Internal.error
                                        @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                      }
                                      };
                                    PlutusLedgerApi.V1.Interval.Finite endTime [Occ=Once1] ->
                                      case endTime
                                           `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                   :: GHC.Types.Coercible
                                                        PlutusLedgerApi.V1.Time.POSIXTime
                                                        GHC.Num.Integer.Integer)
                                      of endTimeInt
                                      { __DEFAULT ->
                                      case startTime
                                           `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                   :: GHC.Types.Coercible
                                                        PlutusLedgerApi.V1.Time.POSIXTime
                                                        GHC.Num.Integer.Integer)
                                      of startTimeInt
                                      { __DEFAULT ->
                                      case case (endTimeInt
                                                 `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                         :: GHC.Types.Coercible
                                                              GHC.Num.Integer.Integer
                                                              PlutusLedgerApi.V1.Time.POSIXTime))
                                                `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                        :: GHC.Types.Coercible
                                                             PlutusLedgerApi.V1.Time.POSIXTime
                                                             GHC.Num.Integer.Integer)
                                           of x1 [Occ=Once1]
                                           { __DEFAULT ->
                                           case case (startTimeInt
                                                      `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                              :: GHC.Types.Coercible
                                                                   GHC.Num.Integer.Integer
                                                                   PlutusLedgerApi.V1.Time.POSIXTime))
                                                     `cast` (Sym (SelCo:Fun(arg)
                                                                      (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                       %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                       %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                       ; Sym (PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                                  <PlutusLedgerApi.V1.Time.POSIXTime>_N)
                                                                       ; PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                             <PlutusLedgerApi.V1.Time.POSIXTime>_N))
                                                             :: GHC.Types.Coercible
                                                                  PlutusLedgerApi.V1.Time.POSIXTime
                                                                  GHC.Num.Integer.Integer)
                                                of x1 [Occ=Once1]
                                                { __DEFAULT ->
                                                PlutusTx.Builtins.Internal.addInteger
                                                  x1 (GHC.Num.Integer.IS 10000#)
                                                }
                                           of y1 [Occ=Once1]
                                           { __DEFAULT ->
                                           case PlutusTx.Builtins.Internal.lessThanEqualsInteger x1 y1
                                           of b1 [Occ=Once1]
                                           { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                           PlutusTx.Builtins.Internal.ifThenElse
                                             @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                           }
                                           }
                                           }
                                      of validWindow [Occ=Once1!]
                                      { __DEFAULT ->
                                      case PlutusTx.Builtins.Internal.appendString
                                             (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                (GHC.CString.unpackCString#
                                                   "Invalid time window - Start: "#))
                                             (PlutusTx.Builtins.Internal.appendString
                                                (PlutusTx.Show.TH.concatBuiltinStrings
                                                   (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                      (GHC.Num.Integer.IS 0#)
                                                      startTimeInt
                                                      (GHC.Types.[]
                                                         @PlutusTx.Builtins.Internal.BuiltinString)))
                                                (PlutusTx.Builtins.Internal.appendString
                                                   (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString# " End: "#))
                                                   (PlutusTx.Show.TH.concatBuiltinStrings
                                                      (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                         (GHC.Num.Integer.IS 0#)
                                                         endTimeInt
                                                         (GHC.Types.[]
                                                            @PlutusTx.Builtins.Internal.BuiltinString)))))
                                      of str1 [Occ=Once1]
                                      { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                      case validWindow of {
                                        GHC.Types.False ->
                                          PlutusTx.Builtins.Internal.trace
                                            @GHC.Types.Bool str1 GHC.Types.False;
                                        GHC.Types.True -> GHC.Types.True
                                      }
                                      }
                                      }
                                      }
                                      }
                                  }
                                  }
                              }
                              }
                         of validateMintingWindow [Occ=Once1!]
                         { __DEFAULT ->
                         let {
                           ds_d9s7
                             :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                  PlutusLedgerApi.V1.Value.TokenName, GHC.Num.Integer.Integer)]
                           [LclId,
                            Unf=Unf{Src=<vanilla>, TopLvl=False,
                                    Value=False, ConLike=False, WorkFree=False, Expandable=False,
                                    Guidance=IF_ARGS [] 20 0}]
                           ds_d9s7 = PlutusLedgerApi.V1.Value.flattenValue ipv } in
                         case join {
                                fail_d9ss [Occ=Once4!T[1]] :: (# #) -> GHC.Types.Bool
                                [LclId[JoinId(1)(Nothing)],
                                 Arity=1,
                                 Str=<L>,
                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                         Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                         Guidance=IF_ARGS [0] 490 0}]
                                fail_d9ss _ [Occ=Dead, OS=OneShot]
                                  = case ds_d9s7 of ds_X3 [Occ=Once1] { __DEFAULT ->
                                    case PlutusTx.Builtins.Internal.appendString
                                           (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                              (GHC.CString.unpackCString#
                                                 "Invalid number of minted tokens: "#))
                                           (let {
                                              z1 [Occ=OnceL1] :: GHC.Num.Integer.Integer
                                              [LclId,
                                               Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                       Value=True, ConLike=True, WorkFree=True,
                                                       Expandable=True,
                                                       Guidance=IF_ARGS [] 10 10}]
                                              z1 = GHC.Num.Integer.IS 0# } in
                                            letrec {
                                              go [Occ=LoopBreaker]
                                                :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                     PlutusLedgerApi.V1.Value.TokenName,
                                                     GHC.Num.Integer.Integer)]
                                                   -> GHC.Num.Integer.Integer
                                              [LclId,
                                               Arity=1,
                                               Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                       Value=True, ConLike=True, WorkFree=True,
                                                       Expandable=True,
                                                       Guidance=IF_ARGS [30] 100 0}]
                                              go
                                                = \ (ds [Occ=Once1!]
                                                       :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                            PlutusLedgerApi.V1.Value.TokenName,
                                                            GHC.Num.Integer.Integer)]) ->
                                                    case ds of {
                                                      [] -> z1;
                                                      : x [Occ=Once1!] xs [Occ=Once1] ->
                                                        case x of
                                                        { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                                                        case go xs of acc1 [Occ=Once1] { __DEFAULT ->
                                                        PlutusTx.Builtins.Internal.addInteger
                                                          acc1 (GHC.Num.Integer.IS 1#)
                                                        }
                                                        }
                                                    }; } in
                                            case go ds_X3 of x1 [Occ=Once1] { __DEFAULT ->
                                            PlutusTx.Show.TH.concatBuiltinStrings
                                              (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                 (GHC.Num.Integer.IS 0#)
                                                 x1
                                                 (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString))
                                            })
                                    of str1 [Occ=Once1]
                                    { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                    case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                    { () ->
                                    PlutusTx.Builtins.Internal.error
                                      @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                    }
                                    }
                                    } } in
                              case ds_d9s7 of {
                                [] -> jump fail_d9ss GHC.Prim.(##);
                                : ds_d9sk [Occ=Once1!] ds_d9sl [Occ=Once1!] ->
                                  case ds_d9sk of
                                  { (cs1 [Occ=Once1!], tn1 [Occ=Once1], q1 [Occ=Once1]) ->
                                  case ds_d9sl of {
                                    [] -> jump fail_d9ss GHC.Prim.(##);
                                    : ds_d9sm [Occ=Once1!] ds_d9sn [Occ=Once1!] ->
                                      case ds_d9sm of
                                      { (cs2 [Occ=Once1!], tn2 [Occ=Once1], q2 [Occ=Once1]) ->
                                      case ds_d9sn of {
                                        [] -> jump fail_d9ss GHC.Prim.(##);
                                        : ds_d9so [Occ=Once1!] ds_d9sp [Occ=Once1!] ->
                                          case ds_d9so of
                                          { (cs3 [Occ=Once1!], tn3 [Occ=Once1], q3 [Occ=Once1]) ->
                                          case ds_d9sp of {
                                            [] ->
                                              let {
                                                conditions_s9SM [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SM
                                                  = case cs1
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of x1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol ctx)
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of y1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SN [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 140 0}]
                                                conditions_s9SN
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid currency symbol for token 1"#) } in
                                              let {
                                                conditions_s9SO [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SO = (conditions_s9SM, conditions_s9SN) } in
                                              let {
                                                conditions_s9SP [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SP
                                                  = case cs2
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of x1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol ctx)
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of y1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SQ [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 140 0}]
                                                conditions_s9SQ
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid currency symbol for token 2"#) } in
                                              let {
                                                conditions_s9SR [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SR = (conditions_s9SP, conditions_s9SQ) } in
                                              let {
                                                conditions_s9SS [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SS
                                                  = case cs3
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of x1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol ctx)
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of y1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9ST [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 140 0}]
                                                conditions_s9ST
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid currency symbol for token 3"#) } in
                                              let {
                                                conditions_s9SU [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SU = (conditions_s9SS, conditions_s9ST) } in
                                              let {
                                                conditions_s9SV [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 100 0}]
                                                conditions_s9SV
                                                  = case q1 of x1 [Occ=Once1] { __DEFAULT ->
                                                    case PlutusTx.Builtins.Internal.equalsInteger
                                                           x1 (GHC.Num.Integer.IS 1#)
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SW [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SW
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid quantity for token 1"#) } in
                                              let {
                                                conditions_s9SX [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SX = (conditions_s9SV, conditions_s9SW) } in
                                              let {
                                                conditions_s9SY [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 100 0}]
                                                conditions_s9SY
                                                  = case q2 of x1 [Occ=Once1] { __DEFAULT ->
                                                    case PlutusTx.Builtins.Internal.equalsInteger
                                                           x1 (GHC.Num.Integer.IS 1#)
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SZ [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SZ
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid quantity for token 2"#) } in
                                              let {
                                                conditions_s9T0 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T0 = (conditions_s9SY, conditions_s9SZ) } in
                                              let {
                                                conditions_s9T1 [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 100 0}]
                                                conditions_s9T1
                                                  = case q3 of x1 [Occ=Once1] { __DEFAULT ->
                                                    case PlutusTx.Builtins.Internal.equalsInteger
                                                           x1 (GHC.Num.Integer.IS 1#)
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9T2 [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9T2
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid quantity for token 3"#) } in
                                              let {
                                                conditions_s9T3 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T3 = (conditions_s9T1, conditions_s9T2) } in
                                              let {
                                                conditions_s9T4 [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 30 0}]
                                                conditions_s9T4
                                                  = PlutusTx.Builtins.equalsByteString
                                                      (tn1
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                         ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                    <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                         ; PlutusTx.Eq.N:Eq[0]
                                                                               <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (coinFlipTokenName_s9Di
                                                       `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                               ; Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                               :: GHC.Types.Coercible
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                              let {
                                                conditions_s9T5 [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 150 0}]
                                                conditions_s9T5
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid token name: expected CoinFlip"#) } in
                                              let {
                                                conditions_s9T6 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T6 = (conditions_s9T4, conditions_s9T5) } in
                                              let {
                                                conditions_s9T7 [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 30 0}]
                                                conditions_s9T7
                                                  = PlutusTx.Builtins.equalsByteString
                                                      (tn2
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                         ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                    <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                         ; PlutusTx.Eq.N:Eq[0]
                                                                               <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (vrfHolderTokenName_s9Dh
                                                       `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                               ; Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                               :: GHC.Types.Coercible
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                              let {
                                                conditions_s9T8 [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 150 0}]
                                                conditions_s9T8
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid token name: expected VRFHolder"#) } in
                                              let {
                                                conditions_s9T9 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T9 = (conditions_s9T7, conditions_s9T8) } in
                                              let {
                                                conditions_s9Ta [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 30 0}]
                                                conditions_s9Ta
                                                  = PlutusTx.Builtins.equalsByteString
                                                      (tn3
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                         ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                    <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                         ; PlutusTx.Eq.N:Eq[0]
                                                                               <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (housePotTokenName_s9Dg
                                                       `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                               ; Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                               :: GHC.Types.Coercible
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                              let {
                                                conditions_s9Tb [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 150 0}]
                                                conditions_s9Tb
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid token name: expected HousePot"#) } in
                                              let {
                                                conditions_s9Tc [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tc = (conditions_s9Ta, conditions_s9Tb) } in
                                              let {
                                                conditions_s9Td [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Td
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9Tc
                                                      (GHC.Types.[]
                                                         @(GHC.Types.Bool,
                                                           PlutusTx.Builtins.Internal.BuiltinString)) } in
                                              let {
                                                conditions_s9Te [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Te
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T9
                                                      conditions_s9Td } in
                                              let {
                                                conditions_s9Tf [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tf
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T6
                                                      conditions_s9Te } in
                                              let {
                                                conditions_s9Tg [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tg
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T3
                                                      conditions_s9Tf } in
                                              let {
                                                conditions_s9Th [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Th
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T0
                                                      conditions_s9Tg } in
                                              let {
                                                conditions_s9Ti [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Ti
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9SX
                                                      conditions_s9Th } in
                                              let {
                                                conditions_s9Tj [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tj
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9SU
                                                      conditions_s9Ti } in
                                              let {
                                                conditions_s9Tk [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tk
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9SR
                                                      conditions_s9Tj } in
                                              joinrec {
                                                go [Occ=LoopBreakerT[1]]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                     -> GHC.Types.Bool
                                                [LclId[JoinId(1)(Nothing)],
                                                 Arity=1,
                                                 Str=<L>,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [30] 84 20}]
                                                go (ds [Occ=Once1!]
                                                      :: [(GHC.Types.Bool,
                                                           PlutusTx.Builtins.Internal.BuiltinString)])
                                                  = case ds of {
                                                      [] -> GHC.Types.True;
                                                      : x [Occ=Once1!] xs [Occ=Once1] ->
                                                        case case x of
                                                             { (condition [Occ=Once1], msg [Occ=Once1]) ->
                                                             PlutusTx.Trace.traceIfFalse msg condition
                                                             }
                                                        of {
                                                          GHC.Types.False -> GHC.Types.False;
                                                          GHC.Types.True -> jump go xs
                                                        }
                                                    }; } in
                                              jump go
                                                (GHC.Types.:
                                                   @(GHC.Types.Bool,
                                                     PlutusTx.Builtins.Internal.BuiltinString)
                                                   conditions_s9SO
                                                   conditions_s9Tk);
                                            : _ [Occ=Dead] _ [Occ=Dead] -> jump fail_d9ss GHC.Prim.(##)
                                          }
                                          }
                                      }
                                      }
                                  }
                                  }
                              }
                         of mintedExactlyThreeTokens [Occ=Once1!]
                         { __DEFAULT ->
                         PlutusTx.List.and
                           (GHC.Types.:
                              @GHC.Types.Bool
                              (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                      (GHC.CString.unpackCString#
                                         "Unauthorized: Transaction not signed by correct key"#)
                               of str1 [Occ=Once1]
                               { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                               case joinrec {
                                      go12 [Occ=LoopBreakerT[1]]
                                        :: [PlutusLedgerApi.V1.Crypto.PubKeyHash] -> GHC.Types.Bool
                                      [LclId[JoinId(1)(Nothing)],
                                       Arity=1,
                                       Str=<L>,
                                       Unf=Unf{Src=<vanilla>, TopLvl=False,
                                               Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                               Guidance=IF_ARGS [30] 134 20}]
                                      go12 (ds13 [Occ=Once1!] :: [PlutusLedgerApi.V1.Crypto.PubKeyHash])
                                        = case ds13 of {
                                            [] -> GHC.Types.False;
                                            : x2 [Occ=Once1!] xs [Occ=Once1] ->
                                              case x2
                                                   `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                                           :: GHC.Types.Coercible
                                                                PlutusLedgerApi.V1.Crypto.PubKeyHash
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                              of y1 [Occ=Once1]
                                              { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                              case PlutusTx.Builtins.Internal.equalsByteString nt_s9Qy y1
                                              of b1 [Occ=Once1]
                                              { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                              case PlutusTx.Builtins.Internal.ifThenElse
                                                     @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                              of {
                                                GHC.Types.False -> jump go12 xs;
                                                GHC.Types.True -> GHC.Types.True
                                              }
                                              }
                                              }
                                          }; } in
                                    jump go12 ipv
                               of {
                                 GHC.Types.False ->
                                   PlutusTx.Builtins.Internal.trace
                                     @GHC.Types.Bool str1 GHC.Types.False;
                                 GHC.Types.True -> GHC.Types.True
                               }
                               })
                              (GHC.Types.:
                                 @GHC.Types.Bool
                                 (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                         (GHC.CString.unpackCString#
                                            "Invalid: Must mint exactly three tokens"#)
                                  of str1 [Occ=Once1]
                                  { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                  case mintedExactlyThreeTokens of {
                                    GHC.Types.False ->
                                      PlutusTx.Builtins.Internal.trace
                                        @GHC.Types.Bool str1 GHC.Types.False;
                                    GHC.Types.True -> GHC.Types.True
                                  }
                                  })
                                 (GHC.Types.:
                                    @GHC.Types.Bool
                                    (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                            (GHC.CString.unpackCString#
                                               "Invalid: Transaction outside minting window"#)
                                     of str1 [Occ=Once1]
                                     { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                     case validateMintingWindow of {
                                       GHC.Types.False ->
                                         PlutusTx.Builtins.Internal.trace
                                           @GHC.Types.Bool str1 GHC.Types.False;
                                       GHC.Types.True -> GHC.Types.True
                                     }
                                     })
                                    (GHC.Types.[] @GHC.Types.Bool))))
                         }
                         }
                         }
                         }
                         }
Context: Compiling expr: case pkh
                              `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                      :: GHC.Types.Coercible
                                           PlutusLedgerApi.V1.Crypto.PubKeyHash
                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                         of nt_s9Qy [Occ=OnceL1]
                         { __DEFAULT ->
                         case _redeemer of { () ->
                         case ctx of ctx
                         { PlutusLedgerApi.V2.Contexts.ScriptContext ipv [Occ=Once1!]
                                                                     _ [Occ=Dead] ->
                         case ipv of
                         { PlutusLedgerApi.V2.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                              _ [Occ=Dead] _ [Occ=Dead] ipv [Occ=Once1]
                                                              _ [Occ=Dead] _ [Occ=Dead] ipv ipv [Occ=Once1]
                                                              _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                         case case case ipv of
                                   { PlutusLedgerApi.V1.Interval.Interval ds1 [Occ=Once1]
                                                                          _ [Occ=Dead] ->
                                   ds1
                                   }
                              of
                              { PlutusLedgerApi.V1.Interval.LowerBound ds_d9sM [Occ=Once1!]
                                                                       _ [Occ=Dead] ->
                              case ds_d9sM of {
                                __DEFAULT ->
                                  case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                         (GHC.CString.unpackCString#
                                            "Invalid: Missing lower bound for validity interval"#)
                                  of str1 [Occ=Once1]
                                  { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                  case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                  { () ->
                                  PlutusTx.Builtins.Internal.error
                                    @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                  }
                                  };
                                PlutusLedgerApi.V1.Interval.Finite startTime [Occ=Once1] ->
                                  case case ipv of
                                       { PlutusLedgerApi.V1.Interval.Interval _ [Occ=Dead]
                                                                              ds2 [Occ=Once1] ->
                                       ds2
                                       }
                                  of
                                  { PlutusLedgerApi.V1.Interval.UpperBound ds_d9sG [Occ=Once1!]
                                                                           _ [Occ=Dead] ->
                                  case ds_d9sG of {
                                    __DEFAULT ->
                                      case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                             (GHC.CString.unpackCString#
                                                "Invalid: Missing upper bound for validity interval"#)
                                      of str1 [Occ=Once1]
                                      { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                      case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                      { () ->
                                      PlutusTx.Builtins.Internal.error
                                        @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                      }
                                      };
                                    PlutusLedgerApi.V1.Interval.Finite endTime [Occ=Once1] ->
                                      case endTime
                                           `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                   :: GHC.Types.Coercible
                                                        PlutusLedgerApi.V1.Time.POSIXTime
                                                        GHC.Num.Integer.Integer)
                                      of endTimeInt
                                      { __DEFAULT ->
                                      case startTime
                                           `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                   :: GHC.Types.Coercible
                                                        PlutusLedgerApi.V1.Time.POSIXTime
                                                        GHC.Num.Integer.Integer)
                                      of startTimeInt
                                      { __DEFAULT ->
                                      case case (endTimeInt
                                                 `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                         :: GHC.Types.Coercible
                                                              GHC.Num.Integer.Integer
                                                              PlutusLedgerApi.V1.Time.POSIXTime))
                                                `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                        :: GHC.Types.Coercible
                                                             PlutusLedgerApi.V1.Time.POSIXTime
                                                             GHC.Num.Integer.Integer)
                                           of x1 [Occ=Once1]
                                           { __DEFAULT ->
                                           case case (startTimeInt
                                                      `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                              :: GHC.Types.Coercible
                                                                   GHC.Num.Integer.Integer
                                                                   PlutusLedgerApi.V1.Time.POSIXTime))
                                                     `cast` (Sym (SelCo:Fun(arg)
                                                                      (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                       %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                       %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                       ; Sym (PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                                  <PlutusLedgerApi.V1.Time.POSIXTime>_N)
                                                                       ; PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                             <PlutusLedgerApi.V1.Time.POSIXTime>_N))
                                                             :: GHC.Types.Coercible
                                                                  PlutusLedgerApi.V1.Time.POSIXTime
                                                                  GHC.Num.Integer.Integer)
                                                of x1 [Occ=Once1]
                                                { __DEFAULT ->
                                                PlutusTx.Builtins.Internal.addInteger
                                                  x1 (GHC.Num.Integer.IS 10000#)
                                                }
                                           of y1 [Occ=Once1]
                                           { __DEFAULT ->
                                           case PlutusTx.Builtins.Internal.lessThanEqualsInteger x1 y1
                                           of b1 [Occ=Once1]
                                           { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                           PlutusTx.Builtins.Internal.ifThenElse
                                             @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                           }
                                           }
                                           }
                                      of validWindow [Occ=Once1!]
                                      { __DEFAULT ->
                                      case PlutusTx.Builtins.Internal.appendString
                                             (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                (GHC.CString.unpackCString#
                                                   "Invalid time window - Start: "#))
                                             (PlutusTx.Builtins.Internal.appendString
                                                (PlutusTx.Show.TH.concatBuiltinStrings
                                                   (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                      (GHC.Num.Integer.IS 0#)
                                                      startTimeInt
                                                      (GHC.Types.[]
                                                         @PlutusTx.Builtins.Internal.BuiltinString)))
                                                (PlutusTx.Builtins.Internal.appendString
                                                   (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString# " End: "#))
                                                   (PlutusTx.Show.TH.concatBuiltinStrings
                                                      (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                         (GHC.Num.Integer.IS 0#)
                                                         endTimeInt
                                                         (GHC.Types.[]
                                                            @PlutusTx.Builtins.Internal.BuiltinString)))))
                                      of str1 [Occ=Once1]
                                      { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                      case validWindow of {
                                        GHC.Types.False ->
                                          PlutusTx.Builtins.Internal.trace
                                            @GHC.Types.Bool str1 GHC.Types.False;
                                        GHC.Types.True -> GHC.Types.True
                                      }
                                      }
                                      }
                                      }
                                      }
                                  }
                                  }
                              }
                              }
                         of validateMintingWindow [Occ=Once1!]
                         { __DEFAULT ->
                         let {
                           ds_d9s7
                             :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                  PlutusLedgerApi.V1.Value.TokenName, GHC.Num.Integer.Integer)]
                           [LclId,
                            Unf=Unf{Src=<vanilla>, TopLvl=False,
                                    Value=False, ConLike=False, WorkFree=False, Expandable=False,
                                    Guidance=IF_ARGS [] 20 0}]
                           ds_d9s7 = PlutusLedgerApi.V1.Value.flattenValue ipv } in
                         case join {
                                fail_d9ss [Occ=Once4!T[1]] :: (# #) -> GHC.Types.Bool
                                [LclId[JoinId(1)(Nothing)],
                                 Arity=1,
                                 Str=<L>,
                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                         Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                         Guidance=IF_ARGS [0] 490 0}]
                                fail_d9ss _ [Occ=Dead, OS=OneShot]
                                  = case ds_d9s7 of ds_X3 [Occ=Once1] { __DEFAULT ->
                                    case PlutusTx.Builtins.Internal.appendString
                                           (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                              (GHC.CString.unpackCString#
                                                 "Invalid number of minted tokens: "#))
                                           (let {
                                              z1 [Occ=OnceL1] :: GHC.Num.Integer.Integer
                                              [LclId,
                                               Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                       Value=True, ConLike=True, WorkFree=True,
                                                       Expandable=True,
                                                       Guidance=IF_ARGS [] 10 10}]
                                              z1 = GHC.Num.Integer.IS 0# } in
                                            letrec {
                                              go [Occ=LoopBreaker]
                                                :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                     PlutusLedgerApi.V1.Value.TokenName,
                                                     GHC.Num.Integer.Integer)]
                                                   -> GHC.Num.Integer.Integer
                                              [LclId,
                                               Arity=1,
                                               Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                       Value=True, ConLike=True, WorkFree=True,
                                                       Expandable=True,
                                                       Guidance=IF_ARGS [30] 100 0}]
                                              go
                                                = \ (ds [Occ=Once1!]
                                                       :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                            PlutusLedgerApi.V1.Value.TokenName,
                                                            GHC.Num.Integer.Integer)]) ->
                                                    case ds of {
                                                      [] -> z1;
                                                      : x [Occ=Once1!] xs [Occ=Once1] ->
                                                        case x of
                                                        { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                                                        case go xs of acc1 [Occ=Once1] { __DEFAULT ->
                                                        PlutusTx.Builtins.Internal.addInteger
                                                          acc1 (GHC.Num.Integer.IS 1#)
                                                        }
                                                        }
                                                    }; } in
                                            case go ds_X3 of x1 [Occ=Once1] { __DEFAULT ->
                                            PlutusTx.Show.TH.concatBuiltinStrings
                                              (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                 (GHC.Num.Integer.IS 0#)
                                                 x1
                                                 (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString))
                                            })
                                    of str1 [Occ=Once1]
                                    { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                    case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                    { () ->
                                    PlutusTx.Builtins.Internal.error
                                      @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                    }
                                    }
                                    } } in
                              case ds_d9s7 of {
                                [] -> jump fail_d9ss GHC.Prim.(##);
                                : ds_d9sk [Occ=Once1!] ds_d9sl [Occ=Once1!] ->
                                  case ds_d9sk of
                                  { (cs1 [Occ=Once1!], tn1 [Occ=Once1], q1 [Occ=Once1]) ->
                                  case ds_d9sl of {
                                    [] -> jump fail_d9ss GHC.Prim.(##);
                                    : ds_d9sm [Occ=Once1!] ds_d9sn [Occ=Once1!] ->
                                      case ds_d9sm of
                                      { (cs2 [Occ=Once1!], tn2 [Occ=Once1], q2 [Occ=Once1]) ->
                                      case ds_d9sn of {
                                        [] -> jump fail_d9ss GHC.Prim.(##);
                                        : ds_d9so [Occ=Once1!] ds_d9sp [Occ=Once1!] ->
                                          case ds_d9so of
                                          { (cs3 [Occ=Once1!], tn3 [Occ=Once1], q3 [Occ=Once1]) ->
                                          case ds_d9sp of {
                                            [] ->
                                              let {
                                                conditions_s9SM [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SM
                                                  = case cs1
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of x1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol ctx)
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of y1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SN [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 140 0}]
                                                conditions_s9SN
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid currency symbol for token 1"#) } in
                                              let {
                                                conditions_s9SO [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SO = (conditions_s9SM, conditions_s9SN) } in
                                              let {
                                                conditions_s9SP [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SP
                                                  = case cs2
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of x1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol ctx)
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of y1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SQ [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 140 0}]
                                                conditions_s9SQ
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid currency symbol for token 2"#) } in
                                              let {
                                                conditions_s9SR [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SR = (conditions_s9SP, conditions_s9SQ) } in
                                              let {
                                                conditions_s9SS [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SS
                                                  = case cs3
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of x1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol ctx)
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    of y1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                    case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9ST [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 140 0}]
                                                conditions_s9ST
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid currency symbol for token 3"#) } in
                                              let {
                                                conditions_s9SU [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SU = (conditions_s9SS, conditions_s9ST) } in
                                              let {
                                                conditions_s9SV [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 100 0}]
                                                conditions_s9SV
                                                  = case q1 of x1 [Occ=Once1] { __DEFAULT ->
                                                    case PlutusTx.Builtins.Internal.equalsInteger
                                                           x1 (GHC.Num.Integer.IS 1#)
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SW [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SW
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid quantity for token 1"#) } in
                                              let {
                                                conditions_s9SX [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9SX = (conditions_s9SV, conditions_s9SW) } in
                                              let {
                                                conditions_s9SY [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 100 0}]
                                                conditions_s9SY
                                                  = case q2 of x1 [Occ=Once1] { __DEFAULT ->
                                                    case PlutusTx.Builtins.Internal.equalsInteger
                                                           x1 (GHC.Num.Integer.IS 1#)
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9SZ [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9SZ
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid quantity for token 2"#) } in
                                              let {
                                                conditions_s9T0 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T0 = (conditions_s9SY, conditions_s9SZ) } in
                                              let {
                                                conditions_s9T1 [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 100 0}]
                                                conditions_s9T1
                                                  = case q3 of x1 [Occ=Once1] { __DEFAULT ->
                                                    case PlutusTx.Builtins.Internal.equalsInteger
                                                           x1 (GHC.Num.Integer.IS 1#)
                                                    of b1 [Occ=Once1]
                                                    { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                    PlutusTx.Builtins.Internal.ifThenElse
                                                      @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                    }
                                                    } } in
                                              let {
                                                conditions_s9T2 [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 120 0}]
                                                conditions_s9T2
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid quantity for token 3"#) } in
                                              let {
                                                conditions_s9T3 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T3 = (conditions_s9T1, conditions_s9T2) } in
                                              let {
                                                conditions_s9T4 [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 30 0}]
                                                conditions_s9T4
                                                  = PlutusTx.Builtins.equalsByteString
                                                      (tn1
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                         ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                    <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                         ; PlutusTx.Eq.N:Eq[0]
                                                                               <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (coinFlipTokenName_s9Di
                                                       `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                               ; Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                               :: GHC.Types.Coercible
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                              let {
                                                conditions_s9T5 [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 150 0}]
                                                conditions_s9T5
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid token name: expected CoinFlip"#) } in
                                              let {
                                                conditions_s9T6 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T6 = (conditions_s9T4, conditions_s9T5) } in
                                              let {
                                                conditions_s9T7 [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 30 0}]
                                                conditions_s9T7
                                                  = PlutusTx.Builtins.equalsByteString
                                                      (tn2
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                         ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                    <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                         ; PlutusTx.Eq.N:Eq[0]
                                                                               <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (vrfHolderTokenName_s9Dh
                                                       `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                               ; Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                               :: GHC.Types.Coercible
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                              let {
                                                conditions_s9T8 [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 150 0}]
                                                conditions_s9T8
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid token name: expected VRFHolder"#) } in
                                              let {
                                                conditions_s9T9 [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9T9 = (conditions_s9T7, conditions_s9T8) } in
                                              let {
                                                conditions_s9Ta [Occ=Once1] :: GHC.Types.Bool
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 30 0}]
                                                conditions_s9Ta
                                                  = PlutusTx.Builtins.equalsByteString
                                                      (tn3
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                         %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                         ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                    <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                         ; PlutusTx.Eq.N:Eq[0]
                                                                               <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (housePotTokenName_s9Dg
                                                       `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                               ; Sym (SelCo:Fun(arg)
                                                                          (SelCo:Fun(res)
                                                                               (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                           <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                ; PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                               :: GHC.Types.Coercible
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                              let {
                                                conditions_s9Tb [Occ=Once1]
                                                  :: PlutusTx.Builtins.Internal.BuiltinString
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=False, ConLike=False, WorkFree=False,
                                                         Expandable=False,
                                                         Guidance=IF_ARGS [] 150 0}]
                                                conditions_s9Tb
                                                  = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                      (GHC.CString.unpackCString#
                                                         "Invalid token name: expected HousePot"#) } in
                                              let {
                                                conditions_s9Tc [Occ=Once1]
                                                  :: (GHC.Types.Bool,
                                                      PlutusTx.Builtins.Internal.BuiltinString)
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tc = (conditions_s9Ta, conditions_s9Tb) } in
                                              let {
                                                conditions_s9Td [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Td
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9Tc
                                                      (GHC.Types.[]
                                                         @(GHC.Types.Bool,
                                                           PlutusTx.Builtins.Internal.BuiltinString)) } in
                                              let {
                                                conditions_s9Te [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Te
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T9
                                                      conditions_s9Td } in
                                              let {
                                                conditions_s9Tf [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tf
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T6
                                                      conditions_s9Te } in
                                              let {
                                                conditions_s9Tg [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tg
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T3
                                                      conditions_s9Tf } in
                                              let {
                                                conditions_s9Th [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Th
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9T0
                                                      conditions_s9Tg } in
                                              let {
                                                conditions_s9Ti [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Ti
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9SX
                                                      conditions_s9Th } in
                                              let {
                                                conditions_s9Tj [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tj
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9SU
                                                      conditions_s9Ti } in
                                              let {
                                                conditions_s9Tk [Occ=Once1]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                conditions_s9Tk
                                                  = GHC.Types.:
                                                      @(GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                      conditions_s9SR
                                                      conditions_s9Tj } in
                                              joinrec {
                                                go [Occ=LoopBreakerT[1]]
                                                  :: [(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)]
                                                     -> GHC.Types.Bool
                                                [LclId[JoinId(1)(Nothing)],
                                                 Arity=1,
                                                 Str=<L>,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [30] 84 20}]
                                                go (ds [Occ=Once1!]
                                                      :: [(GHC.Types.Bool,
                                                           PlutusTx.Builtins.Internal.BuiltinString)])
                                                  = case ds of {
                                                      [] -> GHC.Types.True;
                                                      : x [Occ=Once1!] xs [Occ=Once1] ->
                                                        case case x of
                                                             { (condition [Occ=Once1], msg [Occ=Once1]) ->
                                                             PlutusTx.Trace.traceIfFalse msg condition
                                                             }
                                                        of {
                                                          GHC.Types.False -> GHC.Types.False;
                                                          GHC.Types.True -> jump go xs
                                                        }
                                                    }; } in
                                              jump go
                                                (GHC.Types.:
                                                   @(GHC.Types.Bool,
                                                     PlutusTx.Builtins.Internal.BuiltinString)
                                                   conditions_s9SO
                                                   conditions_s9Tk);
                                            : _ [Occ=Dead] _ [Occ=Dead] -> jump fail_d9ss GHC.Prim.(##)
                                          }
                                          }
                                      }
                                      }
                                  }
                                  }
                              }
                         of mintedExactlyThreeTokens [Occ=Once1!]
                         { __DEFAULT ->
                         PlutusTx.List.and
                           (GHC.Types.:
                              @GHC.Types.Bool
                              (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                      (GHC.CString.unpackCString#
                                         "Unauthorized: Transaction not signed by correct key"#)
                               of str1 [Occ=Once1]
                               { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                               case joinrec {
                                      go12 [Occ=LoopBreakerT[1]]
                                        :: [PlutusLedgerApi.V1.Crypto.PubKeyHash] -> GHC.Types.Bool
                                      [LclId[JoinId(1)(Nothing)],
                                       Arity=1,
                                       Str=<L>,
                                       Unf=Unf{Src=<vanilla>, TopLvl=False,
                                               Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                               Guidance=IF_ARGS [30] 134 20}]
                                      go12 (ds13 [Occ=Once1!] :: [PlutusLedgerApi.V1.Crypto.PubKeyHash])
                                        = case ds13 of {
                                            [] -> GHC.Types.False;
                                            : x2 [Occ=Once1!] xs [Occ=Once1] ->
                                              case x2
                                                   `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                                           :: GHC.Types.Coercible
                                                                PlutusLedgerApi.V1.Crypto.PubKeyHash
                                                                PlutusTx.Builtins.Internal.BuiltinByteString)
                                              of y1 [Occ=Once1]
                                              { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                              case PlutusTx.Builtins.Internal.equalsByteString nt_s9Qy y1
                                              of b1 [Occ=Once1]
                                              { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                              case PlutusTx.Builtins.Internal.ifThenElse
                                                     @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                              of {
                                                GHC.Types.False -> jump go12 xs;
                                                GHC.Types.True -> GHC.Types.True
                                              }
                                              }
                                              }
                                          }; } in
                                    jump go12 ipv
                               of {
                                 GHC.Types.False ->
                                   PlutusTx.Builtins.Internal.trace
                                     @GHC.Types.Bool str1 GHC.Types.False;
                                 GHC.Types.True -> GHC.Types.True
                               }
                               })
                              (GHC.Types.:
                                 @GHC.Types.Bool
                                 (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                         (GHC.CString.unpackCString#
                                            "Invalid: Must mint exactly three tokens"#)
                                  of str1 [Occ=Once1]
                                  { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                  case mintedExactlyThreeTokens of {
                                    GHC.Types.False ->
                                      PlutusTx.Builtins.Internal.trace
                                        @GHC.Types.Bool str1 GHC.Types.False;
                                    GHC.Types.True -> GHC.Types.True
                                  }
                                  })
                                 (GHC.Types.:
                                    @GHC.Types.Bool
                                    (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                            (GHC.CString.unpackCString#
                                               "Invalid: Transaction outside minting window"#)
                                     of str1 [Occ=Once1]
                                     { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                     case validateMintingWindow of {
                                       GHC.Types.False ->
                                         PlutusTx.Builtins.Internal.trace
                                           @GHC.Types.Bool str1 GHC.Types.False;
                                       GHC.Types.True -> GHC.Types.True
                                     }
                                     })
                                    (GHC.Types.[] @GHC.Types.Bool))))
                         }
                         }
                         }
                         }
                         }
                         }
Context: Compiling expr: \ (ctx [Occ=Once1!]
                              :: PlutusLedgerApi.V2.Contexts.ScriptContext) ->
                           case pkh
                                `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                        :: GHC.Types.Coercible
                                             PlutusLedgerApi.V1.Crypto.PubKeyHash
                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                           of nt_s9Qy [Occ=OnceL1]
                           { __DEFAULT ->
                           case _redeemer of { () ->
                           case ctx of ctx
                           { PlutusLedgerApi.V2.Contexts.ScriptContext ipv [Occ=Once1!]
                                                                       _ [Occ=Dead] ->
                           case ipv of
                           { PlutusLedgerApi.V2.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                _ [Occ=Dead] _ [Occ=Dead] ipv [Occ=Once1]
                                                                _ [Occ=Dead] _ [Occ=Dead] ipv ipv [Occ=Once1]
                                                                _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                           case case case ipv of
                                     { PlutusLedgerApi.V1.Interval.Interval ds1 [Occ=Once1]
                                                                            _ [Occ=Dead] ->
                                     ds1
                                     }
                                of
                                { PlutusLedgerApi.V1.Interval.LowerBound ds_d9sM [Occ=Once1!]
                                                                         _ [Occ=Dead] ->
                                case ds_d9sM of {
                                  __DEFAULT ->
                                    case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                           (GHC.CString.unpackCString#
                                              "Invalid: Missing lower bound for validity interval"#)
                                    of str1 [Occ=Once1]
                                    { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                    case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                    { () ->
                                    PlutusTx.Builtins.Internal.error
                                      @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                    }
                                    };
                                  PlutusLedgerApi.V1.Interval.Finite startTime [Occ=Once1] ->
                                    case case ipv of
                                         { PlutusLedgerApi.V1.Interval.Interval _ [Occ=Dead]
                                                                                ds2 [Occ=Once1] ->
                                         ds2
                                         }
                                    of
                                    { PlutusLedgerApi.V1.Interval.UpperBound ds_d9sG [Occ=Once1!]
                                                                             _ [Occ=Dead] ->
                                    case ds_d9sG of {
                                      __DEFAULT ->
                                        case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                               (GHC.CString.unpackCString#
                                                  "Invalid: Missing upper bound for validity interval"#)
                                        of str1 [Occ=Once1]
                                        { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                        case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                        { () ->
                                        PlutusTx.Builtins.Internal.error
                                          @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                        }
                                        };
                                      PlutusLedgerApi.V1.Interval.Finite endTime [Occ=Once1] ->
                                        case endTime
                                             `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                     :: GHC.Types.Coercible
                                                          PlutusLedgerApi.V1.Time.POSIXTime
                                                          GHC.Num.Integer.Integer)
                                        of endTimeInt
                                        { __DEFAULT ->
                                        case startTime
                                             `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                     :: GHC.Types.Coercible
                                                          PlutusLedgerApi.V1.Time.POSIXTime
                                                          GHC.Num.Integer.Integer)
                                        of startTimeInt
                                        { __DEFAULT ->
                                        case case (endTimeInt
                                                   `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                           :: GHC.Types.Coercible
                                                                GHC.Num.Integer.Integer
                                                                PlutusLedgerApi.V1.Time.POSIXTime))
                                                  `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                          :: GHC.Types.Coercible
                                                               PlutusLedgerApi.V1.Time.POSIXTime
                                                               GHC.Num.Integer.Integer)
                                             of x1 [Occ=Once1]
                                             { __DEFAULT ->
                                             case case (startTimeInt
                                                        `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                :: GHC.Types.Coercible
                                                                     GHC.Num.Integer.Integer
                                                                     PlutusLedgerApi.V1.Time.POSIXTime))
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                         ; Sym (PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                                    <PlutusLedgerApi.V1.Time.POSIXTime>_N)
                                                                         ; PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                               <PlutusLedgerApi.V1.Time.POSIXTime>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Time.POSIXTime
                                                                    GHC.Num.Integer.Integer)
                                                  of x1 [Occ=Once1]
                                                  { __DEFAULT ->
                                                  PlutusTx.Builtins.Internal.addInteger
                                                    x1 (GHC.Num.Integer.IS 10000#)
                                                  }
                                             of y1 [Occ=Once1]
                                             { __DEFAULT ->
                                             case PlutusTx.Builtins.Internal.lessThanEqualsInteger x1 y1
                                             of b1 [Occ=Once1]
                                             { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                             PlutusTx.Builtins.Internal.ifThenElse
                                               @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                             }
                                             }
                                             }
                                        of validWindow [Occ=Once1!]
                                        { __DEFAULT ->
                                        case PlutusTx.Builtins.Internal.appendString
                                               (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                  (GHC.CString.unpackCString#
                                                     "Invalid time window - Start: "#))
                                               (PlutusTx.Builtins.Internal.appendString
                                                  (PlutusTx.Show.TH.concatBuiltinStrings
                                                     (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                        (GHC.Num.Integer.IS 0#)
                                                        startTimeInt
                                                        (GHC.Types.[]
                                                           @PlutusTx.Builtins.Internal.BuiltinString)))
                                                  (PlutusTx.Builtins.Internal.appendString
                                                     (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString# " End: "#))
                                                     (PlutusTx.Show.TH.concatBuiltinStrings
                                                        (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                           (GHC.Num.Integer.IS 0#)
                                                           endTimeInt
                                                           (GHC.Types.[]
                                                              @PlutusTx.Builtins.Internal.BuiltinString)))))
                                        of str1 [Occ=Once1]
                                        { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                        case validWindow of {
                                          GHC.Types.False ->
                                            PlutusTx.Builtins.Internal.trace
                                              @GHC.Types.Bool str1 GHC.Types.False;
                                          GHC.Types.True -> GHC.Types.True
                                        }
                                        }
                                        }
                                        }
                                        }
                                    }
                                    }
                                }
                                }
                           of validateMintingWindow [Occ=Once1!]
                           { __DEFAULT ->
                           let {
                             ds_d9s7
                               :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                    PlutusLedgerApi.V1.Value.TokenName, GHC.Num.Integer.Integer)]
                             [LclId,
                              Unf=Unf{Src=<vanilla>, TopLvl=False,
                                      Value=False, ConLike=False, WorkFree=False, Expandable=False,
                                      Guidance=IF_ARGS [] 20 0}]
                             ds_d9s7 = PlutusLedgerApi.V1.Value.flattenValue ipv } in
                           case join {
                                  fail_d9ss [Occ=Once4!T[1]] :: (# #) -> GHC.Types.Bool
                                  [LclId[JoinId(1)(Nothing)],
                                   Arity=1,
                                   Str=<L>,
                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                           Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                           Guidance=IF_ARGS [0] 490 0}]
                                  fail_d9ss _ [Occ=Dead, OS=OneShot]
                                    = case ds_d9s7 of ds_X3 [Occ=Once1] { __DEFAULT ->
                                      case PlutusTx.Builtins.Internal.appendString
                                             (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                (GHC.CString.unpackCString#
                                                   "Invalid number of minted tokens: "#))
                                             (let {
                                                z1 [Occ=OnceL1] :: GHC.Num.Integer.Integer
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                z1 = GHC.Num.Integer.IS 0# } in
                                              letrec {
                                                go [Occ=LoopBreaker]
                                                  :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                       PlutusLedgerApi.V1.Value.TokenName,
                                                       GHC.Num.Integer.Integer)]
                                                     -> GHC.Num.Integer.Integer
                                                [LclId,
                                                 Arity=1,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [30] 100 0}]
                                                go
                                                  = \ (ds [Occ=Once1!]
                                                         :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                              PlutusLedgerApi.V1.Value.TokenName,
                                                              GHC.Num.Integer.Integer)]) ->
                                                      case ds of {
                                                        [] -> z1;
                                                        : x [Occ=Once1!] xs [Occ=Once1] ->
                                                          case x of
                                                          { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                                                          case go xs of acc1 [Occ=Once1] { __DEFAULT ->
                                                          PlutusTx.Builtins.Internal.addInteger
                                                            acc1 (GHC.Num.Integer.IS 1#)
                                                          }
                                                          }
                                                      }; } in
                                              case go ds_X3 of x1 [Occ=Once1] { __DEFAULT ->
                                              PlutusTx.Show.TH.concatBuiltinStrings
                                                (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                   (GHC.Num.Integer.IS 0#)
                                                   x1
                                                   (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString))
                                              })
                                      of str1 [Occ=Once1]
                                      { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                      case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                      { () ->
                                      PlutusTx.Builtins.Internal.error
                                        @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                      }
                                      }
                                      } } in
                                case ds_d9s7 of {
                                  [] -> jump fail_d9ss GHC.Prim.(##);
                                  : ds_d9sk [Occ=Once1!] ds_d9sl [Occ=Once1!] ->
                                    case ds_d9sk of
                                    { (cs1 [Occ=Once1!], tn1 [Occ=Once1], q1 [Occ=Once1]) ->
                                    case ds_d9sl of {
                                      [] -> jump fail_d9ss GHC.Prim.(##);
                                      : ds_d9sm [Occ=Once1!] ds_d9sn [Occ=Once1!] ->
                                        case ds_d9sm of
                                        { (cs2 [Occ=Once1!], tn2 [Occ=Once1], q2 [Occ=Once1]) ->
                                        case ds_d9sn of {
                                          [] -> jump fail_d9ss GHC.Prim.(##);
                                          : ds_d9so [Occ=Once1!] ds_d9sp [Occ=Once1!] ->
                                            case ds_d9so of
                                            { (cs3 [Occ=Once1!], tn3 [Occ=Once1], q3 [Occ=Once1]) ->
                                            case ds_d9sp of {
                                              [] ->
                                                let {
                                                  conditions_s9SM [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9SM
                                                    = case cs1
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                             ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                             ; PlutusTx.Eq.N:Eq[0]
                                                                                   <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of x1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol
                                                              ctx)
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of y1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9SN [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 140 0}]
                                                  conditions_s9SN
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid currency symbol for token 1"#) } in
                                                let {
                                                  conditions_s9SO [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9SO = (conditions_s9SM, conditions_s9SN) } in
                                                let {
                                                  conditions_s9SP [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9SP
                                                    = case cs2
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                             ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                             ; PlutusTx.Eq.N:Eq[0]
                                                                                   <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of x1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol
                                                              ctx)
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of y1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9SQ [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 140 0}]
                                                  conditions_s9SQ
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid currency symbol for token 2"#) } in
                                                let {
                                                  conditions_s9SR [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9SR = (conditions_s9SP, conditions_s9SQ) } in
                                                let {
                                                  conditions_s9SS [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9SS
                                                    = case cs3
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                             ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                             ; PlutusTx.Eq.N:Eq[0]
                                                                                   <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of x1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol
                                                              ctx)
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of y1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9ST [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 140 0}]
                                                  conditions_s9ST
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid currency symbol for token 3"#) } in
                                                let {
                                                  conditions_s9SU [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9SU = (conditions_s9SS, conditions_s9ST) } in
                                                let {
                                                  conditions_s9SV [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 100 0}]
                                                  conditions_s9SV
                                                    = case q1 of x1 [Occ=Once1] { __DEFAULT ->
                                                      case PlutusTx.Builtins.Internal.equalsInteger
                                                             x1 (GHC.Num.Integer.IS 1#)
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9SW [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9SW
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid quantity for token 1"#) } in
                                                let {
                                                  conditions_s9SX [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9SX = (conditions_s9SV, conditions_s9SW) } in
                                                let {
                                                  conditions_s9SY [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 100 0}]
                                                  conditions_s9SY
                                                    = case q2 of x1 [Occ=Once1] { __DEFAULT ->
                                                      case PlutusTx.Builtins.Internal.equalsInteger
                                                             x1 (GHC.Num.Integer.IS 1#)
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9SZ [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9SZ
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid quantity for token 2"#) } in
                                                let {
                                                  conditions_s9T0 [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9T0 = (conditions_s9SY, conditions_s9SZ) } in
                                                let {
                                                  conditions_s9T1 [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 100 0}]
                                                  conditions_s9T1
                                                    = case q3 of x1 [Occ=Once1] { __DEFAULT ->
                                                      case PlutusTx.Builtins.Internal.equalsInteger
                                                             x1 (GHC.Num.Integer.IS 1#)
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9T2 [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9T2
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid quantity for token 3"#) } in
                                                let {
                                                  conditions_s9T3 [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9T3 = (conditions_s9T1, conditions_s9T2) } in
                                                let {
                                                  conditions_s9T4 [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 30 0}]
                                                  conditions_s9T4
                                                    = PlutusTx.Builtins.equalsByteString
                                                        (tn1
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.TokenName
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                        (coinFlipTokenName_s9Di
                                                         `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                 ; Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                                let {
                                                  conditions_s9T5 [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 150 0}]
                                                  conditions_s9T5
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid token name: expected CoinFlip"#) } in
                                                let {
                                                  conditions_s9T6 [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9T6 = (conditions_s9T4, conditions_s9T5) } in
                                                let {
                                                  conditions_s9T7 [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 30 0}]
                                                  conditions_s9T7
                                                    = PlutusTx.Builtins.equalsByteString
                                                        (tn2
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.TokenName
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                        (vrfHolderTokenName_s9Dh
                                                         `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                 ; Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                                let {
                                                  conditions_s9T8 [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 150 0}]
                                                  conditions_s9T8
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid token name: expected VRFHolder"#) } in
                                                let {
                                                  conditions_s9T9 [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9T9 = (conditions_s9T7, conditions_s9T8) } in
                                                let {
                                                  conditions_s9Ta [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 30 0}]
                                                  conditions_s9Ta
                                                    = PlutusTx.Builtins.equalsByteString
                                                        (tn3
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.TokenName
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                        (housePotTokenName_s9Dg
                                                         `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                 ; Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                                let {
                                                  conditions_s9Tb [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 150 0}]
                                                  conditions_s9Tb
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid token name: expected HousePot"#) } in
                                                let {
                                                  conditions_s9Tc [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Tc = (conditions_s9Ta, conditions_s9Tb) } in
                                                let {
                                                  conditions_s9Td [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Td
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9Tc
                                                        (GHC.Types.[]
                                                           @(GHC.Types.Bool,
                                                             PlutusTx.Builtins.Internal.BuiltinString)) } in
                                                let {
                                                  conditions_s9Te [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Te
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9T9
                                                        conditions_s9Td } in
                                                let {
                                                  conditions_s9Tf [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Tf
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9T6
                                                        conditions_s9Te } in
                                                let {
                                                  conditions_s9Tg [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Tg
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9T3
                                                        conditions_s9Tf } in
                                                let {
                                                  conditions_s9Th [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Th
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9T0
                                                        conditions_s9Tg } in
                                                let {
                                                  conditions_s9Ti [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Ti
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9SX
                                                        conditions_s9Th } in
                                                let {
                                                  conditions_s9Tj [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Tj
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9SU
                                                        conditions_s9Ti } in
                                                let {
                                                  conditions_s9Tk [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Tk
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9SR
                                                        conditions_s9Tj } in
                                                joinrec {
                                                  go [Occ=LoopBreakerT[1]]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                       -> GHC.Types.Bool
                                                  [LclId[JoinId(1)(Nothing)],
                                                   Arity=1,
                                                   Str=<L>,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [30] 84 20}]
                                                  go (ds [Occ=Once1!]
                                                        :: [(GHC.Types.Bool,
                                                             PlutusTx.Builtins.Internal.BuiltinString)])
                                                    = case ds of {
                                                        [] -> GHC.Types.True;
                                                        : x [Occ=Once1!] xs [Occ=Once1] ->
                                                          case case x of
                                                               { (condition [Occ=Once1], msg [Occ=Once1]) ->
                                                               PlutusTx.Trace.traceIfFalse msg condition
                                                               }
                                                          of {
                                                            GHC.Types.False -> GHC.Types.False;
                                                            GHC.Types.True -> jump go xs
                                                          }
                                                      }; } in
                                                jump go
                                                  (GHC.Types.:
                                                     @(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)
                                                     conditions_s9SO
                                                     conditions_s9Tk);
                                              : _ [Occ=Dead] _ [Occ=Dead] -> jump fail_d9ss GHC.Prim.(##)
                                            }
                                            }
                                        }
                                        }
                                    }
                                    }
                                }
                           of mintedExactlyThreeTokens [Occ=Once1!]
                           { __DEFAULT ->
                           PlutusTx.List.and
                             (GHC.Types.:
                                @GHC.Types.Bool
                                (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                        (GHC.CString.unpackCString#
                                           "Unauthorized: Transaction not signed by correct key"#)
                                 of str1 [Occ=Once1]
                                 { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                 case joinrec {
                                        go12 [Occ=LoopBreakerT[1]]
                                          :: [PlutusLedgerApi.V1.Crypto.PubKeyHash] -> GHC.Types.Bool
                                        [LclId[JoinId(1)(Nothing)],
                                         Arity=1,
                                         Str=<L>,
                                         Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                 Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                                 Guidance=IF_ARGS [30] 134 20}]
                                        go12 (ds13 [Occ=Once1!] :: [PlutusLedgerApi.V1.Crypto.PubKeyHash])
                                          = case ds13 of {
                                              [] -> GHC.Types.False;
                                              : x2 [Occ=Once1!] xs [Occ=Once1] ->
                                                case x2
                                                     `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                                             :: GHC.Types.Coercible
                                                                  PlutusLedgerApi.V1.Crypto.PubKeyHash
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                of y1 [Occ=Once1]
                                                { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                case PlutusTx.Builtins.Internal.equalsByteString nt_s9Qy y1
                                                of b1 [Occ=Once1]
                                                { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                case PlutusTx.Builtins.Internal.ifThenElse
                                                       @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                of {
                                                  GHC.Types.False -> jump go12 xs;
                                                  GHC.Types.True -> GHC.Types.True
                                                }
                                                }
                                                }
                                            }; } in
                                      jump go12 ipv
                                 of {
                                   GHC.Types.False ->
                                     PlutusTx.Builtins.Internal.trace
                                       @GHC.Types.Bool str1 GHC.Types.False;
                                   GHC.Types.True -> GHC.Types.True
                                 }
                                 })
                                (GHC.Types.:
                                   @GHC.Types.Bool
                                   (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                           (GHC.CString.unpackCString#
                                              "Invalid: Must mint exactly three tokens"#)
                                    of str1 [Occ=Once1]
                                    { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                    case mintedExactlyThreeTokens of {
                                      GHC.Types.False ->
                                        PlutusTx.Builtins.Internal.trace
                                          @GHC.Types.Bool str1 GHC.Types.False;
                                      GHC.Types.True -> GHC.Types.True
                                    }
                                    })
                                   (GHC.Types.:
                                      @GHC.Types.Bool
                                      (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                              (GHC.CString.unpackCString#
                                                 "Invalid: Transaction outside minting window"#)
                                       of str1 [Occ=Once1]
                                       { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                       case validateMintingWindow of {
                                         GHC.Types.False ->
                                           PlutusTx.Builtins.Internal.trace
                                             @GHC.Types.Bool str1 GHC.Types.False;
                                         GHC.Types.True -> GHC.Types.True
                                       }
                                       })
                                      (GHC.Types.[] @GHC.Types.Bool))))
                           }
                           }
                           }
                           }
                           }
                           }
Context: Compiling expr: \ (_redeemer [Occ=Once1!]
                              :: NFTThree.ScriptIdentityRedeemer)
                           (ctx [Occ=Once1!] :: PlutusLedgerApi.V2.Contexts.ScriptContext) ->
                           case pkh
                                `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                        :: GHC.Types.Coercible
                                             PlutusLedgerApi.V1.Crypto.PubKeyHash
                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                           of nt_s9Qy [Occ=OnceL1]
                           { __DEFAULT ->
                           case _redeemer of { () ->
                           case ctx of ctx
                           { PlutusLedgerApi.V2.Contexts.ScriptContext ipv [Occ=Once1!]
                                                                       _ [Occ=Dead] ->
                           case ipv of
                           { PlutusLedgerApi.V2.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                _ [Occ=Dead] _ [Occ=Dead] ipv [Occ=Once1]
                                                                _ [Occ=Dead] _ [Occ=Dead] ipv ipv [Occ=Once1]
                                                                _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                           case case case ipv of
                                     { PlutusLedgerApi.V1.Interval.Interval ds1 [Occ=Once1]
                                                                            _ [Occ=Dead] ->
                                     ds1
                                     }
                                of
                                { PlutusLedgerApi.V1.Interval.LowerBound ds_d9sM [Occ=Once1!]
                                                                         _ [Occ=Dead] ->
                                case ds_d9sM of {
                                  __DEFAULT ->
                                    case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                           (GHC.CString.unpackCString#
                                              "Invalid: Missing lower bound for validity interval"#)
                                    of str1 [Occ=Once1]
                                    { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                    case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                    { () ->
                                    PlutusTx.Builtins.Internal.error
                                      @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                    }
                                    };
                                  PlutusLedgerApi.V1.Interval.Finite startTime [Occ=Once1] ->
                                    case case ipv of
                                         { PlutusLedgerApi.V1.Interval.Interval _ [Occ=Dead]
                                                                                ds2 [Occ=Once1] ->
                                         ds2
                                         }
                                    of
                                    { PlutusLedgerApi.V1.Interval.UpperBound ds_d9sG [Occ=Once1!]
                                                                             _ [Occ=Dead] ->
                                    case ds_d9sG of {
                                      __DEFAULT ->
                                        case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                               (GHC.CString.unpackCString#
                                                  "Invalid: Missing upper bound for validity interval"#)
                                        of str1 [Occ=Once1]
                                        { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                        case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                        { () ->
                                        PlutusTx.Builtins.Internal.error
                                          @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                        }
                                        };
                                      PlutusLedgerApi.V1.Interval.Finite endTime [Occ=Once1] ->
                                        case endTime
                                             `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                     :: GHC.Types.Coercible
                                                          PlutusLedgerApi.V1.Time.POSIXTime
                                                          GHC.Num.Integer.Integer)
                                        of endTimeInt
                                        { __DEFAULT ->
                                        case startTime
                                             `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                     :: GHC.Types.Coercible
                                                          PlutusLedgerApi.V1.Time.POSIXTime
                                                          GHC.Num.Integer.Integer)
                                        of startTimeInt
                                        { __DEFAULT ->
                                        case case (endTimeInt
                                                   `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                           :: GHC.Types.Coercible
                                                                GHC.Num.Integer.Integer
                                                                PlutusLedgerApi.V1.Time.POSIXTime))
                                                  `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                          :: GHC.Types.Coercible
                                                               PlutusLedgerApi.V1.Time.POSIXTime
                                                               GHC.Num.Integer.Integer)
                                             of x1 [Occ=Once1]
                                             { __DEFAULT ->
                                             case case (startTimeInt
                                                        `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                :: GHC.Types.Coercible
                                                                     GHC.Num.Integer.Integer
                                                                     PlutusLedgerApi.V1.Time.POSIXTime))
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                         ; Sym (PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                                    <PlutusLedgerApi.V1.Time.POSIXTime>_N)
                                                                         ; PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                               <PlutusLedgerApi.V1.Time.POSIXTime>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Time.POSIXTime
                                                                    GHC.Num.Integer.Integer)
                                                  of x1 [Occ=Once1]
                                                  { __DEFAULT ->
                                                  PlutusTx.Builtins.Internal.addInteger
                                                    x1 (GHC.Num.Integer.IS 10000#)
                                                  }
                                             of y1 [Occ=Once1]
                                             { __DEFAULT ->
                                             case PlutusTx.Builtins.Internal.lessThanEqualsInteger x1 y1
                                             of b1 [Occ=Once1]
                                             { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                             PlutusTx.Builtins.Internal.ifThenElse
                                               @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                             }
                                             }
                                             }
                                        of validWindow [Occ=Once1!]
                                        { __DEFAULT ->
                                        case PlutusTx.Builtins.Internal.appendString
                                               (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                  (GHC.CString.unpackCString#
                                                     "Invalid time window - Start: "#))
                                               (PlutusTx.Builtins.Internal.appendString
                                                  (PlutusTx.Show.TH.concatBuiltinStrings
                                                     (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                        (GHC.Num.Integer.IS 0#)
                                                        startTimeInt
                                                        (GHC.Types.[]
                                                           @PlutusTx.Builtins.Internal.BuiltinString)))
                                                  (PlutusTx.Builtins.Internal.appendString
                                                     (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString# " End: "#))
                                                     (PlutusTx.Show.TH.concatBuiltinStrings
                                                        (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                           (GHC.Num.Integer.IS 0#)
                                                           endTimeInt
                                                           (GHC.Types.[]
                                                              @PlutusTx.Builtins.Internal.BuiltinString)))))
                                        of str1 [Occ=Once1]
                                        { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                        case validWindow of {
                                          GHC.Types.False ->
                                            PlutusTx.Builtins.Internal.trace
                                              @GHC.Types.Bool str1 GHC.Types.False;
                                          GHC.Types.True -> GHC.Types.True
                                        }
                                        }
                                        }
                                        }
                                        }
                                    }
                                    }
                                }
                                }
                           of validateMintingWindow [Occ=Once1!]
                           { __DEFAULT ->
                           let {
                             ds_d9s7
                               :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                    PlutusLedgerApi.V1.Value.TokenName, GHC.Num.Integer.Integer)]
                             [LclId,
                              Unf=Unf{Src=<vanilla>, TopLvl=False,
                                      Value=False, ConLike=False, WorkFree=False, Expandable=False,
                                      Guidance=IF_ARGS [] 20 0}]
                             ds_d9s7 = PlutusLedgerApi.V1.Value.flattenValue ipv } in
                           case join {
                                  fail_d9ss [Occ=Once4!T[1]] :: (# #) -> GHC.Types.Bool
                                  [LclId[JoinId(1)(Nothing)],
                                   Arity=1,
                                   Str=<L>,
                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                           Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                           Guidance=IF_ARGS [0] 490 0}]
                                  fail_d9ss _ [Occ=Dead, OS=OneShot]
                                    = case ds_d9s7 of ds_X3 [Occ=Once1] { __DEFAULT ->
                                      case PlutusTx.Builtins.Internal.appendString
                                             (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                (GHC.CString.unpackCString#
                                                   "Invalid number of minted tokens: "#))
                                             (let {
                                                z1 [Occ=OnceL1] :: GHC.Num.Integer.Integer
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                z1 = GHC.Num.Integer.IS 0# } in
                                              letrec {
                                                go [Occ=LoopBreaker]
                                                  :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                       PlutusLedgerApi.V1.Value.TokenName,
                                                       GHC.Num.Integer.Integer)]
                                                     -> GHC.Num.Integer.Integer
                                                [LclId,
                                                 Arity=1,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [30] 100 0}]
                                                go
                                                  = \ (ds [Occ=Once1!]
                                                         :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                              PlutusLedgerApi.V1.Value.TokenName,
                                                              GHC.Num.Integer.Integer)]) ->
                                                      case ds of {
                                                        [] -> z1;
                                                        : x [Occ=Once1!] xs [Occ=Once1] ->
                                                          case x of
                                                          { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                                                          case go xs of acc1 [Occ=Once1] { __DEFAULT ->
                                                          PlutusTx.Builtins.Internal.addInteger
                                                            acc1 (GHC.Num.Integer.IS 1#)
                                                          }
                                                          }
                                                      }; } in
                                              case go ds_X3 of x1 [Occ=Once1] { __DEFAULT ->
                                              PlutusTx.Show.TH.concatBuiltinStrings
                                                (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                   (GHC.Num.Integer.IS 0#)
                                                   x1
                                                   (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString))
                                              })
                                      of str1 [Occ=Once1]
                                      { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                      case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                      { () ->
                                      PlutusTx.Builtins.Internal.error
                                        @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                      }
                                      }
                                      } } in
                                case ds_d9s7 of {
                                  [] -> jump fail_d9ss GHC.Prim.(##);
                                  : ds_d9sk [Occ=Once1!] ds_d9sl [Occ=Once1!] ->
                                    case ds_d9sk of
                                    { (cs1 [Occ=Once1!], tn1 [Occ=Once1], q1 [Occ=Once1]) ->
                                    case ds_d9sl of {
                                      [] -> jump fail_d9ss GHC.Prim.(##);
                                      : ds_d9sm [Occ=Once1!] ds_d9sn [Occ=Once1!] ->
                                        case ds_d9sm of
                                        { (cs2 [Occ=Once1!], tn2 [Occ=Once1], q2 [Occ=Once1]) ->
                                        case ds_d9sn of {
                                          [] -> jump fail_d9ss GHC.Prim.(##);
                                          : ds_d9so [Occ=Once1!] ds_d9sp [Occ=Once1!] ->
                                            case ds_d9so of
                                            { (cs3 [Occ=Once1!], tn3 [Occ=Once1], q3 [Occ=Once1]) ->
                                            case ds_d9sp of {
                                              [] ->
                                                let {
                                                  conditions_s9SM [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9SM
                                                    = case cs1
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                             ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                             ; PlutusTx.Eq.N:Eq[0]
                                                                                   <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of x1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol
                                                              ctx)
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of y1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9SN [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 140 0}]
                                                  conditions_s9SN
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid currency symbol for token 1"#) } in
                                                let {
                                                  conditions_s9SO [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9SO = (conditions_s9SM, conditions_s9SN) } in
                                                let {
                                                  conditions_s9SP [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9SP
                                                    = case cs2
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                             ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                             ; PlutusTx.Eq.N:Eq[0]
                                                                                   <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of x1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol
                                                              ctx)
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of y1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9SQ [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 140 0}]
                                                  conditions_s9SQ
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid currency symbol for token 2"#) } in
                                                let {
                                                  conditions_s9SR [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9SR = (conditions_s9SP, conditions_s9SQ) } in
                                                let {
                                                  conditions_s9SS [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9SS
                                                    = case cs3
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                             ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                             ; PlutusTx.Eq.N:Eq[0]
                                                                                   <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of x1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol
                                                              ctx)
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of y1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9ST [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 140 0}]
                                                  conditions_s9ST
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid currency symbol for token 3"#) } in
                                                let {
                                                  conditions_s9SU [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9SU = (conditions_s9SS, conditions_s9ST) } in
                                                let {
                                                  conditions_s9SV [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 100 0}]
                                                  conditions_s9SV
                                                    = case q1 of x1 [Occ=Once1] { __DEFAULT ->
                                                      case PlutusTx.Builtins.Internal.equalsInteger
                                                             x1 (GHC.Num.Integer.IS 1#)
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9SW [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9SW
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid quantity for token 1"#) } in
                                                let {
                                                  conditions_s9SX [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9SX = (conditions_s9SV, conditions_s9SW) } in
                                                let {
                                                  conditions_s9SY [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 100 0}]
                                                  conditions_s9SY
                                                    = case q2 of x1 [Occ=Once1] { __DEFAULT ->
                                                      case PlutusTx.Builtins.Internal.equalsInteger
                                                             x1 (GHC.Num.Integer.IS 1#)
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9SZ [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9SZ
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid quantity for token 2"#) } in
                                                let {
                                                  conditions_s9T0 [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9T0 = (conditions_s9SY, conditions_s9SZ) } in
                                                let {
                                                  conditions_s9T1 [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 100 0}]
                                                  conditions_s9T1
                                                    = case q3 of x1 [Occ=Once1] { __DEFAULT ->
                                                      case PlutusTx.Builtins.Internal.equalsInteger
                                                             x1 (GHC.Num.Integer.IS 1#)
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9T2 [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9T2
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid quantity for token 3"#) } in
                                                let {
                                                  conditions_s9T3 [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9T3 = (conditions_s9T1, conditions_s9T2) } in
                                                let {
                                                  conditions_s9T4 [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 30 0}]
                                                  conditions_s9T4
                                                    = PlutusTx.Builtins.equalsByteString
                                                        (tn1
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.TokenName
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                        (coinFlipTokenName_s9Di
                                                         `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                 ; Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                                let {
                                                  conditions_s9T5 [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 150 0}]
                                                  conditions_s9T5
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid token name: expected CoinFlip"#) } in
                                                let {
                                                  conditions_s9T6 [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9T6 = (conditions_s9T4, conditions_s9T5) } in
                                                let {
                                                  conditions_s9T7 [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 30 0}]
                                                  conditions_s9T7
                                                    = PlutusTx.Builtins.equalsByteString
                                                        (tn2
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.TokenName
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                        (vrfHolderTokenName_s9Dh
                                                         `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                 ; Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                                let {
                                                  conditions_s9T8 [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 150 0}]
                                                  conditions_s9T8
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid token name: expected VRFHolder"#) } in
                                                let {
                                                  conditions_s9T9 [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9T9 = (conditions_s9T7, conditions_s9T8) } in
                                                let {
                                                  conditions_s9Ta [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 30 0}]
                                                  conditions_s9Ta
                                                    = PlutusTx.Builtins.equalsByteString
                                                        (tn3
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.TokenName
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                        (housePotTokenName_s9Dg
                                                         `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                 ; Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                                let {
                                                  conditions_s9Tb [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 150 0}]
                                                  conditions_s9Tb
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid token name: expected HousePot"#) } in
                                                let {
                                                  conditions_s9Tc [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Tc = (conditions_s9Ta, conditions_s9Tb) } in
                                                let {
                                                  conditions_s9Td [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Td
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9Tc
                                                        (GHC.Types.[]
                                                           @(GHC.Types.Bool,
                                                             PlutusTx.Builtins.Internal.BuiltinString)) } in
                                                let {
                                                  conditions_s9Te [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Te
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9T9
                                                        conditions_s9Td } in
                                                let {
                                                  conditions_s9Tf [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Tf
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9T6
                                                        conditions_s9Te } in
                                                let {
                                                  conditions_s9Tg [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Tg
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9T3
                                                        conditions_s9Tf } in
                                                let {
                                                  conditions_s9Th [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Th
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9T0
                                                        conditions_s9Tg } in
                                                let {
                                                  conditions_s9Ti [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Ti
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9SX
                                                        conditions_s9Th } in
                                                let {
                                                  conditions_s9Tj [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Tj
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9SU
                                                        conditions_s9Ti } in
                                                let {
                                                  conditions_s9Tk [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Tk
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9SR
                                                        conditions_s9Tj } in
                                                joinrec {
                                                  go [Occ=LoopBreakerT[1]]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                       -> GHC.Types.Bool
                                                  [LclId[JoinId(1)(Nothing)],
                                                   Arity=1,
                                                   Str=<L>,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [30] 84 20}]
                                                  go (ds [Occ=Once1!]
                                                        :: [(GHC.Types.Bool,
                                                             PlutusTx.Builtins.Internal.BuiltinString)])
                                                    = case ds of {
                                                        [] -> GHC.Types.True;
                                                        : x [Occ=Once1!] xs [Occ=Once1] ->
                                                          case case x of
                                                               { (condition [Occ=Once1], msg [Occ=Once1]) ->
                                                               PlutusTx.Trace.traceIfFalse msg condition
                                                               }
                                                          of {
                                                            GHC.Types.False -> GHC.Types.False;
                                                            GHC.Types.True -> jump go xs
                                                          }
                                                      }; } in
                                                jump go
                                                  (GHC.Types.:
                                                     @(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)
                                                     conditions_s9SO
                                                     conditions_s9Tk);
                                              : _ [Occ=Dead] _ [Occ=Dead] -> jump fail_d9ss GHC.Prim.(##)
                                            }
                                            }
                                        }
                                        }
                                    }
                                    }
                                }
                           of mintedExactlyThreeTokens [Occ=Once1!]
                           { __DEFAULT ->
                           PlutusTx.List.and
                             (GHC.Types.:
                                @GHC.Types.Bool
                                (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                        (GHC.CString.unpackCString#
                                           "Unauthorized: Transaction not signed by correct key"#)
                                 of str1 [Occ=Once1]
                                 { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                 case joinrec {
                                        go12 [Occ=LoopBreakerT[1]]
                                          :: [PlutusLedgerApi.V1.Crypto.PubKeyHash] -> GHC.Types.Bool
                                        [LclId[JoinId(1)(Nothing)],
                                         Arity=1,
                                         Str=<L>,
                                         Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                 Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                                 Guidance=IF_ARGS [30] 134 20}]
                                        go12 (ds13 [Occ=Once1!] :: [PlutusLedgerApi.V1.Crypto.PubKeyHash])
                                          = case ds13 of {
                                              [] -> GHC.Types.False;
                                              : x2 [Occ=Once1!] xs [Occ=Once1] ->
                                                case x2
                                                     `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                                             :: GHC.Types.Coercible
                                                                  PlutusLedgerApi.V1.Crypto.PubKeyHash
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                of y1 [Occ=Once1]
                                                { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                case PlutusTx.Builtins.Internal.equalsByteString nt_s9Qy y1
                                                of b1 [Occ=Once1]
                                                { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                case PlutusTx.Builtins.Internal.ifThenElse
                                                       @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                of {
                                                  GHC.Types.False -> jump go12 xs;
                                                  GHC.Types.True -> GHC.Types.True
                                                }
                                                }
                                                }
                                            }; } in
                                      jump go12 ipv
                                 of {
                                   GHC.Types.False ->
                                     PlutusTx.Builtins.Internal.trace
                                       @GHC.Types.Bool str1 GHC.Types.False;
                                   GHC.Types.True -> GHC.Types.True
                                 }
                                 })
                                (GHC.Types.:
                                   @GHC.Types.Bool
                                   (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                           (GHC.CString.unpackCString#
                                              "Invalid: Must mint exactly three tokens"#)
                                    of str1 [Occ=Once1]
                                    { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                    case mintedExactlyThreeTokens of {
                                      GHC.Types.False ->
                                        PlutusTx.Builtins.Internal.trace
                                          @GHC.Types.Bool str1 GHC.Types.False;
                                      GHC.Types.True -> GHC.Types.True
                                    }
                                    })
                                   (GHC.Types.:
                                      @GHC.Types.Bool
                                      (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                              (GHC.CString.unpackCString#
                                                 "Invalid: Transaction outside minting window"#)
                                       of str1 [Occ=Once1]
                                       { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                       case validateMintingWindow of {
                                         GHC.Types.False ->
                                           PlutusTx.Builtins.Internal.trace
                                             @GHC.Types.Bool str1 GHC.Types.False;
                                         GHC.Types.True -> GHC.Types.True
                                       }
                                       })
                                      (GHC.Types.[] @GHC.Types.Bool))))
                           }
                           }
                           }
                           }
                           }
                           }
Context: Compiling expr: \ (pkh [Occ=Once1]
                              :: NFTThree.ScriptIdentityParams)
                           (_redeemer [Occ=Once1!] :: NFTThree.ScriptIdentityRedeemer)
                           (ctx [Occ=Once1!] :: PlutusLedgerApi.V2.Contexts.ScriptContext) ->
                           case pkh
                                `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                        :: GHC.Types.Coercible
                                             PlutusLedgerApi.V1.Crypto.PubKeyHash
                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                           of nt_s9Qy [Occ=OnceL1]
                           { __DEFAULT ->
                           case _redeemer of { () ->
                           case ctx of ctx
                           { PlutusLedgerApi.V2.Contexts.ScriptContext ipv [Occ=Once1!]
                                                                       _ [Occ=Dead] ->
                           case ipv of
                           { PlutusLedgerApi.V2.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                _ [Occ=Dead] _ [Occ=Dead] ipv [Occ=Once1]
                                                                _ [Occ=Dead] _ [Occ=Dead] ipv ipv [Occ=Once1]
                                                                _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                           case case case ipv of
                                     { PlutusLedgerApi.V1.Interval.Interval ds1 [Occ=Once1]
                                                                            _ [Occ=Dead] ->
                                     ds1
                                     }
                                of
                                { PlutusLedgerApi.V1.Interval.LowerBound ds_d9sM [Occ=Once1!]
                                                                         _ [Occ=Dead] ->
                                case ds_d9sM of {
                                  __DEFAULT ->
                                    case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                           (GHC.CString.unpackCString#
                                              "Invalid: Missing lower bound for validity interval"#)
                                    of str1 [Occ=Once1]
                                    { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                    case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                    { () ->
                                    PlutusTx.Builtins.Internal.error
                                      @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                    }
                                    };
                                  PlutusLedgerApi.V1.Interval.Finite startTime [Occ=Once1] ->
                                    case case ipv of
                                         { PlutusLedgerApi.V1.Interval.Interval _ [Occ=Dead]
                                                                                ds2 [Occ=Once1] ->
                                         ds2
                                         }
                                    of
                                    { PlutusLedgerApi.V1.Interval.UpperBound ds_d9sG [Occ=Once1!]
                                                                             _ [Occ=Dead] ->
                                    case ds_d9sG of {
                                      __DEFAULT ->
                                        case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                               (GHC.CString.unpackCString#
                                                  "Invalid: Missing upper bound for validity interval"#)
                                        of str1 [Occ=Once1]
                                        { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                        case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                        { () ->
                                        PlutusTx.Builtins.Internal.error
                                          @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                        }
                                        };
                                      PlutusLedgerApi.V1.Interval.Finite endTime [Occ=Once1] ->
                                        case endTime
                                             `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                     :: GHC.Types.Coercible
                                                          PlutusLedgerApi.V1.Time.POSIXTime
                                                          GHC.Num.Integer.Integer)
                                        of endTimeInt
                                        { __DEFAULT ->
                                        case startTime
                                             `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                     :: GHC.Types.Coercible
                                                          PlutusLedgerApi.V1.Time.POSIXTime
                                                          GHC.Num.Integer.Integer)
                                        of startTimeInt
                                        { __DEFAULT ->
                                        case case (endTimeInt
                                                   `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                           :: GHC.Types.Coercible
                                                                GHC.Num.Integer.Integer
                                                                PlutusLedgerApi.V1.Time.POSIXTime))
                                                  `cast` (PlutusLedgerApi.V1.Time.N:POSIXTime[0]
                                                          :: GHC.Types.Coercible
                                                               PlutusLedgerApi.V1.Time.POSIXTime
                                                               GHC.Num.Integer.Integer)
                                             of x1 [Occ=Once1]
                                             { __DEFAULT ->
                                             case case (startTimeInt
                                                        `cast` (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                :: GHC.Types.Coercible
                                                                     GHC.Num.Integer.Integer
                                                                     PlutusLedgerApi.V1.Time.POSIXTime))
                                                       `cast` (Sym (SelCo:Fun(arg)
                                                                        (Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                         %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Time.N:POSIXTime[0])
                                                                         ; Sym (PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                                    <PlutusLedgerApi.V1.Time.POSIXTime>_N)
                                                                         ; PlutusTx.Numeric.N:AdditiveSemigroup[0]
                                                                               <PlutusLedgerApi.V1.Time.POSIXTime>_N))
                                                               :: GHC.Types.Coercible
                                                                    PlutusLedgerApi.V1.Time.POSIXTime
                                                                    GHC.Num.Integer.Integer)
                                                  of x1 [Occ=Once1]
                                                  { __DEFAULT ->
                                                  PlutusTx.Builtins.Internal.addInteger
                                                    x1 (GHC.Num.Integer.IS 10000#)
                                                  }
                                             of y1 [Occ=Once1]
                                             { __DEFAULT ->
                                             case PlutusTx.Builtins.Internal.lessThanEqualsInteger x1 y1
                                             of b1 [Occ=Once1]
                                             { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                             PlutusTx.Builtins.Internal.ifThenElse
                                               @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                             }
                                             }
                                             }
                                        of validWindow [Occ=Once1!]
                                        { __DEFAULT ->
                                        case PlutusTx.Builtins.Internal.appendString
                                               (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                  (GHC.CString.unpackCString#
                                                     "Invalid time window - Start: "#))
                                               (PlutusTx.Builtins.Internal.appendString
                                                  (PlutusTx.Show.TH.concatBuiltinStrings
                                                     (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                        (GHC.Num.Integer.IS 0#)
                                                        startTimeInt
                                                        (GHC.Types.[]
                                                           @PlutusTx.Builtins.Internal.BuiltinString)))
                                                  (PlutusTx.Builtins.Internal.appendString
                                                     (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString# " End: "#))
                                                     (PlutusTx.Show.TH.concatBuiltinStrings
                                                        (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                           (GHC.Num.Integer.IS 0#)
                                                           endTimeInt
                                                           (GHC.Types.[]
                                                              @PlutusTx.Builtins.Internal.BuiltinString)))))
                                        of str1 [Occ=Once1]
                                        { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                        case validWindow of {
                                          GHC.Types.False ->
                                            PlutusTx.Builtins.Internal.trace
                                              @GHC.Types.Bool str1 GHC.Types.False;
                                          GHC.Types.True -> GHC.Types.True
                                        }
                                        }
                                        }
                                        }
                                        }
                                    }
                                    }
                                }
                                }
                           of validateMintingWindow [Occ=Once1!]
                           { __DEFAULT ->
                           let {
                             ds_d9s7
                               :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                    PlutusLedgerApi.V1.Value.TokenName, GHC.Num.Integer.Integer)]
                             [LclId,
                              Unf=Unf{Src=<vanilla>, TopLvl=False,
                                      Value=False, ConLike=False, WorkFree=False, Expandable=False,
                                      Guidance=IF_ARGS [] 20 0}]
                             ds_d9s7 = PlutusLedgerApi.V1.Value.flattenValue ipv } in
                           case join {
                                  fail_d9ss [Occ=Once4!T[1]] :: (# #) -> GHC.Types.Bool
                                  [LclId[JoinId(1)(Nothing)],
                                   Arity=1,
                                   Str=<L>,
                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                           Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                           Guidance=IF_ARGS [0] 490 0}]
                                  fail_d9ss _ [Occ=Dead, OS=OneShot]
                                    = case ds_d9s7 of ds_X3 [Occ=Once1] { __DEFAULT ->
                                      case PlutusTx.Builtins.Internal.appendString
                                             (PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                (GHC.CString.unpackCString#
                                                   "Invalid number of minted tokens: "#))
                                             (let {
                                                z1 [Occ=OnceL1] :: GHC.Num.Integer.Integer
                                                [LclId,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [] 10 10}]
                                                z1 = GHC.Num.Integer.IS 0# } in
                                              letrec {
                                                go [Occ=LoopBreaker]
                                                  :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                       PlutusLedgerApi.V1.Value.TokenName,
                                                       GHC.Num.Integer.Integer)]
                                                     -> GHC.Num.Integer.Integer
                                                [LclId,
                                                 Arity=1,
                                                 Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                         Value=True, ConLike=True, WorkFree=True,
                                                         Expandable=True,
                                                         Guidance=IF_ARGS [30] 100 0}]
                                                go
                                                  = \ (ds [Occ=Once1!]
                                                         :: [(PlutusLedgerApi.V1.Value.CurrencySymbol,
                                                              PlutusLedgerApi.V1.Value.TokenName,
                                                              GHC.Num.Integer.Integer)]) ->
                                                      case ds of {
                                                        [] -> z1;
                                                        : x [Occ=Once1!] xs [Occ=Once1] ->
                                                          case x of
                                                          { (_ [Occ=Dead], _ [Occ=Dead], _ [Occ=Dead]) ->
                                                          case go xs of acc1 [Occ=Once1] { __DEFAULT ->
                                                          PlutusTx.Builtins.Internal.addInteger
                                                            acc1 (GHC.Num.Integer.IS 1#)
                                                          }
                                                          }
                                                      }; } in
                                              case go ds_X3 of x1 [Occ=Once1] { __DEFAULT ->
                                              PlutusTx.Show.TH.concatBuiltinStrings
                                                (PlutusTx.Show.$fShowBuiltinByteString_$cshowsPrec1
                                                   (GHC.Num.Integer.IS 0#)
                                                   x1
                                                   (GHC.Types.[] @PlutusTx.Builtins.Internal.BuiltinString))
                                              })
                                      of str1 [Occ=Once1]
                                      { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                      case PlutusTx.Builtins.Internal.trace @() str1 GHC.Tuple.Prim.() of
                                      { () ->
                                      PlutusTx.Builtins.Internal.error
                                        @GHC.Types.Bool PlutusTx.Builtins.Internal.unitval
                                      }
                                      }
                                      } } in
                                case ds_d9s7 of {
                                  [] -> jump fail_d9ss GHC.Prim.(##);
                                  : ds_d9sk [Occ=Once1!] ds_d9sl [Occ=Once1!] ->
                                    case ds_d9sk of
                                    { (cs1 [Occ=Once1!], tn1 [Occ=Once1], q1 [Occ=Once1]) ->
                                    case ds_d9sl of {
                                      [] -> jump fail_d9ss GHC.Prim.(##);
                                      : ds_d9sm [Occ=Once1!] ds_d9sn [Occ=Once1!] ->
                                        case ds_d9sm of
                                        { (cs2 [Occ=Once1!], tn2 [Occ=Once1], q2 [Occ=Once1]) ->
                                        case ds_d9sn of {
                                          [] -> jump fail_d9ss GHC.Prim.(##);
                                          : ds_d9so [Occ=Once1!] ds_d9sp [Occ=Once1!] ->
                                            case ds_d9so of
                                            { (cs3 [Occ=Once1!], tn3 [Occ=Once1], q3 [Occ=Once1]) ->
                                            case ds_d9sp of {
                                              [] ->
                                                let {
                                                  conditions_s9SM [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9SM
                                                    = case cs1
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                             ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                             ; PlutusTx.Eq.N:Eq[0]
                                                                                   <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of x1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol
                                                              ctx)
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of y1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9SN [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 140 0}]
                                                  conditions_s9SN
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid currency symbol for token 1"#) } in
                                                let {
                                                  conditions_s9SO [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9SO = (conditions_s9SM, conditions_s9SN) } in
                                                let {
                                                  conditions_s9SP [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9SP
                                                    = case cs2
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                             ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                             ; PlutusTx.Eq.N:Eq[0]
                                                                                   <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of x1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol
                                                              ctx)
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of y1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9SQ [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 140 0}]
                                                  conditions_s9SQ
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid currency symbol for token 2"#) } in
                                                let {
                                                  conditions_s9SR [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9SR = (conditions_s9SP, conditions_s9SQ) } in
                                                let {
                                                  conditions_s9SS [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9SS
                                                    = case cs3
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                             %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                             ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                             ; PlutusTx.Eq.N:Eq[0]
                                                                                   <PlutusLedgerApi.V1.Value.CurrencySymbol>_N))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of x1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case (PlutusLedgerApi.V2.Contexts.ownCurrencySymbol
                                                              ctx)
                                                           `cast` (Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:CurrencySymbol[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.CurrencySymbol>_N)))
                                                                   :: GHC.Types.Coercible
                                                                        PlutusLedgerApi.V1.Value.CurrencySymbol
                                                                        PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      of y1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                      case PlutusTx.Builtins.Internal.equalsByteString x1 y1
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9ST [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 140 0}]
                                                  conditions_s9ST
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid currency symbol for token 3"#) } in
                                                let {
                                                  conditions_s9SU [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9SU = (conditions_s9SS, conditions_s9ST) } in
                                                let {
                                                  conditions_s9SV [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 100 0}]
                                                  conditions_s9SV
                                                    = case q1 of x1 [Occ=Once1] { __DEFAULT ->
                                                      case PlutusTx.Builtins.Internal.equalsInteger
                                                             x1 (GHC.Num.Integer.IS 1#)
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9SW [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9SW
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid quantity for token 1"#) } in
                                                let {
                                                  conditions_s9SX [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9SX = (conditions_s9SV, conditions_s9SW) } in
                                                let {
                                                  conditions_s9SY [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 100 0}]
                                                  conditions_s9SY
                                                    = case q2 of x1 [Occ=Once1] { __DEFAULT ->
                                                      case PlutusTx.Builtins.Internal.equalsInteger
                                                             x1 (GHC.Num.Integer.IS 1#)
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9SZ [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9SZ
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid quantity for token 2"#) } in
                                                let {
                                                  conditions_s9T0 [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9T0 = (conditions_s9SY, conditions_s9SZ) } in
                                                let {
                                                  conditions_s9T1 [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 100 0}]
                                                  conditions_s9T1
                                                    = case q3 of x1 [Occ=Once1] { __DEFAULT ->
                                                      case PlutusTx.Builtins.Internal.equalsInteger
                                                             x1 (GHC.Num.Integer.IS 1#)
                                                      of b1 [Occ=Once1]
                                                      { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                      PlutusTx.Builtins.Internal.ifThenElse
                                                        @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                      }
                                                      } } in
                                                let {
                                                  conditions_s9T2 [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 120 0}]
                                                  conditions_s9T2
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid quantity for token 3"#) } in
                                                let {
                                                  conditions_s9T3 [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9T3 = (conditions_s9T1, conditions_s9T2) } in
                                                let {
                                                  conditions_s9T4 [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 30 0}]
                                                  conditions_s9T4
                                                    = PlutusTx.Builtins.equalsByteString
                                                        (tn1
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.TokenName
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                        (coinFlipTokenName_s9Di
                                                         `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                 ; Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                                let {
                                                  conditions_s9T5 [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 150 0}]
                                                  conditions_s9T5
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid token name: expected CoinFlip"#) } in
                                                let {
                                                  conditions_s9T6 [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9T6 = (conditions_s9T4, conditions_s9T5) } in
                                                let {
                                                  conditions_s9T7 [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 30 0}]
                                                  conditions_s9T7
                                                    = PlutusTx.Builtins.equalsByteString
                                                        (tn2
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.TokenName
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                        (vrfHolderTokenName_s9Dh
                                                         `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                 ; Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                                let {
                                                  conditions_s9T8 [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 150 0}]
                                                  conditions_s9T8
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid token name: expected VRFHolder"#) } in
                                                let {
                                                  conditions_s9T9 [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9T9 = (conditions_s9T7, conditions_s9T8) } in
                                                let {
                                                  conditions_s9Ta [Occ=Once1] :: GHC.Types.Bool
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 30 0}]
                                                  conditions_s9Ta
                                                    = PlutusTx.Builtins.equalsByteString
                                                        (tn3
                                                         `cast` (Sym (SelCo:Fun(arg)
                                                                          (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                           %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                           ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                      <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                           ; PlutusTx.Eq.N:Eq[0]
                                                                                 <PlutusLedgerApi.V1.Value.TokenName>_N))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusLedgerApi.V1.Value.TokenName
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString))
                                                        (housePotTokenName_s9Dg
                                                         `cast` (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                 ; Sym (SelCo:Fun(arg)
                                                                            (SelCo:Fun(res)
                                                                                 (Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R Sym (PlutusLedgerApi.V1.Value.N:TokenName[0])
                                                                                  %<'GHC.Types.Many>_N ->_R <GHC.Types.Bool>_R
                                                                                  ; Sym (PlutusTx.Eq.N:Eq[0]
                                                                                             <PlutusLedgerApi.V1.Value.TokenName>_N)
                                                                                  ; PlutusTx.Eq.N:Eq[0]
                                                                                        <PlutusLedgerApi.V1.Value.TokenName>_N)))
                                                                 :: GHC.Types.Coercible
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString
                                                                      PlutusTx.Builtins.Internal.BuiltinByteString)) } in
                                                let {
                                                  conditions_s9Tb [Occ=Once1]
                                                    :: PlutusTx.Builtins.Internal.BuiltinString
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=False, ConLike=False, WorkFree=False,
                                                           Expandable=False,
                                                           Guidance=IF_ARGS [] 150 0}]
                                                  conditions_s9Tb
                                                    = PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                                        (GHC.CString.unpackCString#
                                                           "Invalid token name: expected HousePot"#) } in
                                                let {
                                                  conditions_s9Tc [Occ=Once1]
                                                    :: (GHC.Types.Bool,
                                                        PlutusTx.Builtins.Internal.BuiltinString)
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Tc = (conditions_s9Ta, conditions_s9Tb) } in
                                                let {
                                                  conditions_s9Td [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Td
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9Tc
                                                        (GHC.Types.[]
                                                           @(GHC.Types.Bool,
                                                             PlutusTx.Builtins.Internal.BuiltinString)) } in
                                                let {
                                                  conditions_s9Te [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Te
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9T9
                                                        conditions_s9Td } in
                                                let {
                                                  conditions_s9Tf [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Tf
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9T6
                                                        conditions_s9Te } in
                                                let {
                                                  conditions_s9Tg [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Tg
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9T3
                                                        conditions_s9Tf } in
                                                let {
                                                  conditions_s9Th [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Th
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9T0
                                                        conditions_s9Tg } in
                                                let {
                                                  conditions_s9Ti [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Ti
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9SX
                                                        conditions_s9Th } in
                                                let {
                                                  conditions_s9Tj [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Tj
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9SU
                                                        conditions_s9Ti } in
                                                let {
                                                  conditions_s9Tk [Occ=Once1]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                  [LclId,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [] 10 10}]
                                                  conditions_s9Tk
                                                    = GHC.Types.:
                                                        @(GHC.Types.Bool,
                                                          PlutusTx.Builtins.Internal.BuiltinString)
                                                        conditions_s9SR
                                                        conditions_s9Tj } in
                                                joinrec {
                                                  go [Occ=LoopBreakerT[1]]
                                                    :: [(GHC.Types.Bool,
                                                         PlutusTx.Builtins.Internal.BuiltinString)]
                                                       -> GHC.Types.Bool
                                                  [LclId[JoinId(1)(Nothing)],
                                                   Arity=1,
                                                   Str=<L>,
                                                   Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                           Value=True, ConLike=True, WorkFree=True,
                                                           Expandable=True,
                                                           Guidance=IF_ARGS [30] 84 20}]
                                                  go (ds [Occ=Once1!]
                                                        :: [(GHC.Types.Bool,
                                                             PlutusTx.Builtins.Internal.BuiltinString)])
                                                    = case ds of {
                                                        [] -> GHC.Types.True;
                                                        : x [Occ=Once1!] xs [Occ=Once1] ->
                                                          case case x of
                                                               { (condition [Occ=Once1], msg [Occ=Once1]) ->
                                                               PlutusTx.Trace.traceIfFalse msg condition
                                                               }
                                                          of {
                                                            GHC.Types.False -> GHC.Types.False;
                                                            GHC.Types.True -> jump go xs
                                                          }
                                                      }; } in
                                                jump go
                                                  (GHC.Types.:
                                                     @(GHC.Types.Bool,
                                                       PlutusTx.Builtins.Internal.BuiltinString)
                                                     conditions_s9SO
                                                     conditions_s9Tk);
                                              : _ [Occ=Dead] _ [Occ=Dead] -> jump fail_d9ss GHC.Prim.(##)
                                            }
                                            }
                                        }
                                        }
                                    }
                                    }
                                }
                           of mintedExactlyThreeTokens [Occ=Once1!]
                           { __DEFAULT ->
                           PlutusTx.List.and
                             (GHC.Types.:
                                @GHC.Types.Bool
                                (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                        (GHC.CString.unpackCString#
                                           "Unauthorized: Transaction not signed by correct key"#)
                                 of str1 [Occ=Once1]
                                 { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                 case joinrec {
                                        go12 [Occ=LoopBreakerT[1]]
                                          :: [PlutusLedgerApi.V1.Crypto.PubKeyHash] -> GHC.Types.Bool
                                        [LclId[JoinId(1)(Nothing)],
                                         Arity=1,
                                         Str=<L>,
                                         Unf=Unf{Src=<vanilla>, TopLvl=False,
                                                 Value=True, ConLike=True, WorkFree=True, Expandable=True,
                                                 Guidance=IF_ARGS [30] 134 20}]
                                        go12 (ds13 [Occ=Once1!] :: [PlutusLedgerApi.V1.Crypto.PubKeyHash])
                                          = case ds13 of {
                                              [] -> GHC.Types.False;
                                              : x2 [Occ=Once1!] xs [Occ=Once1] ->
                                                case x2
                                                     `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                                             :: GHC.Types.Coercible
                                                                  PlutusLedgerApi.V1.Crypto.PubKeyHash
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)
                                                of y1 [Occ=Once1]
                                                { PlutusTx.Builtins.Internal.BuiltinByteString _ [Occ=Dead] ->
                                                case PlutusTx.Builtins.Internal.equalsByteString nt_s9Qy y1
                                                of b1 [Occ=Once1]
                                                { PlutusTx.Builtins.Internal.BuiltinBool _ [Occ=Dead] ->
                                                case PlutusTx.Builtins.Internal.ifThenElse
                                                       @GHC.Types.Bool b1 GHC.Types.True GHC.Types.False
                                                of {
                                                  GHC.Types.False -> jump go12 xs;
                                                  GHC.Types.True -> GHC.Types.True
                                                }
                                                }
                                                }
                                            }; } in
                                      jump go12 ipv
                                 of {
                                   GHC.Types.False ->
                                     PlutusTx.Builtins.Internal.trace
                                       @GHC.Types.Bool str1 GHC.Types.False;
                                   GHC.Types.True -> GHC.Types.True
                                 }
                                 })
                                (GHC.Types.:
                                   @GHC.Types.Bool
                                   (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                           (GHC.CString.unpackCString#
                                              "Invalid: Must mint exactly three tokens"#)
                                    of str1 [Occ=Once1]
                                    { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                    case mintedExactlyThreeTokens of {
                                      GHC.Types.False ->
                                        PlutusTx.Builtins.Internal.trace
                                          @GHC.Types.Bool str1 GHC.Types.False;
                                      GHC.Types.True -> GHC.Types.True
                                    }
                                    })
                                   (GHC.Types.:
                                      @GHC.Types.Bool
                                      (case PlutusTx.Builtins.HasOpaque.stringToBuiltinString
                                              (GHC.CString.unpackCString#
                                                 "Invalid: Transaction outside minting window"#)
                                       of str1 [Occ=Once1]
                                       { PlutusTx.Builtins.Internal.BuiltinString _ [Occ=Dead] ->
                                       case validateMintingWindow of {
                                         GHC.Types.False ->
                                           PlutusTx.Builtins.Internal.trace
                                             @GHC.Types.Bool str1 GHC.Types.False;
                                         GHC.Types.True -> GHC.Types.True
                                       }
                                       })
                                      (GHC.Types.[] @GHC.Types.Bool))))
                           }
                           }
                           }
                           }
                           }
                           }
Context: Compiling definition of: NFTThree.scriptIdentityTypedPolicy
Context: Compiling expr: NFTThree.scriptIdentityTypedPolicy
Context: Compiling expr: NFTThree.scriptIdentityTypedPolicy
                           (nt_s9TP
                            `cast` (Sym (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0])
                                    :: GHC.Types.Coercible
                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                         PlutusLedgerApi.V1.Crypto.PubKeyHash))
Context: Compiling expr: NFTThree.scriptIdentityTypedPolicy
                           (nt_s9TP
                            `cast` (Sym (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0])
                                    :: GHC.Types.Coercible
                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                         PlutusLedgerApi.V1.Crypto.PubKeyHash))
                           (PlutusTx.IsData.Instances.$fUnsafeFromData()_$cunsafeFromBuiltinData
                              redeemer)
Context: Compiling expr: NFTThree.scriptIdentityTypedPolicy
                           (nt_s9TP
                            `cast` (Sym (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0])
                                    :: GHC.Types.Coercible
                                         PlutusTx.Builtins.Internal.BuiltinByteString
                                         PlutusLedgerApi.V1.Crypto.PubKeyHash))
                           (PlutusTx.IsData.Instances.$fUnsafeFromData()_$cunsafeFromBuiltinData
                              redeemer)
                           (PlutusLedgerApi.V2.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                              ctx)
Context: Compiling expr: case NFTThree.scriptIdentityTypedPolicy
                                (nt_s9TP
                                 `cast` (Sym (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0])
                                         :: GHC.Types.Coercible
                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                              PlutusLedgerApi.V1.Crypto.PubKeyHash))
                                (PlutusTx.IsData.Instances.$fUnsafeFromData()_$cunsafeFromBuiltinData
                                   redeemer)
                                (PlutusLedgerApi.V2.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                                   ctx)
                         of {
                           GHC.Types.False ->
                             PlutusTx.Trace.traceError
                               @PlutusTx.Builtins.Internal.BuiltinUnit
                               PlutusTx.ErrorCodes.checkHasFailedError;
                           GHC.Types.True -> PlutusTx.Builtins.Internal.unitval
                         }
Context: Compiling expr: case ctx of ctx [Occ=Once1]
                         { PlutusTx.Builtins.Internal.BuiltinData _ [Occ=Dead] ->
                         case NFTThree.scriptIdentityTypedPolicy
                                (nt_s9TP
                                 `cast` (Sym (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0])
                                         :: GHC.Types.Coercible
                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                              PlutusLedgerApi.V1.Crypto.PubKeyHash))
                                (PlutusTx.IsData.Instances.$fUnsafeFromData()_$cunsafeFromBuiltinData
                                   redeemer)
                                (PlutusLedgerApi.V2.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                                   ctx)
                         of {
                           GHC.Types.False ->
                             PlutusTx.Trace.traceError
                               @PlutusTx.Builtins.Internal.BuiltinUnit
                               PlutusTx.ErrorCodes.checkHasFailedError;
                           GHC.Types.True -> PlutusTx.Builtins.Internal.unitval
                         }
                         }
Context: Compiling expr: case redeemer of redeemer [Occ=Once1]
                         { PlutusTx.Builtins.Internal.BuiltinData _ [Occ=Dead] ->
                         case ctx of ctx [Occ=Once1]
                         { PlutusTx.Builtins.Internal.BuiltinData _ [Occ=Dead] ->
                         case NFTThree.scriptIdentityTypedPolicy
                                (nt_s9TP
                                 `cast` (Sym (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0])
                                         :: GHC.Types.Coercible
                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                              PlutusLedgerApi.V1.Crypto.PubKeyHash))
                                (PlutusTx.IsData.Instances.$fUnsafeFromData()_$cunsafeFromBuiltinData
                                   redeemer)
                                (PlutusLedgerApi.V2.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                                   ctx)
                         of {
                           GHC.Types.False ->
                             PlutusTx.Trace.traceError
                               @PlutusTx.Builtins.Internal.BuiltinUnit
                               PlutusTx.ErrorCodes.checkHasFailedError;
                           GHC.Types.True -> PlutusTx.Builtins.Internal.unitval
                         }
                         }
                         }
Context: Compiling expr: case pkh
                              `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                      :: GHC.Types.Coercible
                                           PlutusLedgerApi.V1.Crypto.PubKeyHash
                                           PlutusTx.Builtins.Internal.BuiltinByteString)
                         of nt_s9TP [Occ=Once1]
                         { __DEFAULT ->
                         case redeemer of redeemer [Occ=Once1]
                         { PlutusTx.Builtins.Internal.BuiltinData _ [Occ=Dead] ->
                         case ctx of ctx [Occ=Once1]
                         { PlutusTx.Builtins.Internal.BuiltinData _ [Occ=Dead] ->
                         case NFTThree.scriptIdentityTypedPolicy
                                (nt_s9TP
                                 `cast` (Sym (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0])
                                         :: GHC.Types.Coercible
                                              PlutusTx.Builtins.Internal.BuiltinByteString
                                              PlutusLedgerApi.V1.Crypto.PubKeyHash))
                                (PlutusTx.IsData.Instances.$fUnsafeFromData()_$cunsafeFromBuiltinData
                                   redeemer)
                                (PlutusLedgerApi.V2.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                                   ctx)
                         of {
                           GHC.Types.False ->
                             PlutusTx.Trace.traceError
                               @PlutusTx.Builtins.Internal.BuiltinUnit
                               PlutusTx.ErrorCodes.checkHasFailedError;
                           GHC.Types.True -> PlutusTx.Builtins.Internal.unitval
                         }
                         }
                         }
                         }
Context: Compiling expr: \ (ctx [Occ=Once1!]
                              :: PlutusTx.Builtins.Internal.BuiltinData) ->
                           case pkh
                                `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                        :: GHC.Types.Coercible
                                             PlutusLedgerApi.V1.Crypto.PubKeyHash
                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                           of nt_s9TP [Occ=Once1]
                           { __DEFAULT ->
                           case redeemer of redeemer [Occ=Once1]
                           { PlutusTx.Builtins.Internal.BuiltinData _ [Occ=Dead] ->
                           case ctx of ctx [Occ=Once1]
                           { PlutusTx.Builtins.Internal.BuiltinData _ [Occ=Dead] ->
                           case NFTThree.scriptIdentityTypedPolicy
                                  (nt_s9TP
                                   `cast` (Sym (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0])
                                           :: GHC.Types.Coercible
                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                PlutusLedgerApi.V1.Crypto.PubKeyHash))
                                  (PlutusTx.IsData.Instances.$fUnsafeFromData()_$cunsafeFromBuiltinData
                                     redeemer)
                                  (PlutusLedgerApi.V2.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                                     ctx)
                           of {
                             GHC.Types.False ->
                               PlutusTx.Trace.traceError
                                 @PlutusTx.Builtins.Internal.BuiltinUnit
                                 PlutusTx.ErrorCodes.checkHasFailedError;
                             GHC.Types.True -> PlutusTx.Builtins.Internal.unitval
                           }
                           }
                           }
                           }
Context: Compiling expr: \ (redeemer [Occ=Once1!]
                              :: PlutusTx.Builtins.Internal.BuiltinData)
                           (ctx [Occ=Once1!] :: PlutusTx.Builtins.Internal.BuiltinData) ->
                           case pkh
                                `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                        :: GHC.Types.Coercible
                                             PlutusLedgerApi.V1.Crypto.PubKeyHash
                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                           of nt_s9TP [Occ=Once1]
                           { __DEFAULT ->
                           case redeemer of redeemer [Occ=Once1]
                           { PlutusTx.Builtins.Internal.BuiltinData _ [Occ=Dead] ->
                           case ctx of ctx [Occ=Once1]
                           { PlutusTx.Builtins.Internal.BuiltinData _ [Occ=Dead] ->
                           case NFTThree.scriptIdentityTypedPolicy
                                  (nt_s9TP
                                   `cast` (Sym (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0])
                                           :: GHC.Types.Coercible
                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                PlutusLedgerApi.V1.Crypto.PubKeyHash))
                                  (PlutusTx.IsData.Instances.$fUnsafeFromData()_$cunsafeFromBuiltinData
                                     redeemer)
                                  (PlutusLedgerApi.V2.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                                     ctx)
                           of {
                             GHC.Types.False ->
                               PlutusTx.Trace.traceError
                                 @PlutusTx.Builtins.Internal.BuiltinUnit
                                 PlutusTx.ErrorCodes.checkHasFailedError;
                             GHC.Types.True -> PlutusTx.Builtins.Internal.unitval
                           }
                           }
                           }
                           }
Context: Compiling expr: \ (pkh [Occ=Once1]
                              :: NFTThree.ScriptIdentityParams)
                           (redeemer [Occ=Once1!] :: PlutusTx.Builtins.Internal.BuiltinData)
                           (ctx [Occ=Once1!] :: PlutusTx.Builtins.Internal.BuiltinData) ->
                           case pkh
                                `cast` (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0]
                                        :: GHC.Types.Coercible
                                             PlutusLedgerApi.V1.Crypto.PubKeyHash
                                             PlutusTx.Builtins.Internal.BuiltinByteString)
                           of nt_s9TP [Occ=Once1]
                           { __DEFAULT ->
                           case redeemer of redeemer [Occ=Once1]
                           { PlutusTx.Builtins.Internal.BuiltinData _ [Occ=Dead] ->
                           case ctx of ctx [Occ=Once1]
                           { PlutusTx.Builtins.Internal.BuiltinData _ [Occ=Dead] ->
                           case NFTThree.scriptIdentityTypedPolicy
                                  (nt_s9TP
                                   `cast` (Sym (PlutusLedgerApi.V1.Crypto.N:PubKeyHash[0])
                                           :: GHC.Types.Coercible
                                                PlutusTx.Builtins.Internal.BuiltinByteString
                                                PlutusLedgerApi.V1.Crypto.PubKeyHash))
                                  (PlutusTx.IsData.Instances.$fUnsafeFromData()_$cunsafeFromBuiltinData
                                     redeemer)
                                  (PlutusLedgerApi.V2.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                                     ctx)
                           of {
                             GHC.Types.False ->
                               PlutusTx.Trace.traceError
                                 @PlutusTx.Builtins.Internal.BuiltinUnit
                                 PlutusTx.ErrorCodes.checkHasFailedError;
                             GHC.Types.True -> PlutusTx.Builtins.Internal.unitval
                           }
                           }
                           }
                           }
Context: Compiling definition of: NFTThree.scriptIdentityUntypedPolicy
Context: Compiling expr: NFTThree.scriptIdentityUntypedPolicy
Context: Compiling expr at "plutus-tx-template-0.6.0.0-inplace-CoinFlipGame:NFTThree:(133,7)-(133,59)"
Failed, no modules loaded.
Leaving GHCi.
packages definitely up to date: plutus-tx-template-0.6.0.0-inplace-CoinFlipGame
packages previously probably up to date: plutus-tx-template-0.6.0.0-inplace-CoinFlipGame
packages now probably up to date: plutus-tx-template-0.6.0.0-inplace-CoinFlipGame
packages newly up to date: 
packages out to date: plutus-tx-template-0.6.0.0-inplace-Compiler
packages invalid due to dep change: plutus-tx-template-0.6.0.0-inplace-Compiler
packages invalid due to build failure: 
